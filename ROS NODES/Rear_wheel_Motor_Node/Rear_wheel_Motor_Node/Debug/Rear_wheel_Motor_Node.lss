
Rear_wheel_Motor_Node.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000386e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001b6  00800060  0000386e  00003902  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004e3  00800216  00800216  00003ab8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003ab8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003ae8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  00003b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005070  00000000  00000000  00003dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011da  00000000  00000000  00008e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002537  00000000  00000000  0000a01e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007a0  00000000  00000000  0000c558  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002305  00000000  00000000  0000ccf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003846  00000000  00000000  0000effd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000370  00000000  00000000  00012843  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2b 00 	jmp	0x56	; 0x56 <__ctors_end>
       4:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__vector_1>
       8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
       c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      10:	0c 94 4e 15 	jmp	0x2a9c	; 0x2a9c <__vector_4>
      14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      2c:	0c 94 58 14 	jmp	0x28b0	; 0x28b0 <__vector_11>
      30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

00000054 <__ctors_start>:
      54:	cb 14       	cp	r12, r11

00000056 <__ctors_end>:
      56:	11 24       	eor	r1, r1
      58:	1f be       	out	0x3f, r1	; 63
      5a:	cf e5       	ldi	r28, 0x5F	; 95
      5c:	d8 e0       	ldi	r29, 0x08	; 8
      5e:	de bf       	out	0x3e, r29	; 62
      60:	cd bf       	out	0x3d, r28	; 61

00000062 <__do_copy_data>:
      62:	12 e0       	ldi	r17, 0x02	; 2
      64:	a0 e6       	ldi	r26, 0x60	; 96
      66:	b0 e0       	ldi	r27, 0x00	; 0
      68:	ee e6       	ldi	r30, 0x6E	; 110
      6a:	f8 e3       	ldi	r31, 0x38	; 56
      6c:	02 c0       	rjmp	.+4      	; 0x72 <__do_copy_data+0x10>
      6e:	05 90       	lpm	r0, Z+
      70:	0d 92       	st	X+, r0
      72:	a6 31       	cpi	r26, 0x16	; 22
      74:	b1 07       	cpc	r27, r17
      76:	d9 f7       	brne	.-10     	; 0x6e <__do_copy_data+0xc>

00000078 <__do_clear_bss>:
      78:	26 e0       	ldi	r18, 0x06	; 6
      7a:	a6 e1       	ldi	r26, 0x16	; 22
      7c:	b2 e0       	ldi	r27, 0x02	; 2
      7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
      80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
      82:	a9 3f       	cpi	r26, 0xF9	; 249
      84:	b2 07       	cpc	r27, r18
      86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>

00000088 <__do_global_ctors>:
      88:	10 e0       	ldi	r17, 0x00	; 0
      8a:	cb e2       	ldi	r28, 0x2B	; 43
      8c:	d0 e0       	ldi	r29, 0x00	; 0
      8e:	04 c0       	rjmp	.+8      	; 0x98 <__do_global_ctors+0x10>
      90:	21 97       	sbiw	r28, 0x01	; 1
      92:	fe 01       	movw	r30, r28
      94:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <__tablejump2__>
      98:	ca 32       	cpi	r28, 0x2A	; 42
      9a:	d1 07       	cpc	r29, r17
      9c:	c9 f7       	brne	.-14     	; 0x90 <__do_global_ctors+0x8>
      9e:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <main>
      a2:	0c 94 35 1c 	jmp	0x386a	; 0x386a <_exit>

000000a6 <__bad_interrupt>:
      a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <_ZNK8std_msgs4Time9serializeEPh>:
int32_t Volt_Out = 0 ;
uint16_t GOAL = 0;

// Needed for AVR to use virtual functions
extern "C" void __cxa_pure_virtual(void);
void __cxa_pure_virtual(void) {}
      aa:	dc 01       	movw	r26, r24
      ac:	fb 01       	movw	r30, r22
      ae:	12 96       	adiw	r26, 0x02	; 2
      b0:	8c 91       	ld	r24, X
      b2:	12 97       	sbiw	r26, 0x02	; 2
      b4:	80 83       	st	Z, r24
      b6:	13 96       	adiw	r26, 0x03	; 3
      b8:	8c 91       	ld	r24, X
      ba:	13 97       	sbiw	r26, 0x03	; 3
      bc:	81 83       	std	Z+1, r24	; 0x01
      be:	14 96       	adiw	r26, 0x04	; 4
      c0:	8c 91       	ld	r24, X
      c2:	14 97       	sbiw	r26, 0x04	; 4
      c4:	82 83       	std	Z+2, r24	; 0x02
      c6:	15 96       	adiw	r26, 0x05	; 5
      c8:	8c 91       	ld	r24, X
      ca:	15 97       	sbiw	r26, 0x05	; 5
      cc:	83 83       	std	Z+3, r24	; 0x03
      ce:	16 96       	adiw	r26, 0x06	; 6
      d0:	8c 91       	ld	r24, X
      d2:	16 97       	sbiw	r26, 0x06	; 6
      d4:	84 83       	std	Z+4, r24	; 0x04
      d6:	17 96       	adiw	r26, 0x07	; 7
      d8:	8c 91       	ld	r24, X
      da:	17 97       	sbiw	r26, 0x07	; 7
      dc:	85 83       	std	Z+5, r24	; 0x05
      de:	18 96       	adiw	r26, 0x08	; 8
      e0:	8c 91       	ld	r24, X
      e2:	18 97       	sbiw	r26, 0x08	; 8
      e4:	86 83       	std	Z+6, r24	; 0x06
      e6:	19 96       	adiw	r26, 0x09	; 9
      e8:	8c 91       	ld	r24, X
      ea:	87 83       	std	Z+7, r24	; 0x07
      ec:	88 e0       	ldi	r24, 0x08	; 8
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	08 95       	ret

000000f2 <_ZN8std_msgs4Time11deserializeEPh>:
      f2:	fc 01       	movw	r30, r24
      f4:	db 01       	movw	r26, r22
      f6:	4c 91       	ld	r20, X
      f8:	50 e0       	ldi	r21, 0x00	; 0
      fa:	60 e0       	ldi	r22, 0x00	; 0
      fc:	70 e0       	ldi	r23, 0x00	; 0
      fe:	42 83       	std	Z+2, r20	; 0x02
     100:	53 83       	std	Z+3, r21	; 0x03
     102:	64 83       	std	Z+4, r22	; 0x04
     104:	75 83       	std	Z+5, r23	; 0x05
     106:	11 96       	adiw	r26, 0x01	; 1
     108:	8c 91       	ld	r24, X
     10a:	11 97       	sbiw	r26, 0x01	; 1
     10c:	58 2b       	or	r21, r24
     10e:	42 83       	std	Z+2, r20	; 0x02
     110:	53 83       	std	Z+3, r21	; 0x03
     112:	64 83       	std	Z+4, r22	; 0x04
     114:	75 83       	std	Z+5, r23	; 0x05
     116:	12 96       	adiw	r26, 0x02	; 2
     118:	8c 91       	ld	r24, X
     11a:	12 97       	sbiw	r26, 0x02	; 2
     11c:	68 2b       	or	r22, r24
     11e:	42 83       	std	Z+2, r20	; 0x02
     120:	53 83       	std	Z+3, r21	; 0x03
     122:	64 83       	std	Z+4, r22	; 0x04
     124:	75 83       	std	Z+5, r23	; 0x05
     126:	13 96       	adiw	r26, 0x03	; 3
     128:	8c 91       	ld	r24, X
     12a:	13 97       	sbiw	r26, 0x03	; 3
     12c:	78 2b       	or	r23, r24
     12e:	42 83       	std	Z+2, r20	; 0x02
     130:	53 83       	std	Z+3, r21	; 0x03
     132:	64 83       	std	Z+4, r22	; 0x04
     134:	75 83       	std	Z+5, r23	; 0x05
     136:	14 96       	adiw	r26, 0x04	; 4
     138:	4c 91       	ld	r20, X
     13a:	14 97       	sbiw	r26, 0x04	; 4
     13c:	50 e0       	ldi	r21, 0x00	; 0
     13e:	60 e0       	ldi	r22, 0x00	; 0
     140:	70 e0       	ldi	r23, 0x00	; 0
     142:	46 83       	std	Z+6, r20	; 0x06
     144:	57 83       	std	Z+7, r21	; 0x07
     146:	60 87       	std	Z+8, r22	; 0x08
     148:	71 87       	std	Z+9, r23	; 0x09
     14a:	15 96       	adiw	r26, 0x05	; 5
     14c:	8c 91       	ld	r24, X
     14e:	15 97       	sbiw	r26, 0x05	; 5
     150:	58 2b       	or	r21, r24
     152:	46 83       	std	Z+6, r20	; 0x06
     154:	57 83       	std	Z+7, r21	; 0x07
     156:	60 87       	std	Z+8, r22	; 0x08
     158:	71 87       	std	Z+9, r23	; 0x09
     15a:	16 96       	adiw	r26, 0x06	; 6
     15c:	8c 91       	ld	r24, X
     15e:	16 97       	sbiw	r26, 0x06	; 6
     160:	68 2b       	or	r22, r24
     162:	46 83       	std	Z+6, r20	; 0x06
     164:	57 83       	std	Z+7, r21	; 0x07
     166:	60 87       	std	Z+8, r22	; 0x08
     168:	71 87       	std	Z+9, r23	; 0x09
     16a:	17 96       	adiw	r26, 0x07	; 7
     16c:	8c 91       	ld	r24, X
     16e:	78 2b       	or	r23, r24
     170:	46 83       	std	Z+6, r20	; 0x06
     172:	57 83       	std	Z+7, r21	; 0x07
     174:	60 87       	std	Z+8, r22	; 0x08
     176:	71 87       	std	Z+9, r23	; 0x09
     178:	88 e0       	ldi	r24, 0x08	; 8
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	08 95       	ret

0000017e <_ZN8std_msgs4Time7getTypeEv>:
     17e:	86 e6       	ldi	r24, 0x66	; 102
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	08 95       	ret

00000184 <_ZN8std_msgs4Time6getMD5Ev>:
     184:	84 e7       	ldi	r24, 0x74	; 116
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	08 95       	ret

0000018a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:
     18a:	4f 92       	push	r4
     18c:	5f 92       	push	r5
     18e:	6f 92       	push	r6
     190:	7f 92       	push	r7
     192:	8f 92       	push	r8
     194:	9f 92       	push	r9
     196:	af 92       	push	r10
     198:	bf 92       	push	r11
     19a:	cf 92       	push	r12
     19c:	df 92       	push	r13
     19e:	ef 92       	push	r14
     1a0:	ff 92       	push	r15
     1a2:	0f 93       	push	r16
     1a4:	1f 93       	push	r17
     1a6:	cf 93       	push	r28
     1a8:	df 93       	push	r29
     1aa:	eb 01       	movw	r28, r22
     1ac:	28 81       	ld	r18, Y
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	dc 01       	movw	r26, r24
     1b2:	13 96       	adiw	r26, 0x03	; 3
     1b4:	3c 93       	st	X, r19
     1b6:	2e 93       	st	-X, r18
     1b8:	12 97       	sbiw	r26, 0x02	; 2
     1ba:	49 81       	ldd	r20, Y+1	; 0x01
     1bc:	34 2b       	or	r19, r20
     1be:	13 96       	adiw	r26, 0x03	; 3
     1c0:	3c 93       	st	X, r19
     1c2:	2e 93       	st	-X, r18
     1c4:	12 97       	sbiw	r26, 0x02	; 2
     1c6:	fb 01       	movw	r30, r22
     1c8:	32 96       	adiw	r30, 0x02	; 2
     1ca:	20 e0       	ldi	r18, 0x00	; 0
     1cc:	30 e0       	ldi	r19, 0x00	; 0
     1ce:	c1 2c       	mov	r12, r1
     1d0:	d1 2c       	mov	r13, r1
     1d2:	76 01       	movw	r14, r12
     1d4:	0e c0       	rjmp	.+28     	; 0x1f2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x68>
     1d6:	46 01       	movw	r8, r12
     1d8:	57 01       	movw	r10, r14
     1da:	b6 e0       	ldi	r27, 0x06	; 6
     1dc:	8b 0e       	add	r8, r27
     1de:	91 1c       	adc	r9, r1
     1e0:	a1 1c       	adc	r10, r1
     1e2:	b1 1c       	adc	r11, r1
     1e4:	e7 e0       	ldi	r30, 0x07	; 7
     1e6:	8e 16       	cp	r8, r30
     1e8:	91 04       	cpc	r9, r1
     1ea:	a1 04       	cpc	r10, r1
     1ec:	b1 04       	cpc	r11, r1
     1ee:	b8 f4       	brcc	.+46     	; 0x21e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x94>
     1f0:	26 c0       	rjmp	.+76     	; 0x23e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xb4>
     1f2:	41 91       	ld	r20, Z+
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	02 2e       	mov	r0, r18
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x74>
     1fa:	44 0f       	add	r20, r20
     1fc:	55 1f       	adc	r21, r21
     1fe:	0a 94       	dec	r0
     200:	e2 f7       	brpl	.-8      	; 0x1fa <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x70>
     202:	05 2e       	mov	r0, r21
     204:	00 0c       	add	r0, r0
     206:	66 0b       	sbc	r22, r22
     208:	77 0b       	sbc	r23, r23
     20a:	c4 2a       	or	r12, r20
     20c:	d5 2a       	or	r13, r21
     20e:	e6 2a       	or	r14, r22
     210:	f7 2a       	or	r15, r23
     212:	28 5f       	subi	r18, 0xF8	; 248
     214:	3f 4f       	sbci	r19, 0xFF	; 255
     216:	20 32       	cpi	r18, 0x20	; 32
     218:	31 05       	cpc	r19, r1
     21a:	59 f7       	brne	.-42     	; 0x1f2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x68>
     21c:	dc cf       	rjmp	.-72     	; 0x1d6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x4c>
     21e:	fe 01       	movw	r30, r28
     220:	35 96       	adiw	r30, 0x05	; 5
     222:	26 e0       	ldi	r18, 0x06	; 6
     224:	30 e0       	ldi	r19, 0x00	; 0
     226:	41 81       	ldd	r20, Z+1	; 0x01
     228:	41 93       	st	Z+, r20
     22a:	2f 5f       	subi	r18, 0xFF	; 255
     22c:	3f 4f       	sbci	r19, 0xFF	; 255
     22e:	a9 01       	movw	r20, r18
     230:	60 e0       	ldi	r22, 0x00	; 0
     232:	70 e0       	ldi	r23, 0x00	; 0
     234:	48 15       	cp	r20, r8
     236:	59 05       	cpc	r21, r9
     238:	6a 05       	cpc	r22, r10
     23a:	7b 05       	cpc	r23, r11
     23c:	a0 f3       	brcs	.-24     	; 0x226 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x9c>
     23e:	86 01       	movw	r16, r12
     240:	fe 01       	movw	r30, r28
     242:	ec 0d       	add	r30, r12
     244:	fd 1d       	adc	r31, r13
     246:	15 82       	std	Z+5, r1	; 0x05
     248:	9e 01       	movw	r18, r28
     24a:	2b 5f       	subi	r18, 0xFB	; 251
     24c:	3f 4f       	sbci	r19, 0xFF	; 255
     24e:	dc 01       	movw	r26, r24
     250:	15 96       	adiw	r26, 0x05	; 5
     252:	3c 93       	st	X, r19
     254:	2e 93       	st	-X, r18
     256:	14 97       	sbiw	r26, 0x04	; 4
     258:	d6 01       	movw	r26, r12
     25a:	16 96       	adiw	r26, 0x06	; 6
     25c:	fe 01       	movw	r30, r28
     25e:	ea 0f       	add	r30, r26
     260:	fb 1f       	adc	r31, r27
     262:	20 e0       	ldi	r18, 0x00	; 0
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	40 e0       	ldi	r20, 0x00	; 0
     268:	50 e0       	ldi	r21, 0x00	; 0
     26a:	ba 01       	movw	r22, r20
     26c:	c1 90       	ld	r12, Z+
     26e:	d1 2c       	mov	r13, r1
     270:	02 2e       	mov	r0, r18
     272:	02 c0       	rjmp	.+4      	; 0x278 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xee>
     274:	cc 0c       	add	r12, r12
     276:	dd 1c       	adc	r13, r13
     278:	0a 94       	dec	r0
     27a:	e2 f7       	brpl	.-8      	; 0x274 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xea>
     27c:	0d 2c       	mov	r0, r13
     27e:	00 0c       	add	r0, r0
     280:	ee 08       	sbc	r14, r14
     282:	ff 08       	sbc	r15, r15
     284:	4c 29       	or	r20, r12
     286:	5d 29       	or	r21, r13
     288:	6e 29       	or	r22, r14
     28a:	7f 29       	or	r23, r15
     28c:	28 5f       	subi	r18, 0xF8	; 248
     28e:	3f 4f       	sbci	r19, 0xFF	; 255
     290:	20 32       	cpi	r18, 0x20	; 32
     292:	31 05       	cpc	r19, r1
     294:	59 f7       	brne	.-42     	; 0x26c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe2>
     296:	14 96       	adiw	r26, 0x04	; 4
     298:	4d 01       	movw	r8, r26
     29a:	0b 2e       	mov	r0, r27
     29c:	00 0c       	add	r0, r0
     29e:	aa 08       	sbc	r10, r10
     2a0:	bb 08       	sbc	r11, r11
     2a2:	84 0e       	add	r8, r20
     2a4:	95 1e       	adc	r9, r21
     2a6:	a6 1e       	adc	r10, r22
     2a8:	b7 1e       	adc	r11, r23
     2aa:	6d 01       	movw	r12, r26
     2ac:	e1 2c       	mov	r14, r1
     2ae:	f1 2c       	mov	r15, r1
     2b0:	c8 14       	cp	r12, r8
     2b2:	d9 04       	cpc	r13, r9
     2b4:	ea 04       	cpc	r14, r10
     2b6:	fb 04       	cpc	r15, r11
     2b8:	a8 f4       	brcc	.+42     	; 0x2e4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x15a>
     2ba:	f8 01       	movw	r30, r16
     2bc:	39 96       	adiw	r30, 0x09	; 9
     2be:	ec 0f       	add	r30, r28
     2c0:	fd 1f       	adc	r31, r29
     2c2:	21 e0       	ldi	r18, 0x01	; 1
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	79 01       	movw	r14, r18
     2c8:	ec 1a       	sub	r14, r28
     2ca:	fd 0a       	sbc	r15, r29
     2cc:	21 81       	ldd	r18, Z+1	; 0x01
     2ce:	21 93       	st	Z+, r18
     2d0:	87 01       	movw	r16, r14
     2d2:	0e 0f       	add	r16, r30
     2d4:	1f 1f       	adc	r17, r31
     2d6:	20 e0       	ldi	r18, 0x00	; 0
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	08 15       	cp	r16, r8
     2dc:	19 05       	cpc	r17, r9
     2de:	2a 05       	cpc	r18, r10
     2e0:	3b 05       	cpc	r19, r11
     2e2:	a0 f3       	brcs	.-24     	; 0x2cc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
     2e4:	4a 0f       	add	r20, r26
     2e6:	5b 1f       	adc	r21, r27
     2e8:	be 01       	movw	r22, r28
     2ea:	64 0f       	add	r22, r20
     2ec:	75 1f       	adc	r23, r21
     2ee:	9b 01       	movw	r18, r22
     2f0:	21 50       	subi	r18, 0x01	; 1
     2f2:	31 09       	sbc	r19, r1
     2f4:	f9 01       	movw	r30, r18
     2f6:	10 82       	st	Z, r1
     2f8:	11 97       	sbiw	r26, 0x01	; 1
     2fa:	ac 0f       	add	r26, r28
     2fc:	bd 1f       	adc	r27, r29
     2fe:	fc 01       	movw	r30, r24
     300:	b7 83       	std	Z+7, r27	; 0x07
     302:	a6 83       	std	Z+6, r26	; 0x06
     304:	fb 01       	movw	r30, r22
     306:	60 e0       	ldi	r22, 0x00	; 0
     308:	70 e0       	ldi	r23, 0x00	; 0
     30a:	c1 2c       	mov	r12, r1
     30c:	d1 2c       	mov	r13, r1
     30e:	76 01       	movw	r14, r12
     310:	01 91       	ld	r16, Z+
     312:	10 e0       	ldi	r17, 0x00	; 0
     314:	06 2e       	mov	r0, r22
     316:	02 c0       	rjmp	.+4      	; 0x31c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x192>
     318:	00 0f       	add	r16, r16
     31a:	11 1f       	adc	r17, r17
     31c:	0a 94       	dec	r0
     31e:	e2 f7       	brpl	.-8      	; 0x318 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x18e>
     320:	01 2e       	mov	r0, r17
     322:	00 0c       	add	r0, r0
     324:	22 0b       	sbc	r18, r18
     326:	33 0b       	sbc	r19, r19
     328:	c0 2a       	or	r12, r16
     32a:	d1 2a       	or	r13, r17
     32c:	e2 2a       	or	r14, r18
     32e:	f3 2a       	or	r15, r19
     330:	68 5f       	subi	r22, 0xF8	; 248
     332:	7f 4f       	sbci	r23, 0xFF	; 255
     334:	60 32       	cpi	r22, 0x20	; 32
     336:	71 05       	cpc	r23, r1
     338:	59 f7       	brne	.-42     	; 0x310 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x186>
     33a:	ba 01       	movw	r22, r20
     33c:	6c 5f       	subi	r22, 0xFC	; 252
     33e:	7f 4f       	sbci	r23, 0xFF	; 255
     340:	2b 01       	movw	r4, r22
     342:	07 2e       	mov	r0, r23
     344:	00 0c       	add	r0, r0
     346:	66 08       	sbc	r6, r6
     348:	77 08       	sbc	r7, r7
     34a:	4c 0c       	add	r4, r12
     34c:	5d 1c       	adc	r5, r13
     34e:	6e 1c       	adc	r6, r14
     350:	7f 1c       	adc	r7, r15
     352:	8b 01       	movw	r16, r22
     354:	20 e0       	ldi	r18, 0x00	; 0
     356:	30 e0       	ldi	r19, 0x00	; 0
     358:	04 15       	cp	r16, r4
     35a:	15 05       	cpc	r17, r5
     35c:	26 05       	cpc	r18, r6
     35e:	37 05       	cpc	r19, r7
     360:	90 f4       	brcc	.+36     	; 0x386 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x1fc>
     362:	4d 5f       	subi	r20, 0xFD	; 253
     364:	5f 4f       	sbci	r21, 0xFF	; 255
     366:	fe 01       	movw	r30, r28
     368:	e4 0f       	add	r30, r20
     36a:	f5 1f       	adc	r31, r21
     36c:	9b 01       	movw	r18, r22
     36e:	41 81       	ldd	r20, Z+1	; 0x01
     370:	41 93       	st	Z+, r20
     372:	2f 5f       	subi	r18, 0xFF	; 255
     374:	3f 4f       	sbci	r19, 0xFF	; 255
     376:	49 01       	movw	r8, r18
     378:	a1 2c       	mov	r10, r1
     37a:	b1 2c       	mov	r11, r1
     37c:	84 14       	cp	r8, r4
     37e:	95 04       	cpc	r9, r5
     380:	a6 04       	cpc	r10, r6
     382:	b7 04       	cpc	r11, r7
     384:	a0 f3       	brcs	.-24     	; 0x36e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x1e4>
     386:	c6 0e       	add	r12, r22
     388:	d7 1e       	adc	r13, r23
     38a:	fe 01       	movw	r30, r28
     38c:	ec 0d       	add	r30, r12
     38e:	fd 1d       	adc	r31, r13
     390:	df 01       	movw	r26, r30
     392:	11 97       	sbiw	r26, 0x01	; 1
     394:	1c 92       	st	X, r1
     396:	61 50       	subi	r22, 0x01	; 1
     398:	71 09       	sbc	r23, r1
     39a:	c6 0f       	add	r28, r22
     39c:	d7 1f       	adc	r29, r23
     39e:	dc 01       	movw	r26, r24
     3a0:	19 96       	adiw	r26, 0x09	; 9
     3a2:	dc 93       	st	X, r29
     3a4:	ce 93       	st	-X, r28
     3a6:	18 97       	sbiw	r26, 0x08	; 8
     3a8:	21 81       	ldd	r18, Z+1	; 0x01
     3aa:	42 81       	ldd	r20, Z+2	; 0x02
     3ac:	50 e0       	ldi	r21, 0x00	; 0
     3ae:	60 e0       	ldi	r22, 0x00	; 0
     3b0:	70 e0       	ldi	r23, 0x00	; 0
     3b2:	ba 01       	movw	r22, r20
     3b4:	55 27       	eor	r21, r21
     3b6:	44 27       	eor	r20, r20
     3b8:	52 2b       	or	r21, r18
     3ba:	20 81       	ld	r18, Z
     3bc:	42 2b       	or	r20, r18
     3be:	23 81       	ldd	r18, Z+3	; 0x03
     3c0:	72 2b       	or	r23, r18
     3c2:	fc 01       	movw	r30, r24
     3c4:	42 87       	std	Z+10, r20	; 0x0a
     3c6:	53 87       	std	Z+11, r21	; 0x0b
     3c8:	64 87       	std	Z+12, r22	; 0x0c
     3ca:	75 87       	std	Z+13, r23	; 0x0d
     3cc:	c6 01       	movw	r24, r12
     3ce:	04 96       	adiw	r24, 0x04	; 4
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	1f 91       	pop	r17
     3d6:	0f 91       	pop	r16
     3d8:	ff 90       	pop	r15
     3da:	ef 90       	pop	r14
     3dc:	df 90       	pop	r13
     3de:	cf 90       	pop	r12
     3e0:	bf 90       	pop	r11
     3e2:	af 90       	pop	r10
     3e4:	9f 90       	pop	r9
     3e6:	8f 90       	pop	r8
     3e8:	7f 90       	pop	r7
     3ea:	6f 90       	pop	r6
     3ec:	5f 90       	pop	r5
     3ee:	4f 90       	pop	r4
     3f0:	08 95       	ret

000003f2 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:
     3f2:	85 e9       	ldi	r24, 0x95	; 149
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	08 95       	ret

000003f8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
     3f8:	8e ea       	ldi	r24, 0xAE	; 174
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	08 95       	ret

000003fe <_ZN14rosserial_msgs3Log11deserializeEPh>:
     3fe:	8f 92       	push	r8
     400:	9f 92       	push	r9
     402:	af 92       	push	r10
     404:	bf 92       	push	r11
     406:	cf 92       	push	r12
     408:	df 92       	push	r13
     40a:	ef 92       	push	r14
     40c:	ff 92       	push	r15
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
     412:	dc 01       	movw	r26, r24
     414:	eb 01       	movw	r28, r22
     416:	fb 01       	movw	r30, r22
     418:	81 91       	ld	r24, Z+
     41a:	12 96       	adiw	r26, 0x02	; 2
     41c:	8c 93       	st	X, r24
     41e:	12 97       	sbiw	r26, 0x02	; 2
     420:	20 e0       	ldi	r18, 0x00	; 0
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	c1 2c       	mov	r12, r1
     426:	d1 2c       	mov	r13, r1
     428:	76 01       	movw	r14, r12
     42a:	0e c0       	rjmp	.+28     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     42c:	46 01       	movw	r8, r12
     42e:	57 01       	movw	r10, r14
     430:	85 e0       	ldi	r24, 0x05	; 5
     432:	88 0e       	add	r8, r24
     434:	91 1c       	adc	r9, r1
     436:	a1 1c       	adc	r10, r1
     438:	b1 1c       	adc	r11, r1
     43a:	86 e0       	ldi	r24, 0x06	; 6
     43c:	88 16       	cp	r8, r24
     43e:	91 04       	cpc	r9, r1
     440:	a1 04       	cpc	r10, r1
     442:	b1 04       	cpc	r11, r1
     444:	b8 f4       	brcc	.+46     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     446:	26 c0       	rjmp	.+76     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     448:	41 91       	ld	r20, Z+
     44a:	50 e0       	ldi	r21, 0x00	; 0
     44c:	02 2e       	mov	r0, r18
     44e:	02 c0       	rjmp	.+4      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     450:	44 0f       	add	r20, r20
     452:	55 1f       	adc	r21, r21
     454:	0a 94       	dec	r0
     456:	e2 f7       	brpl	.-8      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     458:	05 2e       	mov	r0, r21
     45a:	00 0c       	add	r0, r0
     45c:	66 0b       	sbc	r22, r22
     45e:	77 0b       	sbc	r23, r23
     460:	c4 2a       	or	r12, r20
     462:	d5 2a       	or	r13, r21
     464:	e6 2a       	or	r14, r22
     466:	f7 2a       	or	r15, r23
     468:	28 5f       	subi	r18, 0xF8	; 248
     46a:	3f 4f       	sbci	r19, 0xFF	; 255
     46c:	20 32       	cpi	r18, 0x20	; 32
     46e:	31 05       	cpc	r19, r1
     470:	59 f7       	brne	.-42     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     472:	dc cf       	rjmp	.-72     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     474:	fe 01       	movw	r30, r28
     476:	34 96       	adiw	r30, 0x04	; 4
     478:	25 e0       	ldi	r18, 0x05	; 5
     47a:	30 e0       	ldi	r19, 0x00	; 0
     47c:	81 81       	ldd	r24, Z+1	; 0x01
     47e:	81 93       	st	Z+, r24
     480:	2f 5f       	subi	r18, 0xFF	; 255
     482:	3f 4f       	sbci	r19, 0xFF	; 255
     484:	a9 01       	movw	r20, r18
     486:	60 e0       	ldi	r22, 0x00	; 0
     488:	70 e0       	ldi	r23, 0x00	; 0
     48a:	48 15       	cp	r20, r8
     48c:	59 05       	cpc	r21, r9
     48e:	6a 05       	cpc	r22, r10
     490:	7b 05       	cpc	r23, r11
     492:	a0 f3       	brcs	.-24     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     494:	fe 01       	movw	r30, r28
     496:	ec 0d       	add	r30, r12
     498:	fd 1d       	adc	r31, r13
     49a:	14 82       	std	Z+4, r1	; 0x04
     49c:	24 96       	adiw	r28, 0x04	; 4
     49e:	14 96       	adiw	r26, 0x04	; 4
     4a0:	dc 93       	st	X, r29
     4a2:	ce 93       	st	-X, r28
     4a4:	13 97       	sbiw	r26, 0x03	; 3
     4a6:	c6 01       	movw	r24, r12
     4a8:	05 96       	adiw	r24, 0x05	; 5
     4aa:	df 91       	pop	r29
     4ac:	cf 91       	pop	r28
     4ae:	ff 90       	pop	r15
     4b0:	ef 90       	pop	r14
     4b2:	df 90       	pop	r13
     4b4:	cf 90       	pop	r12
     4b6:	bf 90       	pop	r11
     4b8:	af 90       	pop	r10
     4ba:	9f 90       	pop	r9
     4bc:	8f 90       	pop	r8
     4be:	08 95       	ret

000004c0 <_ZN14rosserial_msgs3Log7getTypeEv>:
     4c0:	8f ec       	ldi	r24, 0xCF	; 207
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	08 95       	ret

000004c6 <_ZN14rosserial_msgs3Log6getMD5Ev>:
     4c6:	82 ee       	ldi	r24, 0xE2	; 226
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	08 95       	ret

000004cc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:
     4cc:	89 ef       	ldi	r24, 0xF9	; 249
     4ce:	91 e0       	ldi	r25, 0x01	; 1
     4d0:	08 95       	ret

000004d2 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
     4d2:	83 e0       	ldi	r24, 0x03	; 3
     4d4:	91 e0       	ldi	r25, 0x01	; 1
     4d6:	08 95       	ret

000004d8 <_ZNK8std_msgs6UInt169serializeEPh>:
     4d8:	fc 01       	movw	r30, r24
     4da:	22 81       	ldd	r18, Z+2	; 0x02
     4dc:	fb 01       	movw	r30, r22
     4de:	20 83       	st	Z, r18
     4e0:	fc 01       	movw	r30, r24
     4e2:	83 81       	ldd	r24, Z+3	; 0x03
     4e4:	fb 01       	movw	r30, r22
     4e6:	81 83       	std	Z+1, r24	; 0x01
     4e8:	82 e0       	ldi	r24, 0x02	; 2
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	08 95       	ret

000004ee <_ZN8std_msgs6UInt1611deserializeEPh>:
     4ee:	fb 01       	movw	r30, r22
     4f0:	20 81       	ld	r18, Z
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	fc 01       	movw	r30, r24
     4f6:	33 83       	std	Z+3, r19	; 0x03
     4f8:	22 83       	std	Z+2, r18	; 0x02
     4fa:	fb 01       	movw	r30, r22
     4fc:	41 81       	ldd	r20, Z+1	; 0x01
     4fe:	34 2b       	or	r19, r20
     500:	fc 01       	movw	r30, r24
     502:	33 83       	std	Z+3, r19	; 0x03
     504:	22 83       	std	Z+2, r18	; 0x02
     506:	82 e0       	ldi	r24, 0x02	; 2
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	08 95       	ret

0000050c <_ZN8std_msgs6UInt167getTypeEv>:
     50c:	84 e2       	ldi	r24, 0x24	; 36
     50e:	91 e0       	ldi	r25, 0x01	; 1
     510:	08 95       	ret

00000512 <_ZN8std_msgs6UInt166getMD5Ev>:
     512:	84 e3       	ldi	r24, 0x34	; 52
     514:	91 e0       	ldi	r25, 0x01	; 1
     516:	08 95       	ret

00000518 <_Z7SpeedCbRKN8std_msgs6UInt16E>:
     518:	fc 01       	movw	r30, r24
     51a:	82 81       	ldd	r24, Z+2	; 0x02
     51c:	93 81       	ldd	r25, Z+3	; 0x03
     51e:	90 93 e0 06 	sts	0x06E0, r25	; 0x8006e0 <GOAL+0x1>
     522:	80 93 df 06 	sts	0x06DF, r24	; 0x8006df <GOAL>
     526:	08 95       	ret

00000528 <_ZN3ros10SubscriberIN8std_msgs6UInt16EvE8callbackEPh>:
     528:	db 01       	movw	r26, r22
     52a:	2c 91       	ld	r18, X
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	fc 01       	movw	r30, r24
     530:	31 87       	std	Z+9, r19	; 0x09
     532:	20 87       	std	Z+8, r18	; 0x08
     534:	11 96       	adiw	r26, 0x01	; 1
     536:	4c 91       	ld	r20, X
     538:	34 2b       	or	r19, r20
     53a:	31 87       	std	Z+9, r19	; 0x09
     53c:	20 87       	std	Z+8, r18	; 0x08
     53e:	02 84       	ldd	r0, Z+10	; 0x0a
     540:	f3 85       	ldd	r31, Z+11	; 0x0b
     542:	e0 2d       	mov	r30, r0
     544:	06 96       	adiw	r24, 0x06	; 6
     546:	09 95       	icall
     548:	08 95       	ret

0000054a <_ZN3ros10SubscriberIN8std_msgs6UInt16EvE15getEndpointTypeEv>:
     54a:	fc 01       	movw	r30, r24
     54c:	84 85       	ldd	r24, Z+12	; 0x0c
     54e:	95 85       	ldd	r25, Z+13	; 0x0d
     550:	08 95       	ret

00000552 <_ZN3ros10SubscriberIN8std_msgs6UInt16EvE10getMsgTypeEv>:
     552:	84 e2       	ldi	r24, 0x24	; 36
     554:	91 e0       	ldi	r25, 0x01	; 1
     556:	08 95       	ret

00000558 <_ZN3ros10SubscriberIN8std_msgs6UInt16EvE9getMsgMD5Ev>:
     558:	84 e3       	ldi	r24, 0x34	; 52
     55a:	91 e0       	ldi	r25, 0x01	; 1
     55c:	08 95       	ret

0000055e <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
     55e:	8f 57       	subi	r24, 0x7F	; 127
     560:	9b 4f       	sbci	r25, 0xFB	; 251
     562:	fc 01       	movw	r30, r24
     564:	80 81       	ld	r24, Z
     566:	08 95       	ret

00000568 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:
     568:	8f 92       	push	r8
     56a:	9f 92       	push	r9
     56c:	af 92       	push	r10
     56e:	bf 92       	push	r11
     570:	cf 92       	push	r12
     572:	df 92       	push	r13
     574:	ef 92       	push	r14
     576:	ff 92       	push	r15
     578:	0f 93       	push	r16
     57a:	1f 93       	push	r17
     57c:	cf 93       	push	r28
     57e:	df 93       	push	r29
     580:	7c 01       	movw	r14, r24
     582:	8b 01       	movw	r16, r22
     584:	dc 01       	movw	r26, r24
     586:	12 96       	adiw	r26, 0x02	; 2
     588:	8c 91       	ld	r24, X
     58a:	12 97       	sbiw	r26, 0x02	; 2
     58c:	fb 01       	movw	r30, r22
     58e:	80 83       	st	Z, r24
     590:	13 96       	adiw	r26, 0x03	; 3
     592:	8c 91       	ld	r24, X
     594:	13 97       	sbiw	r26, 0x03	; 3
     596:	81 83       	std	Z+1, r24	; 0x01
     598:	14 96       	adiw	r26, 0x04	; 4
     59a:	ed 91       	ld	r30, X+
     59c:	fc 91       	ld	r31, X
     59e:	15 97       	sbiw	r26, 0x05	; 5
     5a0:	ef 01       	movw	r28, r30
     5a2:	09 90       	ld	r0, Y+
     5a4:	00 20       	and	r0, r0
     5a6:	e9 f7       	brne	.-6      	; 0x5a2 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x3a>
     5a8:	21 97       	sbiw	r28, 0x01	; 1
     5aa:	ce 1b       	sub	r28, r30
     5ac:	df 0b       	sbc	r29, r31
     5ae:	ce 01       	movw	r24, r28
     5b0:	a0 e0       	ldi	r26, 0x00	; 0
     5b2:	b0 e0       	ldi	r27, 0x00	; 0
     5b4:	fb 01       	movw	r30, r22
     5b6:	c2 83       	std	Z+2, r28	; 0x02
     5b8:	93 83       	std	Z+3, r25	; 0x03
     5ba:	a4 83       	std	Z+4, r26	; 0x04
     5bc:	b5 83       	std	Z+5, r27	; 0x05
     5be:	d7 01       	movw	r26, r14
     5c0:	14 96       	adiw	r26, 0x04	; 4
     5c2:	6d 91       	ld	r22, X+
     5c4:	7c 91       	ld	r23, X
     5c6:	15 97       	sbiw	r26, 0x05	; 5
     5c8:	ae 01       	movw	r20, r28
     5ca:	c8 01       	movw	r24, r16
     5cc:	06 96       	adiw	r24, 0x06	; 6
     5ce:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <memcpy>
     5d2:	26 96       	adiw	r28, 0x06	; 6
     5d4:	f7 01       	movw	r30, r14
     5d6:	a6 81       	ldd	r26, Z+6	; 0x06
     5d8:	b7 81       	ldd	r27, Z+7	; 0x07
     5da:	fd 01       	movw	r30, r26
     5dc:	01 90       	ld	r0, Z+
     5de:	00 20       	and	r0, r0
     5e0:	e9 f7       	brne	.-6      	; 0x5dc <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x74>
     5e2:	31 97       	sbiw	r30, 0x01	; 1
     5e4:	6f 01       	movw	r12, r30
     5e6:	ca 1a       	sub	r12, r26
     5e8:	db 0a       	sbc	r13, r27
     5ea:	c6 01       	movw	r24, r12
     5ec:	a0 e0       	ldi	r26, 0x00	; 0
     5ee:	b0 e0       	ldi	r27, 0x00	; 0
     5f0:	f8 01       	movw	r30, r16
     5f2:	ec 0f       	add	r30, r28
     5f4:	fd 1f       	adc	r31, r29
     5f6:	20 e0       	ldi	r18, 0x00	; 0
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	ac 01       	movw	r20, r24
     5fc:	bd 01       	movw	r22, r26
     5fe:	02 2e       	mov	r0, r18
     600:	04 c0       	rjmp	.+8      	; 0x60a <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0xa2>
     602:	76 95       	lsr	r23
     604:	67 95       	ror	r22
     606:	57 95       	ror	r21
     608:	47 95       	ror	r20
     60a:	0a 94       	dec	r0
     60c:	d2 f7       	brpl	.-12     	; 0x602 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x9a>
     60e:	41 93       	st	Z+, r20
     610:	28 5f       	subi	r18, 0xF8	; 248
     612:	3f 4f       	sbci	r19, 0xFF	; 255
     614:	20 32       	cpi	r18, 0x20	; 32
     616:	31 05       	cpc	r19, r1
     618:	81 f7       	brne	.-32     	; 0x5fa <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x92>
     61a:	24 96       	adiw	r28, 0x04	; 4
     61c:	d7 01       	movw	r26, r14
     61e:	16 96       	adiw	r26, 0x06	; 6
     620:	6d 91       	ld	r22, X+
     622:	7c 91       	ld	r23, X
     624:	17 97       	sbiw	r26, 0x07	; 7
     626:	a6 01       	movw	r20, r12
     628:	c8 01       	movw	r24, r16
     62a:	8c 0f       	add	r24, r28
     62c:	9d 1f       	adc	r25, r29
     62e:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <memcpy>
     632:	cc 0d       	add	r28, r12
     634:	dd 1d       	adc	r29, r13
     636:	d7 01       	movw	r26, r14
     638:	18 96       	adiw	r26, 0x08	; 8
     63a:	ed 91       	ld	r30, X+
     63c:	fc 91       	ld	r31, X
     63e:	19 97       	sbiw	r26, 0x09	; 9
     640:	df 01       	movw	r26, r30
     642:	0d 90       	ld	r0, X+
     644:	00 20       	and	r0, r0
     646:	e9 f7       	brne	.-6      	; 0x642 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0xda>
     648:	11 97       	sbiw	r26, 0x01	; 1
     64a:	6d 01       	movw	r12, r26
     64c:	ce 1a       	sub	r12, r30
     64e:	df 0a       	sbc	r13, r31
     650:	46 01       	movw	r8, r12
     652:	a1 2c       	mov	r10, r1
     654:	b1 2c       	mov	r11, r1
     656:	f8 01       	movw	r30, r16
     658:	ec 0f       	add	r30, r28
     65a:	fd 1f       	adc	r31, r29
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	b5 01       	movw	r22, r10
     662:	a4 01       	movw	r20, r8
     664:	08 2e       	mov	r0, r24
     666:	04 c0       	rjmp	.+8      	; 0x670 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x108>
     668:	76 95       	lsr	r23
     66a:	67 95       	ror	r22
     66c:	57 95       	ror	r21
     66e:	47 95       	ror	r20
     670:	0a 94       	dec	r0
     672:	d2 f7       	brpl	.-12     	; 0x668 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x100>
     674:	41 93       	st	Z+, r20
     676:	08 96       	adiw	r24, 0x08	; 8
     678:	80 32       	cpi	r24, 0x20	; 32
     67a:	91 05       	cpc	r25, r1
     67c:	89 f7       	brne	.-30     	; 0x660 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0xf8>
     67e:	24 96       	adiw	r28, 0x04	; 4
     680:	f7 01       	movw	r30, r14
     682:	60 85       	ldd	r22, Z+8	; 0x08
     684:	71 85       	ldd	r23, Z+9	; 0x09
     686:	a6 01       	movw	r20, r12
     688:	c8 01       	movw	r24, r16
     68a:	8c 0f       	add	r24, r28
     68c:	9d 1f       	adc	r25, r29
     68e:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <memcpy>
     692:	c6 01       	movw	r24, r12
     694:	8c 0f       	add	r24, r28
     696:	9d 1f       	adc	r25, r29
     698:	d7 01       	movw	r26, r14
     69a:	1a 96       	adiw	r26, 0x0a	; 10
     69c:	5c 91       	ld	r21, X
     69e:	1a 97       	sbiw	r26, 0x0a	; 10
     6a0:	1b 96       	adiw	r26, 0x0b	; 11
     6a2:	4c 91       	ld	r20, X
     6a4:	1b 97       	sbiw	r26, 0x0b	; 11
     6a6:	1c 96       	adiw	r26, 0x0c	; 12
     6a8:	3c 91       	ld	r19, X
     6aa:	1c 97       	sbiw	r26, 0x0c	; 12
     6ac:	1d 96       	adiw	r26, 0x0d	; 13
     6ae:	2c 91       	ld	r18, X
     6b0:	f8 01       	movw	r30, r16
     6b2:	e8 0f       	add	r30, r24
     6b4:	f9 1f       	adc	r31, r25
     6b6:	50 83       	st	Z, r21
     6b8:	41 83       	std	Z+1, r20	; 0x01
     6ba:	32 83       	std	Z+2, r19	; 0x02
     6bc:	23 83       	std	Z+3, r18	; 0x03
     6be:	04 96       	adiw	r24, 0x04	; 4
     6c0:	df 91       	pop	r29
     6c2:	cf 91       	pop	r28
     6c4:	1f 91       	pop	r17
     6c6:	0f 91       	pop	r16
     6c8:	ff 90       	pop	r15
     6ca:	ef 90       	pop	r14
     6cc:	df 90       	pop	r13
     6ce:	cf 90       	pop	r12
     6d0:	bf 90       	pop	r11
     6d2:	af 90       	pop	r10
     6d4:	9f 90       	pop	r9
     6d6:	8f 90       	pop	r8
     6d8:	08 95       	ret

000006da <_ZNK14rosserial_msgs3Log9serializeEPh>:
     6da:	cf 92       	push	r12
     6dc:	df 92       	push	r13
     6de:	ef 92       	push	r14
     6e0:	ff 92       	push	r15
     6e2:	cf 93       	push	r28
     6e4:	df 93       	push	r29
     6e6:	dc 01       	movw	r26, r24
     6e8:	cb 01       	movw	r24, r22
     6ea:	12 96       	adiw	r26, 0x02	; 2
     6ec:	2c 91       	ld	r18, X
     6ee:	12 97       	sbiw	r26, 0x02	; 2
     6f0:	fb 01       	movw	r30, r22
     6f2:	21 93       	st	Z+, r18
     6f4:	13 96       	adiw	r26, 0x03	; 3
     6f6:	2d 91       	ld	r18, X+
     6f8:	3c 91       	ld	r19, X
     6fa:	14 97       	sbiw	r26, 0x04	; 4
     6fc:	e9 01       	movw	r28, r18
     6fe:	09 90       	ld	r0, Y+
     700:	00 20       	and	r0, r0
     702:	e9 f7       	brne	.-6      	; 0x6fe <_ZNK14rosserial_msgs3Log9serializeEPh+0x24>
     704:	21 97       	sbiw	r28, 0x01	; 1
     706:	c2 1b       	sub	r28, r18
     708:	d3 0b       	sbc	r29, r19
     70a:	6e 01       	movw	r12, r28
     70c:	e1 2c       	mov	r14, r1
     70e:	f1 2c       	mov	r15, r1
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	b7 01       	movw	r22, r14
     716:	a6 01       	movw	r20, r12
     718:	02 2e       	mov	r0, r18
     71a:	04 c0       	rjmp	.+8      	; 0x724 <_ZNK14rosserial_msgs3Log9serializeEPh+0x4a>
     71c:	76 95       	lsr	r23
     71e:	67 95       	ror	r22
     720:	57 95       	ror	r21
     722:	47 95       	ror	r20
     724:	0a 94       	dec	r0
     726:	d2 f7       	brpl	.-12     	; 0x71c <_ZNK14rosserial_msgs3Log9serializeEPh+0x42>
     728:	41 93       	st	Z+, r20
     72a:	28 5f       	subi	r18, 0xF8	; 248
     72c:	3f 4f       	sbci	r19, 0xFF	; 255
     72e:	20 32       	cpi	r18, 0x20	; 32
     730:	31 05       	cpc	r19, r1
     732:	81 f7       	brne	.-32     	; 0x714 <_ZNK14rosserial_msgs3Log9serializeEPh+0x3a>
     734:	13 96       	adiw	r26, 0x03	; 3
     736:	6d 91       	ld	r22, X+
     738:	7c 91       	ld	r23, X
     73a:	14 97       	sbiw	r26, 0x04	; 4
     73c:	ae 01       	movw	r20, r28
     73e:	05 96       	adiw	r24, 0x05	; 5
     740:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <memcpy>
     744:	ce 01       	movw	r24, r28
     746:	05 96       	adiw	r24, 0x05	; 5
     748:	df 91       	pop	r29
     74a:	cf 91       	pop	r28
     74c:	ff 90       	pop	r15
     74e:	ef 90       	pop	r14
     750:	df 90       	pop	r13
     752:	cf 90       	pop	r12
     754:	08 95       	ret

00000756 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:
     756:	4f 92       	push	r4
     758:	5f 92       	push	r5
     75a:	6f 92       	push	r6
     75c:	7f 92       	push	r7
     75e:	af 92       	push	r10
     760:	bf 92       	push	r11
     762:	cf 92       	push	r12
     764:	df 92       	push	r13
     766:	ef 92       	push	r14
     768:	ff 92       	push	r15
     76a:	0f 93       	push	r16
     76c:	1f 93       	push	r17
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
     772:	dc 01       	movw	r26, r24
     774:	12 96       	adiw	r26, 0x02	; 2
     776:	2c 91       	ld	r18, X
     778:	12 97       	sbiw	r26, 0x02	; 2
     77a:	fb 01       	movw	r30, r22
     77c:	20 83       	st	Z, r18
     77e:	13 96       	adiw	r26, 0x03	; 3
     780:	2c 91       	ld	r18, X
     782:	13 97       	sbiw	r26, 0x03	; 3
     784:	21 83       	std	Z+1, r18	; 0x01
     786:	14 96       	adiw	r26, 0x04	; 4
     788:	2c 91       	ld	r18, X
     78a:	14 97       	sbiw	r26, 0x04	; 4
     78c:	22 83       	std	Z+2, r18	; 0x02
     78e:	15 96       	adiw	r26, 0x05	; 5
     790:	2c 91       	ld	r18, X
     792:	15 97       	sbiw	r26, 0x05	; 5
     794:	23 83       	std	Z+3, r18	; 0x03
     796:	12 96       	adiw	r26, 0x02	; 2
     798:	0d 91       	ld	r16, X+
     79a:	1d 91       	ld	r17, X+
     79c:	2d 91       	ld	r18, X+
     79e:	3c 91       	ld	r19, X
     7a0:	15 97       	sbiw	r26, 0x05	; 5
     7a2:	01 2b       	or	r16, r17
     7a4:	02 2b       	or	r16, r18
     7a6:	03 2b       	or	r16, r19
     7a8:	71 f1       	breq	.+92     	; 0x806 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb0>
     7aa:	db 01       	movw	r26, r22
     7ac:	00 e0       	ldi	r16, 0x00	; 0
     7ae:	10 e0       	ldi	r17, 0x00	; 0
     7b0:	98 01       	movw	r18, r16
     7b2:	c4 e0       	ldi	r28, 0x04	; 4
     7b4:	d0 e0       	ldi	r29, 0x00	; 0
     7b6:	fc 01       	movw	r30, r24
     7b8:	42 85       	ldd	r20, Z+10	; 0x0a
     7ba:	53 85       	ldd	r21, Z+11	; 0x0b
     7bc:	fa 01       	movw	r30, r20
     7be:	ec 0f       	add	r30, r28
     7c0:	fd 1f       	adc	r31, r29
     7c2:	34 97       	sbiw	r30, 0x04	; 4
     7c4:	e0 80       	ld	r14, Z
     7c6:	f1 80       	ldd	r15, Z+1	; 0x01
     7c8:	52 81       	ldd	r21, Z+2	; 0x02
     7ca:	43 81       	ldd	r20, Z+3	; 0x03
     7cc:	14 96       	adiw	r26, 0x04	; 4
     7ce:	ec 92       	st	X, r14
     7d0:	14 97       	sbiw	r26, 0x04	; 4
     7d2:	15 96       	adiw	r26, 0x05	; 5
     7d4:	fc 92       	st	X, r15
     7d6:	15 97       	sbiw	r26, 0x05	; 5
     7d8:	16 96       	adiw	r26, 0x06	; 6
     7da:	5c 93       	st	X, r21
     7dc:	16 97       	sbiw	r26, 0x06	; 6
     7de:	17 96       	adiw	r26, 0x07	; 7
     7e0:	4c 93       	st	X, r20
     7e2:	17 97       	sbiw	r26, 0x07	; 7
     7e4:	24 96       	adiw	r28, 0x04	; 4
     7e6:	0f 5f       	subi	r16, 0xFF	; 255
     7e8:	1f 4f       	sbci	r17, 0xFF	; 255
     7ea:	2f 4f       	sbci	r18, 0xFF	; 255
     7ec:	3f 4f       	sbci	r19, 0xFF	; 255
     7ee:	14 96       	adiw	r26, 0x04	; 4
     7f0:	fc 01       	movw	r30, r24
     7f2:	c2 80       	ldd	r12, Z+2	; 0x02
     7f4:	d3 80       	ldd	r13, Z+3	; 0x03
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	0c 15       	cp	r16, r12
     7fc:	1d 05       	cpc	r17, r13
     7fe:	2e 05       	cpc	r18, r14
     800:	3f 05       	cpc	r19, r15
     802:	c8 f2       	brcs	.-78     	; 0x7b6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x60>
     804:	02 c0       	rjmp	.+4      	; 0x80a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
     806:	c4 e0       	ldi	r28, 0x04	; 4
     808:	d0 e0       	ldi	r29, 0x00	; 0
     80a:	db 01       	movw	r26, r22
     80c:	ac 0f       	add	r26, r28
     80e:	bd 1f       	adc	r27, r29
     810:	fc 01       	movw	r30, r24
     812:	24 85       	ldd	r18, Z+12	; 0x0c
     814:	2c 93       	st	X, r18
     816:	25 85       	ldd	r18, Z+13	; 0x0d
     818:	11 96       	adiw	r26, 0x01	; 1
     81a:	2c 93       	st	X, r18
     81c:	11 97       	sbiw	r26, 0x01	; 1
     81e:	26 85       	ldd	r18, Z+14	; 0x0e
     820:	12 96       	adiw	r26, 0x02	; 2
     822:	2c 93       	st	X, r18
     824:	12 97       	sbiw	r26, 0x02	; 2
     826:	27 85       	ldd	r18, Z+15	; 0x0f
     828:	13 96       	adiw	r26, 0x03	; 3
     82a:	2c 93       	st	X, r18
     82c:	13 97       	sbiw	r26, 0x03	; 3
     82e:	24 96       	adiw	r28, 0x04	; 4
     830:	04 85       	ldd	r16, Z+12	; 0x0c
     832:	15 85       	ldd	r17, Z+13	; 0x0d
     834:	26 85       	ldd	r18, Z+14	; 0x0e
     836:	37 85       	ldd	r19, Z+15	; 0x0f
     838:	01 2b       	or	r16, r17
     83a:	02 2b       	or	r16, r18
     83c:	03 2b       	or	r16, r19
     83e:	69 f1       	breq	.+90     	; 0x89a <__stack+0x3b>
     840:	40 e0       	ldi	r20, 0x00	; 0
     842:	50 e0       	ldi	r21, 0x00	; 0
     844:	00 e0       	ldi	r16, 0x00	; 0
     846:	10 e0       	ldi	r17, 0x00	; 0
     848:	98 01       	movw	r18, r16
     84a:	fc 01       	movw	r30, r24
     84c:	e4 88       	ldd	r14, Z+20	; 0x14
     84e:	f5 88       	ldd	r15, Z+21	; 0x15
     850:	f7 01       	movw	r30, r14
     852:	e4 0f       	add	r30, r20
     854:	f5 1f       	adc	r31, r21
     856:	d0 80       	ld	r13, Z
     858:	e1 80       	ldd	r14, Z+1	; 0x01
     85a:	f2 80       	ldd	r15, Z+2	; 0x02
     85c:	e3 81       	ldd	r30, Z+3	; 0x03
     85e:	14 96       	adiw	r26, 0x04	; 4
     860:	dc 92       	st	X, r13
     862:	14 97       	sbiw	r26, 0x04	; 4
     864:	15 96       	adiw	r26, 0x05	; 5
     866:	ec 92       	st	X, r14
     868:	15 97       	sbiw	r26, 0x05	; 5
     86a:	16 96       	adiw	r26, 0x06	; 6
     86c:	fc 92       	st	X, r15
     86e:	16 97       	sbiw	r26, 0x06	; 6
     870:	17 96       	adiw	r26, 0x07	; 7
     872:	ec 93       	st	X, r30
     874:	17 97       	sbiw	r26, 0x07	; 7
     876:	24 96       	adiw	r28, 0x04	; 4
     878:	0f 5f       	subi	r16, 0xFF	; 255
     87a:	1f 4f       	sbci	r17, 0xFF	; 255
     87c:	2f 4f       	sbci	r18, 0xFF	; 255
     87e:	3f 4f       	sbci	r19, 0xFF	; 255
     880:	4c 5f       	subi	r20, 0xFC	; 252
     882:	5f 4f       	sbci	r21, 0xFF	; 255
     884:	14 96       	adiw	r26, 0x04	; 4
     886:	fc 01       	movw	r30, r24
     888:	c4 84       	ldd	r12, Z+12	; 0x0c
     88a:	d5 84       	ldd	r13, Z+13	; 0x0d
     88c:	e6 84       	ldd	r14, Z+14	; 0x0e
     88e:	f7 84       	ldd	r15, Z+15	; 0x0f
     890:	0c 15       	cp	r16, r12
     892:	1d 05       	cpc	r17, r13
     894:	2e 05       	cpc	r18, r14
     896:	3f 05       	cpc	r19, r15
     898:	c0 f2       	brcs	.-80     	; 0x84a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xf4>
     89a:	fb 01       	movw	r30, r22
     89c:	ec 0f       	add	r30, r28
     89e:	fd 1f       	adc	r31, r29
     8a0:	dc 01       	movw	r26, r24
     8a2:	56 96       	adiw	r26, 0x16	; 22
     8a4:	2c 91       	ld	r18, X
     8a6:	56 97       	sbiw	r26, 0x16	; 22
     8a8:	20 83       	st	Z, r18
     8aa:	57 96       	adiw	r26, 0x17	; 23
     8ac:	2c 91       	ld	r18, X
     8ae:	57 97       	sbiw	r26, 0x17	; 23
     8b0:	21 83       	std	Z+1, r18	; 0x01
     8b2:	58 96       	adiw	r26, 0x18	; 24
     8b4:	2c 91       	ld	r18, X
     8b6:	58 97       	sbiw	r26, 0x18	; 24
     8b8:	22 83       	std	Z+2, r18	; 0x02
     8ba:	59 96       	adiw	r26, 0x19	; 25
     8bc:	2c 91       	ld	r18, X
     8be:	59 97       	sbiw	r26, 0x19	; 25
     8c0:	23 83       	std	Z+3, r18	; 0x03
     8c2:	24 96       	adiw	r28, 0x04	; 4
     8c4:	56 96       	adiw	r26, 0x16	; 22
     8c6:	0d 91       	ld	r16, X+
     8c8:	1d 91       	ld	r17, X+
     8ca:	2d 91       	ld	r18, X+
     8cc:	3c 91       	ld	r19, X
     8ce:	59 97       	sbiw	r26, 0x19	; 25
     8d0:	01 2b       	or	r16, r17
     8d2:	02 2b       	or	r16, r18
     8d4:	03 2b       	or	r16, r19
     8d6:	09 f4       	brne	.+2      	; 0x8da <__stack+0x7b>
     8d8:	55 c0       	rjmp	.+170    	; 0x984 <__stack+0x125>
     8da:	5b 01       	movw	r10, r22
     8dc:	8c 01       	movw	r16, r24
     8de:	c1 2c       	mov	r12, r1
     8e0:	d1 2c       	mov	r13, r1
     8e2:	41 2c       	mov	r4, r1
     8e4:	51 2c       	mov	r5, r1
     8e6:	32 01       	movw	r6, r4
     8e8:	d8 01       	movw	r26, r16
     8ea:	5c 96       	adiw	r26, 0x1c	; 28
     8ec:	ed 91       	ld	r30, X+
     8ee:	fc 91       	ld	r31, X
     8f0:	5d 97       	sbiw	r26, 0x1d	; 29
     8f2:	ec 0d       	add	r30, r12
     8f4:	fd 1d       	adc	r31, r13
     8f6:	a0 81       	ld	r26, Z
     8f8:	b1 81       	ldd	r27, Z+1	; 0x01
     8fa:	fd 01       	movw	r30, r26
     8fc:	01 90       	ld	r0, Z+
     8fe:	00 20       	and	r0, r0
     900:	e9 f7       	brne	.-6      	; 0x8fc <__stack+0x9d>
     902:	31 97       	sbiw	r30, 0x01	; 1
     904:	7f 01       	movw	r14, r30
     906:	ea 1a       	sub	r14, r26
     908:	fb 0a       	sbc	r15, r27
     90a:	a7 01       	movw	r20, r14
     90c:	60 e0       	ldi	r22, 0x00	; 0
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	f5 01       	movw	r30, r10
     912:	ec 0f       	add	r30, r28
     914:	fd 1f       	adc	r31, r29
     916:	20 e0       	ldi	r18, 0x00	; 0
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	db 01       	movw	r26, r22
     91c:	ca 01       	movw	r24, r20
     91e:	02 2e       	mov	r0, r18
     920:	04 c0       	rjmp	.+8      	; 0x92a <__stack+0xcb>
     922:	b6 95       	lsr	r27
     924:	a7 95       	ror	r26
     926:	97 95       	ror	r25
     928:	87 95       	ror	r24
     92a:	0a 94       	dec	r0
     92c:	d2 f7       	brpl	.-12     	; 0x922 <__stack+0xc3>
     92e:	81 93       	st	Z+, r24
     930:	28 5f       	subi	r18, 0xF8	; 248
     932:	3f 4f       	sbci	r19, 0xFF	; 255
     934:	20 32       	cpi	r18, 0x20	; 32
     936:	31 05       	cpc	r19, r1
     938:	81 f7       	brne	.-32     	; 0x91a <__stack+0xbb>
     93a:	24 96       	adiw	r28, 0x04	; 4
     93c:	d8 01       	movw	r26, r16
     93e:	5c 96       	adiw	r26, 0x1c	; 28
     940:	ed 91       	ld	r30, X+
     942:	fc 91       	ld	r31, X
     944:	5d 97       	sbiw	r26, 0x1d	; 29
     946:	ec 0d       	add	r30, r12
     948:	fd 1d       	adc	r31, r13
     94a:	60 81       	ld	r22, Z
     94c:	71 81       	ldd	r23, Z+1	; 0x01
     94e:	a7 01       	movw	r20, r14
     950:	c5 01       	movw	r24, r10
     952:	8c 0f       	add	r24, r28
     954:	9d 1f       	adc	r25, r29
     956:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <memcpy>
     95a:	ce 0d       	add	r28, r14
     95c:	df 1d       	adc	r29, r15
     95e:	bf ef       	ldi	r27, 0xFF	; 255
     960:	4b 1a       	sub	r4, r27
     962:	5b 0a       	sbc	r5, r27
     964:	6b 0a       	sbc	r6, r27
     966:	7b 0a       	sbc	r7, r27
     968:	e2 e0       	ldi	r30, 0x02	; 2
     96a:	ce 0e       	add	r12, r30
     96c:	d1 1c       	adc	r13, r1
     96e:	f8 01       	movw	r30, r16
     970:	86 89       	ldd	r24, Z+22	; 0x16
     972:	97 89       	ldd	r25, Z+23	; 0x17
     974:	a0 8d       	ldd	r26, Z+24	; 0x18
     976:	b1 8d       	ldd	r27, Z+25	; 0x19
     978:	48 16       	cp	r4, r24
     97a:	59 06       	cpc	r5, r25
     97c:	6a 06       	cpc	r6, r26
     97e:	7b 06       	cpc	r7, r27
     980:	08 f4       	brcc	.+2      	; 0x984 <__stack+0x125>
     982:	b2 cf       	rjmp	.-156    	; 0x8e8 <__stack+0x89>
     984:	ce 01       	movw	r24, r28
     986:	df 91       	pop	r29
     988:	cf 91       	pop	r28
     98a:	1f 91       	pop	r17
     98c:	0f 91       	pop	r16
     98e:	ff 90       	pop	r15
     990:	ef 90       	pop	r14
     992:	df 90       	pop	r13
     994:	cf 90       	pop	r12
     996:	bf 90       	pop	r11
     998:	af 90       	pop	r10
     99a:	7f 90       	pop	r7
     99c:	6f 90       	pop	r6
     99e:	5f 90       	pop	r5
     9a0:	4f 90       	pop	r4
     9a2:	08 95       	ret

000009a4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:
     9a4:	2f 92       	push	r2
     9a6:	3f 92       	push	r3
     9a8:	4f 92       	push	r4
     9aa:	5f 92       	push	r5
     9ac:	6f 92       	push	r6
     9ae:	7f 92       	push	r7
     9b0:	8f 92       	push	r8
     9b2:	9f 92       	push	r9
     9b4:	af 92       	push	r10
     9b6:	bf 92       	push	r11
     9b8:	cf 92       	push	r12
     9ba:	df 92       	push	r13
     9bc:	ef 92       	push	r14
     9be:	ff 92       	push	r15
     9c0:	0f 93       	push	r16
     9c2:	1f 93       	push	r17
     9c4:	cf 93       	push	r28
     9c6:	df 93       	push	r29
     9c8:	00 d0       	rcall	.+0      	; 0x9ca <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26>
     9ca:	00 d0       	rcall	.+0      	; 0x9cc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x28>
     9cc:	00 d0       	rcall	.+0      	; 0x9ce <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2a>
     9ce:	cd b7       	in	r28, 0x3d	; 61
     9d0:	de b7       	in	r29, 0x3e	; 62
     9d2:	9e 83       	std	Y+6, r25	; 0x06
     9d4:	8d 83       	std	Y+5, r24	; 0x05
     9d6:	8b 01       	movw	r16, r22
     9d8:	db 01       	movw	r26, r22
     9da:	8c 91       	ld	r24, X
     9dc:	11 96       	adiw	r26, 0x01	; 1
     9de:	9c 91       	ld	r25, X
     9e0:	11 97       	sbiw	r26, 0x01	; 1
     9e2:	12 96       	adiw	r26, 0x02	; 2
     9e4:	cc 90       	ld	r12, X
     9e6:	12 97       	sbiw	r26, 0x02	; 2
     9e8:	d1 2c       	mov	r13, r1
     9ea:	e1 2c       	mov	r14, r1
     9ec:	f1 2c       	mov	r15, r1
     9ee:	76 01       	movw	r14, r12
     9f0:	dd 24       	eor	r13, r13
     9f2:	cc 24       	eor	r12, r12
     9f4:	d9 2a       	or	r13, r25
     9f6:	c8 2a       	or	r12, r24
     9f8:	13 96       	adiw	r26, 0x03	; 3
     9fa:	8c 91       	ld	r24, X
     9fc:	f8 2a       	or	r15, r24
     9fe:	ed 81       	ldd	r30, Y+5	; 0x05
     a00:	fe 81       	ldd	r31, Y+6	; 0x06
     a02:	82 81       	ldd	r24, Z+2	; 0x02
     a04:	93 81       	ldd	r25, Z+3	; 0x03
     a06:	a4 81       	ldd	r26, Z+4	; 0x04
     a08:	b5 81       	ldd	r27, Z+5	; 0x05
     a0a:	8c 15       	cp	r24, r12
     a0c:	9d 05       	cpc	r25, r13
     a0e:	ae 05       	cpc	r26, r14
     a10:	bf 05       	cpc	r27, r15
     a12:	78 f4       	brcc	.+30     	; 0xa32 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x8e>
     a14:	b6 01       	movw	r22, r12
     a16:	66 0f       	add	r22, r22
     a18:	77 1f       	adc	r23, r23
     a1a:	66 0f       	add	r22, r22
     a1c:	77 1f       	adc	r23, r23
     a1e:	82 85       	ldd	r24, Z+10	; 0x0a
     a20:	93 85       	ldd	r25, Z+11	; 0x0b
     a22:	0e 94 0e 1a 	call	0x341c	; 0x341c <realloc>
     a26:	ad 81       	ldd	r26, Y+5	; 0x05
     a28:	be 81       	ldd	r27, Y+6	; 0x06
     a2a:	1b 96       	adiw	r26, 0x0b	; 11
     a2c:	9c 93       	st	X, r25
     a2e:	8e 93       	st	-X, r24
     a30:	1a 97       	sbiw	r26, 0x0a	; 10
     a32:	ed 81       	ldd	r30, Y+5	; 0x05
     a34:	fe 81       	ldd	r31, Y+6	; 0x06
     a36:	c2 82       	std	Z+2, r12	; 0x02
     a38:	d3 82       	std	Z+3, r13	; 0x03
     a3a:	e4 82       	std	Z+4, r14	; 0x04
     a3c:	f5 82       	std	Z+5, r15	; 0x05
     a3e:	cd 28       	or	r12, r13
     a40:	ce 28       	or	r12, r14
     a42:	cf 28       	or	r12, r15
     a44:	09 f4       	brne	.+2      	; 0xa48 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xa4>
     a46:	56 c0       	rjmp	.+172    	; 0xaf4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x150>
     a48:	f8 01       	movw	r30, r16
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	ba 01       	movw	r22, r20
     a50:	68 94       	set
     a52:	ee 24       	eor	r14, r14
     a54:	e2 f8       	bld	r14, 2
     a56:	f1 2c       	mov	r15, r1
     a58:	2d 81       	ldd	r18, Y+5	; 0x05
     a5a:	3e 81       	ldd	r19, Y+6	; 0x06
     a5c:	2a 5f       	subi	r18, 0xFA	; 250
     a5e:	3f 4f       	sbci	r19, 0xFF	; 255
     a60:	d5 80       	ldd	r13, Z+5	; 0x05
     a62:	86 81       	ldd	r24, Z+6	; 0x06
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	a0 e0       	ldi	r26, 0x00	; 0
     a68:	b0 e0       	ldi	r27, 0x00	; 0
     a6a:	dc 01       	movw	r26, r24
     a6c:	99 27       	eor	r25, r25
     a6e:	88 27       	eor	r24, r24
     a70:	9d 29       	or	r25, r13
     a72:	d4 80       	ldd	r13, Z+4	; 0x04
     a74:	8d 29       	or	r24, r13
     a76:	d7 80       	ldd	r13, Z+7	; 0x07
     a78:	4c 01       	movw	r8, r24
     a7a:	5d 01       	movw	r10, r26
     a7c:	bd 28       	or	r11, r13
     a7e:	ad 81       	ldd	r26, Y+5	; 0x05
     a80:	be 81       	ldd	r27, Y+6	; 0x06
     a82:	16 96       	adiw	r26, 0x06	; 6
     a84:	8d 92       	st	X+, r8
     a86:	9d 92       	st	X+, r9
     a88:	ad 92       	st	X+, r10
     a8a:	bc 92       	st	X, r11
     a8c:	19 97       	sbiw	r26, 0x09	; 9
     a8e:	67 01       	movw	r12, r14
     a90:	84 e0       	ldi	r24, 0x04	; 4
     a92:	c8 1a       	sub	r12, r24
     a94:	d1 08       	sbc	r13, r1
     a96:	94 e0       	ldi	r25, 0x04	; 4
     a98:	e9 0e       	add	r14, r25
     a9a:	f1 1c       	adc	r15, r1
     a9c:	ad 81       	ldd	r26, Y+5	; 0x05
     a9e:	be 81       	ldd	r27, Y+6	; 0x06
     aa0:	1a 96       	adiw	r26, 0x0a	; 10
     aa2:	8d 91       	ld	r24, X+
     aa4:	9c 91       	ld	r25, X
     aa6:	1b 97       	sbiw	r26, 0x0b	; 11
     aa8:	c8 0e       	add	r12, r24
     aaa:	d9 1e       	adc	r13, r25
     aac:	d9 01       	movw	r26, r18
     aae:	8d 91       	ld	r24, X+
     ab0:	9c 91       	ld	r25, X
     ab2:	d6 01       	movw	r26, r12
     ab4:	8d 93       	st	X+, r24
     ab6:	9c 93       	st	X, r25
     ab8:	d9 01       	movw	r26, r18
     aba:	12 96       	adiw	r26, 0x02	; 2
     abc:	8d 91       	ld	r24, X+
     abe:	9c 91       	ld	r25, X
     ac0:	13 97       	sbiw	r26, 0x03	; 3
     ac2:	d6 01       	movw	r26, r12
     ac4:	13 96       	adiw	r26, 0x03	; 3
     ac6:	9c 93       	st	X, r25
     ac8:	8e 93       	st	-X, r24
     aca:	12 97       	sbiw	r26, 0x02	; 2
     acc:	4f 5f       	subi	r20, 0xFF	; 255
     ace:	5f 4f       	sbci	r21, 0xFF	; 255
     ad0:	6f 4f       	sbci	r22, 0xFF	; 255
     ad2:	7f 4f       	sbci	r23, 0xFF	; 255
     ad4:	34 96       	adiw	r30, 0x04	; 4
     ad6:	ad 81       	ldd	r26, Y+5	; 0x05
     ad8:	be 81       	ldd	r27, Y+6	; 0x06
     ada:	12 96       	adiw	r26, 0x02	; 2
     adc:	8d 90       	ld	r8, X+
     ade:	9d 90       	ld	r9, X+
     ae0:	ad 90       	ld	r10, X+
     ae2:	bc 90       	ld	r11, X
     ae4:	15 97       	sbiw	r26, 0x05	; 5
     ae6:	48 15       	cp	r20, r8
     ae8:	59 05       	cpc	r21, r9
     aea:	6a 05       	cpc	r22, r10
     aec:	7b 05       	cpc	r23, r11
     aee:	08 f4       	brcc	.+2      	; 0xaf2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x14e>
     af0:	b7 cf       	rjmp	.-146    	; 0xa60 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xbc>
     af2:	04 c0       	rjmp	.+8      	; 0xafc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x158>
     af4:	68 94       	set
     af6:	ee 24       	eor	r14, r14
     af8:	e2 f8       	bld	r14, 2
     afa:	f1 2c       	mov	r15, r1
     afc:	68 01       	movw	r12, r16
     afe:	ce 0c       	add	r12, r14
     b00:	df 1c       	adc	r13, r15
     b02:	f6 01       	movw	r30, r12
     b04:	80 81       	ld	r24, Z
     b06:	91 81       	ldd	r25, Z+1	; 0x01
     b08:	82 80       	ldd	r8, Z+2	; 0x02
     b0a:	91 2c       	mov	r9, r1
     b0c:	a1 2c       	mov	r10, r1
     b0e:	b1 2c       	mov	r11, r1
     b10:	54 01       	movw	r10, r8
     b12:	99 24       	eor	r9, r9
     b14:	88 24       	eor	r8, r8
     b16:	99 2a       	or	r9, r25
     b18:	88 2a       	or	r8, r24
     b1a:	83 81       	ldd	r24, Z+3	; 0x03
     b1c:	b8 2a       	or	r11, r24
     b1e:	f4 e0       	ldi	r31, 0x04	; 4
     b20:	ef 0e       	add	r14, r31
     b22:	f1 1c       	adc	r15, r1
     b24:	ed 81       	ldd	r30, Y+5	; 0x05
     b26:	fe 81       	ldd	r31, Y+6	; 0x06
     b28:	84 85       	ldd	r24, Z+12	; 0x0c
     b2a:	95 85       	ldd	r25, Z+13	; 0x0d
     b2c:	a6 85       	ldd	r26, Z+14	; 0x0e
     b2e:	b7 85       	ldd	r27, Z+15	; 0x0f
     b30:	88 15       	cp	r24, r8
     b32:	99 05       	cpc	r25, r9
     b34:	aa 05       	cpc	r26, r10
     b36:	bb 05       	cpc	r27, r11
     b38:	78 f4       	brcc	.+30     	; 0xb58 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1b4>
     b3a:	b4 01       	movw	r22, r8
     b3c:	66 0f       	add	r22, r22
     b3e:	77 1f       	adc	r23, r23
     b40:	66 0f       	add	r22, r22
     b42:	77 1f       	adc	r23, r23
     b44:	84 89       	ldd	r24, Z+20	; 0x14
     b46:	95 89       	ldd	r25, Z+21	; 0x15
     b48:	0e 94 0e 1a 	call	0x341c	; 0x341c <realloc>
     b4c:	ad 81       	ldd	r26, Y+5	; 0x05
     b4e:	be 81       	ldd	r27, Y+6	; 0x06
     b50:	55 96       	adiw	r26, 0x15	; 21
     b52:	9c 93       	st	X, r25
     b54:	8e 93       	st	-X, r24
     b56:	54 97       	sbiw	r26, 0x14	; 20
     b58:	ed 81       	ldd	r30, Y+5	; 0x05
     b5a:	fe 81       	ldd	r31, Y+6	; 0x06
     b5c:	84 86       	std	Z+12, r8	; 0x0c
     b5e:	95 86       	std	Z+13, r9	; 0x0d
     b60:	a6 86       	std	Z+14, r10	; 0x0e
     b62:	b7 86       	std	Z+15, r11	; 0x0f
     b64:	89 28       	or	r8, r9
     b66:	8a 28       	or	r8, r10
     b68:	8b 28       	or	r8, r11
     b6a:	09 f4       	brne	.+2      	; 0xb6e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1ca>
     b6c:	52 c0       	rjmp	.+164    	; 0xc12 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
     b6e:	f6 01       	movw	r30, r12
     b70:	20 e0       	ldi	r18, 0x00	; 0
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	81 2c       	mov	r8, r1
     b76:	91 2c       	mov	r9, r1
     b78:	54 01       	movw	r10, r8
     b7a:	4d 81       	ldd	r20, Y+5	; 0x05
     b7c:	5e 81       	ldd	r21, Y+6	; 0x06
     b7e:	40 5f       	subi	r20, 0xF0	; 240
     b80:	5f 4f       	sbci	r21, 0xFF	; 255
     b82:	65 81       	ldd	r22, Z+5	; 0x05
     b84:	86 81       	ldd	r24, Z+6	; 0x06
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	a0 e0       	ldi	r26, 0x00	; 0
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	dc 01       	movw	r26, r24
     b8e:	99 27       	eor	r25, r25
     b90:	88 27       	eor	r24, r24
     b92:	96 2b       	or	r25, r22
     b94:	64 81       	ldd	r22, Z+4	; 0x04
     b96:	86 2b       	or	r24, r22
     b98:	67 81       	ldd	r22, Z+7	; 0x07
     b9a:	2c 01       	movw	r4, r24
     b9c:	3d 01       	movw	r6, r26
     b9e:	76 2a       	or	r7, r22
     ba0:	ad 81       	ldd	r26, Y+5	; 0x05
     ba2:	be 81       	ldd	r27, Y+6	; 0x06
     ba4:	50 96       	adiw	r26, 0x10	; 16
     ba6:	4d 92       	st	X+, r4
     ba8:	5d 92       	st	X+, r5
     baa:	6d 92       	st	X+, r6
     bac:	7c 92       	st	X, r7
     bae:	53 97       	sbiw	r26, 0x13	; 19
     bb0:	b4 e0       	ldi	r27, 0x04	; 4
     bb2:	eb 0e       	add	r14, r27
     bb4:	f1 1c       	adc	r15, r1
     bb6:	ad 81       	ldd	r26, Y+5	; 0x05
     bb8:	be 81       	ldd	r27, Y+6	; 0x06
     bba:	54 96       	adiw	r26, 0x14	; 20
     bbc:	6d 91       	ld	r22, X+
     bbe:	7c 91       	ld	r23, X
     bc0:	55 97       	sbiw	r26, 0x15	; 21
     bc2:	62 0f       	add	r22, r18
     bc4:	73 1f       	adc	r23, r19
     bc6:	da 01       	movw	r26, r20
     bc8:	8d 91       	ld	r24, X+
     bca:	9c 91       	ld	r25, X
     bcc:	db 01       	movw	r26, r22
     bce:	8d 93       	st	X+, r24
     bd0:	9c 93       	st	X, r25
     bd2:	da 01       	movw	r26, r20
     bd4:	12 96       	adiw	r26, 0x02	; 2
     bd6:	8d 91       	ld	r24, X+
     bd8:	9c 91       	ld	r25, X
     bda:	13 97       	sbiw	r26, 0x03	; 3
     bdc:	db 01       	movw	r26, r22
     bde:	13 96       	adiw	r26, 0x03	; 3
     be0:	9c 93       	st	X, r25
     be2:	8e 93       	st	-X, r24
     be4:	12 97       	sbiw	r26, 0x02	; 2
     be6:	bf ef       	ldi	r27, 0xFF	; 255
     be8:	8b 1a       	sub	r8, r27
     bea:	9b 0a       	sbc	r9, r27
     bec:	ab 0a       	sbc	r10, r27
     bee:	bb 0a       	sbc	r11, r27
     bf0:	2c 5f       	subi	r18, 0xFC	; 252
     bf2:	3f 4f       	sbci	r19, 0xFF	; 255
     bf4:	34 96       	adiw	r30, 0x04	; 4
     bf6:	ad 81       	ldd	r26, Y+5	; 0x05
     bf8:	be 81       	ldd	r27, Y+6	; 0x06
     bfa:	1c 96       	adiw	r26, 0x0c	; 12
     bfc:	4d 90       	ld	r4, X+
     bfe:	5d 90       	ld	r5, X+
     c00:	6d 90       	ld	r6, X+
     c02:	7c 90       	ld	r7, X
     c04:	1f 97       	sbiw	r26, 0x0f	; 15
     c06:	84 14       	cp	r8, r4
     c08:	95 04       	cpc	r9, r5
     c0a:	a6 04       	cpc	r10, r6
     c0c:	b7 04       	cpc	r11, r7
     c0e:	08 f4       	brcc	.+2      	; 0xc12 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
     c10:	b8 cf       	rjmp	.-144    	; 0xb82 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
     c12:	f8 01       	movw	r30, r16
     c14:	ee 0d       	add	r30, r14
     c16:	ff 1d       	adc	r31, r15
     c18:	80 81       	ld	r24, Z
     c1a:	91 81       	ldd	r25, Z+1	; 0x01
     c1c:	82 80       	ldd	r8, Z+2	; 0x02
     c1e:	91 2c       	mov	r9, r1
     c20:	a1 2c       	mov	r10, r1
     c22:	b1 2c       	mov	r11, r1
     c24:	54 01       	movw	r10, r8
     c26:	99 24       	eor	r9, r9
     c28:	88 24       	eor	r8, r8
     c2a:	99 2a       	or	r9, r25
     c2c:	88 2a       	or	r8, r24
     c2e:	83 81       	ldd	r24, Z+3	; 0x03
     c30:	b8 2a       	or	r11, r24
     c32:	b4 e0       	ldi	r27, 0x04	; 4
     c34:	eb 0e       	add	r14, r27
     c36:	f1 1c       	adc	r15, r1
     c38:	ed 81       	ldd	r30, Y+5	; 0x05
     c3a:	fe 81       	ldd	r31, Y+6	; 0x06
     c3c:	86 89       	ldd	r24, Z+22	; 0x16
     c3e:	97 89       	ldd	r25, Z+23	; 0x17
     c40:	a0 8d       	ldd	r26, Z+24	; 0x18
     c42:	b1 8d       	ldd	r27, Z+25	; 0x19
     c44:	88 15       	cp	r24, r8
     c46:	99 05       	cpc	r25, r9
     c48:	aa 05       	cpc	r26, r10
     c4a:	bb 05       	cpc	r27, r11
     c4c:	68 f4       	brcc	.+26     	; 0xc68 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2c4>
     c4e:	b4 01       	movw	r22, r8
     c50:	66 0f       	add	r22, r22
     c52:	77 1f       	adc	r23, r23
     c54:	84 8d       	ldd	r24, Z+28	; 0x1c
     c56:	95 8d       	ldd	r25, Z+29	; 0x1d
     c58:	0e 94 0e 1a 	call	0x341c	; 0x341c <realloc>
     c5c:	ad 81       	ldd	r26, Y+5	; 0x05
     c5e:	be 81       	ldd	r27, Y+6	; 0x06
     c60:	5d 96       	adiw	r26, 0x1d	; 29
     c62:	9c 93       	st	X, r25
     c64:	8e 93       	st	-X, r24
     c66:	5c 97       	sbiw	r26, 0x1c	; 28
     c68:	ed 81       	ldd	r30, Y+5	; 0x05
     c6a:	fe 81       	ldd	r31, Y+6	; 0x06
     c6c:	86 8a       	std	Z+22, r8	; 0x16
     c6e:	97 8a       	std	Z+23, r9	; 0x17
     c70:	a0 8e       	std	Z+24, r10	; 0x18
     c72:	b1 8e       	std	Z+25, r11	; 0x19
     c74:	89 28       	or	r8, r9
     c76:	8a 28       	or	r8, r10
     c78:	8b 28       	or	r8, r11
     c7a:	09 f4       	brne	.+2      	; 0xc7e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2da>
     c7c:	77 c0       	rjmp	.+238    	; 0xd6c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x3c8>
     c7e:	a0 e0       	ldi	r26, 0x00	; 0
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	81 2c       	mov	r8, r1
     c84:	91 2c       	mov	r9, r1
     c86:	54 01       	movw	r10, r8
     c88:	7a 96       	adiw	r30, 0x1a	; 26
     c8a:	fc 83       	std	Y+4, r31	; 0x04
     c8c:	eb 83       	std	Y+3, r30	; 0x03
     c8e:	fa 82       	std	Y+2, r15	; 0x02
     c90:	e9 82       	std	Y+1, r14	; 0x01
     c92:	f8 01       	movw	r30, r16
     c94:	ee 0d       	add	r30, r14
     c96:	ff 1d       	adc	r31, r15
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	40 e0       	ldi	r20, 0x00	; 0
     c9e:	50 e0       	ldi	r21, 0x00	; 0
     ca0:	ba 01       	movw	r22, r20
     ca2:	21 91       	ld	r18, Z+
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	08 2e       	mov	r0, r24
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x30a>
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	0a 94       	dec	r0
     cb0:	e2 f7       	brpl	.-8      	; 0xcaa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x306>
     cb2:	29 01       	movw	r4, r18
     cb4:	33 0f       	add	r19, r19
     cb6:	66 08       	sbc	r6, r6
     cb8:	77 08       	sbc	r7, r7
     cba:	44 29       	or	r20, r4
     cbc:	55 29       	or	r21, r5
     cbe:	66 29       	or	r22, r6
     cc0:	77 29       	or	r23, r7
     cc2:	08 96       	adiw	r24, 0x08	; 8
     cc4:	80 32       	cpi	r24, 0x20	; 32
     cc6:	91 05       	cpc	r25, r1
     cc8:	61 f7       	brne	.-40     	; 0xca2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2fe>
     cca:	c7 01       	movw	r24, r14
     ccc:	04 96       	adiw	r24, 0x04	; 4
     cce:	6c 01       	movw	r12, r24
     cd0:	09 2e       	mov	r0, r25
     cd2:	00 0c       	add	r0, r0
     cd4:	ee 08       	sbc	r14, r14
     cd6:	ff 08       	sbc	r15, r15
     cd8:	c4 0e       	add	r12, r20
     cda:	d5 1e       	adc	r13, r21
     cdc:	e6 1e       	adc	r14, r22
     cde:	f7 1e       	adc	r15, r23
     ce0:	1c 01       	movw	r2, r24
     ce2:	41 2c       	mov	r4, r1
     ce4:	51 2c       	mov	r5, r1
     ce6:	2c 14       	cp	r2, r12
     ce8:	3d 04       	cpc	r3, r13
     cea:	4e 04       	cpc	r4, r14
     cec:	5f 04       	cpc	r5, r15
     cee:	90 f4       	brcc	.+36     	; 0xd14 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x370>
     cf0:	e9 81       	ldd	r30, Y+1	; 0x01
     cf2:	fa 81       	ldd	r31, Y+2	; 0x02
     cf4:	33 96       	adiw	r30, 0x03	; 3
     cf6:	e0 0f       	add	r30, r16
     cf8:	f1 1f       	adc	r31, r17
     cfa:	9c 01       	movw	r18, r24
     cfc:	71 80       	ldd	r7, Z+1	; 0x01
     cfe:	71 92       	st	Z+, r7
     d00:	2f 5f       	subi	r18, 0xFF	; 255
     d02:	3f 4f       	sbci	r19, 0xFF	; 255
     d04:	29 01       	movw	r4, r18
     d06:	61 2c       	mov	r6, r1
     d08:	71 2c       	mov	r7, r1
     d0a:	4c 14       	cp	r4, r12
     d0c:	5d 04       	cpc	r5, r13
     d0e:	6e 04       	cpc	r6, r14
     d10:	7f 04       	cpc	r7, r15
     d12:	a0 f3       	brcs	.-24     	; 0xcfc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x358>
     d14:	48 0f       	add	r20, r24
     d16:	59 1f       	adc	r21, r25
     d18:	f8 01       	movw	r30, r16
     d1a:	e4 0f       	add	r30, r20
     d1c:	f5 1f       	adc	r31, r21
     d1e:	31 97       	sbiw	r30, 0x01	; 1
     d20:	10 82       	st	Z, r1
     d22:	01 97       	sbiw	r24, 0x01	; 1
     d24:	80 0f       	add	r24, r16
     d26:	91 1f       	adc	r25, r17
     d28:	ed 81       	ldd	r30, Y+5	; 0x05
     d2a:	fe 81       	ldd	r31, Y+6	; 0x06
     d2c:	93 8f       	std	Z+27, r25	; 0x1b
     d2e:	82 8f       	std	Z+26, r24	; 0x1a
     d30:	7a 01       	movw	r14, r20
     d32:	24 8d       	ldd	r18, Z+28	; 0x1c
     d34:	35 8d       	ldd	r19, Z+29	; 0x1d
     d36:	2a 0f       	add	r18, r26
     d38:	3b 1f       	adc	r19, r27
     d3a:	eb 81       	ldd	r30, Y+3	; 0x03
     d3c:	fc 81       	ldd	r31, Y+4	; 0x04
     d3e:	80 81       	ld	r24, Z
     d40:	91 81       	ldd	r25, Z+1	; 0x01
     d42:	f9 01       	movw	r30, r18
     d44:	91 83       	std	Z+1, r25	; 0x01
     d46:	80 83       	st	Z, r24
     d48:	ff ef       	ldi	r31, 0xFF	; 255
     d4a:	8f 1a       	sub	r8, r31
     d4c:	9f 0a       	sbc	r9, r31
     d4e:	af 0a       	sbc	r10, r31
     d50:	bf 0a       	sbc	r11, r31
     d52:	12 96       	adiw	r26, 0x02	; 2
     d54:	ed 81       	ldd	r30, Y+5	; 0x05
     d56:	fe 81       	ldd	r31, Y+6	; 0x06
     d58:	46 89       	ldd	r20, Z+22	; 0x16
     d5a:	57 89       	ldd	r21, Z+23	; 0x17
     d5c:	60 8d       	ldd	r22, Z+24	; 0x18
     d5e:	71 8d       	ldd	r23, Z+25	; 0x19
     d60:	84 16       	cp	r8, r20
     d62:	95 06       	cpc	r9, r21
     d64:	a6 06       	cpc	r10, r22
     d66:	b7 06       	cpc	r11, r23
     d68:	08 f4       	brcc	.+2      	; 0xd6c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x3c8>
     d6a:	91 cf       	rjmp	.-222    	; 0xc8e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ea>
     d6c:	c7 01       	movw	r24, r14
     d6e:	26 96       	adiw	r28, 0x06	; 6
     d70:	0f b6       	in	r0, 0x3f	; 63
     d72:	f8 94       	cli
     d74:	de bf       	out	0x3e, r29	; 62
     d76:	0f be       	out	0x3f, r0	; 63
     d78:	cd bf       	out	0x3d, r28	; 61
     d7a:	df 91       	pop	r29
     d7c:	cf 91       	pop	r28
     d7e:	1f 91       	pop	r17
     d80:	0f 91       	pop	r16
     d82:	ff 90       	pop	r15
     d84:	ef 90       	pop	r14
     d86:	df 90       	pop	r13
     d88:	cf 90       	pop	r12
     d8a:	bf 90       	pop	r11
     d8c:	af 90       	pop	r10
     d8e:	9f 90       	pop	r9
     d90:	8f 90       	pop	r8
     d92:	7f 90       	pop	r7
     d94:	6f 90       	pop	r6
     d96:	5f 90       	pop	r5
     d98:	4f 90       	pop	r4
     d9a:	3f 90       	pop	r3
     d9c:	2f 90       	pop	r2
     d9e:	08 95       	ret

00000da0 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:
     da0:	cf 92       	push	r12
     da2:	df 92       	push	r13
     da4:	ef 92       	push	r14
     da6:	ff 92       	push	r15
     da8:	0f 93       	push	r16
     daa:	1f 93       	push	r17
     dac:	cf 93       	push	r28
     dae:	df 93       	push	r29
     db0:	00 d0       	rcall	.+0      	; 0xdb2 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x12>
     db2:	00 d0       	rcall	.+0      	; 0xdb4 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14>
     db4:	1f 92       	push	r1
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
     dba:	64 36       	cpi	r22, 0x64	; 100
     dbc:	71 05       	cpc	r23, r1
     dbe:	3c f0       	brlt	.+14     	; 0xdce <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2e>
     dc0:	fc 01       	movw	r30, r24
     dc2:	ef 57       	subi	r30, 0x7F	; 127
     dc4:	fb 4f       	sbci	r31, 0xFB	; 251
     dc6:	20 81       	ld	r18, Z
     dc8:	22 23       	and	r18, r18
     dca:	09 f4       	brne	.+2      	; 0xdce <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2e>
     dcc:	7e c0       	rjmp	.+252    	; 0xeca <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x12a>
     dce:	da 01       	movw	r26, r20
     dd0:	7b 01       	movw	r14, r22
     dd2:	8c 01       	movw	r16, r24
     dd4:	bc 01       	movw	r22, r24
     dd6:	66 5e       	subi	r22, 0xE6	; 230
     dd8:	7d 4f       	sbci	r23, 0xFD	; 253
     dda:	ed 91       	ld	r30, X+
     ddc:	fc 91       	ld	r31, X
     dde:	01 90       	ld	r0, Z+
     de0:	f0 81       	ld	r31, Z
     de2:	e0 2d       	mov	r30, r0
     de4:	ca 01       	movw	r24, r20
     de6:	09 95       	icall
     de8:	dc 01       	movw	r26, r24
     dea:	f8 01       	movw	r30, r16
     dec:	ed 5e       	subi	r30, 0xED	; 237
     dee:	fd 4f       	sbci	r31, 0xFD	; 253
     df0:	8f ef       	ldi	r24, 0xFF	; 255
     df2:	80 83       	st	Z, r24
     df4:	31 96       	adiw	r30, 0x01	; 1
     df6:	8e ef       	ldi	r24, 0xFE	; 254
     df8:	80 83       	st	Z, r24
     dfa:	31 96       	adiw	r30, 0x01	; 1
     dfc:	a0 83       	st	Z, r26
     dfe:	31 96       	adiw	r30, 0x01	; 1
     e00:	b0 83       	st	Z, r27
     e02:	31 96       	adiw	r30, 0x01	; 1
     e04:	8b 2f       	mov	r24, r27
     e06:	8a 0f       	add	r24, r26
     e08:	80 95       	com	r24
     e0a:	80 83       	st	Z, r24
     e0c:	31 96       	adiw	r30, 0x01	; 1
     e0e:	e0 82       	st	Z, r14
     e10:	31 96       	adiw	r30, 0x01	; 1
     e12:	f0 82       	st	Z, r15
     e14:	bd 01       	movw	r22, r26
     e16:	69 5f       	subi	r22, 0xF9	; 249
     e18:	7f 4f       	sbci	r23, 0xFF	; 255
     e1a:	66 30       	cpi	r22, 0x06	; 6
     e1c:	71 05       	cpc	r23, r1
     e1e:	7c f0       	brlt	.+30     	; 0xe3e <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
     e20:	31 97       	sbiw	r30, 0x01	; 1
     e22:	ad 01       	movw	r20, r26
     e24:	46 5e       	subi	r20, 0xE6	; 230
     e26:	5d 4f       	sbci	r21, 0xFD	; 253
     e28:	40 0f       	add	r20, r16
     e2a:	51 1f       	adc	r21, r17
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	91 91       	ld	r25, Z+
     e32:	29 0f       	add	r18, r25
     e34:	31 1d       	adc	r19, r1
     e36:	e4 17       	cp	r30, r20
     e38:	f5 07       	cpc	r31, r21
     e3a:	d1 f7       	brne	.-12     	; 0xe30 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x90>
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
     e3e:	20 e0       	ldi	r18, 0x00	; 0
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	7d 01       	movw	r14, r26
     e44:	88 e0       	ldi	r24, 0x08	; 8
     e46:	e8 0e       	add	r14, r24
     e48:	f1 1c       	adc	r15, r1
     e4a:	60 0f       	add	r22, r16
     e4c:	71 1f       	adc	r23, r17
     e4e:	fb 01       	movw	r30, r22
     e50:	ed 5e       	subi	r30, 0xED	; 237
     e52:	fd 4f       	sbci	r31, 0xFD	; 253
     e54:	30 78       	andi	r19, 0x80	; 128
     e56:	33 23       	and	r19, r19
     e58:	2c f4       	brge	.+10     	; 0xe64 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
     e5a:	21 50       	subi	r18, 0x01	; 1
     e5c:	31 09       	sbc	r19, r1
     e5e:	3f 6f       	ori	r19, 0xFF	; 255
     e60:	2f 5f       	subi	r18, 0xFF	; 255
     e62:	3f 4f       	sbci	r19, 0xFF	; 255
     e64:	20 95       	com	r18
     e66:	20 83       	st	Z, r18
     e68:	e1 e0       	ldi	r30, 0x01	; 1
     e6a:	ee 16       	cp	r14, r30
     e6c:	e2 e0       	ldi	r30, 0x02	; 2
     e6e:	fe 06       	cpc	r15, r30
     e70:	94 f4       	brge	.+36     	; 0xe96 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xf6>
     e72:	0d 5e       	subi	r16, 0xED	; 237
     e74:	1d 4f       	sbci	r17, 0xFD	; 253
     e76:	1e 14       	cp	r1, r14
     e78:	1f 04       	cpc	r1, r15
     e7a:	54 f5       	brge	.+84     	; 0xed0 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x130>
     e7c:	68 01       	movw	r12, r16
     e7e:	18 96       	adiw	r26, 0x08	; 8
     e80:	0a 0f       	add	r16, r26
     e82:	1b 1f       	adc	r17, r27
     e84:	d6 01       	movw	r26, r12
     e86:	8d 91       	ld	r24, X+
     e88:	6d 01       	movw	r12, r26
     e8a:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <avr_uart_send_byte>
     e8e:	c0 16       	cp	r12, r16
     e90:	d1 06       	cpc	r13, r17
     e92:	c1 f7       	brne	.-16     	; 0xe84 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xe4>
     e94:	20 c0       	rjmp	.+64     	; 0xed6 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x136>
     e96:	83 ec       	ldi	r24, 0xC3	; 195
     e98:	91 e0       	ldi	r25, 0x01	; 1
     e9a:	9a 83       	std	Y+2, r25	; 0x02
     e9c:	89 83       	std	Y+1, r24	; 0x01
     e9e:	83 e0       	ldi	r24, 0x03	; 3
     ea0:	8b 83       	std	Y+3, r24	; 0x03
     ea2:	85 e5       	ldi	r24, 0x55	; 85
     ea4:	91 e0       	ldi	r25, 0x01	; 1
     ea6:	9d 83       	std	Y+5, r25	; 0x05
     ea8:	8c 83       	std	Y+4, r24	; 0x04
     eaa:	d8 01       	movw	r26, r16
     eac:	ed 91       	ld	r30, X+
     eae:	fc 91       	ld	r31, X
     eb0:	01 90       	ld	r0, Z+
     eb2:	f0 81       	ld	r31, Z
     eb4:	e0 2d       	mov	r30, r0
     eb6:	ae 01       	movw	r20, r28
     eb8:	4f 5f       	subi	r20, 0xFF	; 255
     eba:	5f 4f       	sbci	r21, 0xFF	; 255
     ebc:	67 e0       	ldi	r22, 0x07	; 7
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	c8 01       	movw	r24, r16
     ec2:	09 95       	icall
     ec4:	8f ef       	ldi	r24, 0xFF	; 255
     ec6:	9f ef       	ldi	r25, 0xFF	; 255
     ec8:	08 c0       	rjmp	.+16     	; 0xeda <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x13a>
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	05 c0       	rjmp	.+10     	; 0xeda <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x13a>
     ed0:	8e 2d       	mov	r24, r14
     ed2:	9f 2d       	mov	r25, r15
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x13a>
     ed6:	8e 2d       	mov	r24, r14
     ed8:	9f 2d       	mov	r25, r15
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	0f 90       	pop	r0
     ee2:	0f 90       	pop	r0
     ee4:	df 91       	pop	r29
     ee6:	cf 91       	pop	r28
     ee8:	1f 91       	pop	r17
     eea:	0f 91       	pop	r16
     eec:	ff 90       	pop	r15
     eee:	ef 90       	pop	r14
     ef0:	df 90       	pop	r13
     ef2:	cf 90       	pop	r12
     ef4:	08 95       	ret

00000ef6 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
     ef6:	2f 92       	push	r2
     ef8:	3f 92       	push	r3
     efa:	4f 92       	push	r4
     efc:	5f 92       	push	r5
     efe:	6f 92       	push	r6
     f00:	7f 92       	push	r7
     f02:	8f 92       	push	r8
     f04:	9f 92       	push	r9
     f06:	af 92       	push	r10
     f08:	bf 92       	push	r11
     f0a:	cf 92       	push	r12
     f0c:	df 92       	push	r13
     f0e:	ef 92       	push	r14
     f10:	ff 92       	push	r15
     f12:	0f 93       	push	r16
     f14:	1f 93       	push	r17
     f16:	cf 93       	push	r28
     f18:	df 93       	push	r29
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
     f1e:	e2 97       	sbiw	r28, 0x32	; 50
     f20:	0f b6       	in	r0, 0x3f	; 63
     f22:	f8 94       	cli
     f24:	de bf       	out	0x3e, r29	; 62
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	cd bf       	out	0x3d, r28	; 61
     f2a:	1c 01       	movw	r2, r24
     f2c:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <avr_time_now>
     f30:	2b 01       	movw	r4, r22
     f32:	3c 01       	movw	r6, r24
     f34:	f1 01       	movw	r30, r2
     f36:	ea 57       	subi	r30, 0x7A	; 122
     f38:	fb 4f       	sbci	r31, 0xFB	; 251
     f3a:	80 81       	ld	r24, Z
     f3c:	91 81       	ldd	r25, Z+1	; 0x01
     f3e:	a2 81       	ldd	r26, Z+2	; 0x02
     f40:	b3 81       	ldd	r27, Z+3	; 0x03
     f42:	53 01       	movw	r10, r6
     f44:	42 01       	movw	r8, r4
     f46:	88 1a       	sub	r8, r24
     f48:	99 0a       	sbc	r9, r25
     f4a:	aa 0a       	sbc	r10, r26
     f4c:	bb 0a       	sbc	r11, r27
     f4e:	09 ef       	ldi	r16, 0xF9	; 249
     f50:	80 16       	cp	r8, r16
     f52:	0a e2       	ldi	r16, 0x2A	; 42
     f54:	90 06       	cpc	r9, r16
     f56:	a1 04       	cpc	r10, r1
     f58:	b1 04       	cpc	r11, r1
     f5a:	10 f0       	brcs	.+4      	; 0xf60 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x6a>
     f5c:	35 97       	sbiw	r30, 0x05	; 5
     f5e:	10 82       	st	Z, r1
     f60:	f1 01       	movw	r30, r2
     f62:	e9 58       	subi	r30, 0x89	; 137
     f64:	fb 4f       	sbci	r31, 0xFB	; 251
     f66:	80 81       	ld	r24, Z
     f68:	91 81       	ldd	r25, Z+1	; 0x01
     f6a:	89 2b       	or	r24, r25
     f6c:	69 f0       	breq	.+26     	; 0xf88 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x92>
     f6e:	73 96       	adiw	r30, 0x13	; 19
     f70:	80 81       	ld	r24, Z
     f72:	91 81       	ldd	r25, Z+1	; 0x01
     f74:	a2 81       	ldd	r26, Z+2	; 0x02
     f76:	b3 81       	ldd	r27, Z+3	; 0x03
     f78:	84 15       	cp	r24, r4
     f7a:	95 05       	cpc	r25, r5
     f7c:	a6 05       	cpc	r26, r6
     f7e:	b7 05       	cpc	r27, r7
     f80:	18 f4       	brcc	.+6      	; 0xf88 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x92>
     f82:	73 97       	sbiw	r30, 0x13	; 19
     f84:	11 82       	std	Z+1, r1	; 0x01
     f86:	10 82       	st	Z, r1
     f88:	61 01       	movw	r12, r2
     f8a:	11 e8       	ldi	r17, 0x81	; 129
     f8c:	c1 1a       	sub	r12, r17
     f8e:	1b ef       	ldi	r17, 0xFB	; 251
     f90:	d1 0a       	sbc	r13, r17
     f92:	71 01       	movw	r14, r2
     f94:	29 e8       	ldi	r18, 0x89	; 137
     f96:	e2 1a       	sub	r14, r18
     f98:	2b ef       	ldi	r18, 0xFB	; 251
     f9a:	f2 0a       	sbc	r15, r18
     f9c:	81 01       	movw	r16, r2
     f9e:	05 58       	subi	r16, 0x85	; 133
     fa0:	1b 4f       	sbci	r17, 0xFB	; 251
     fa2:	1c 8b       	std	Y+20, r17	; 0x14
     fa4:	0b 8b       	std	Y+19, r16	; 0x13
     fa6:	0a 5f       	subi	r16, 0xFA	; 250
     fa8:	1f 4f       	sbci	r17, 0xFF	; 255
     faa:	1a 8b       	std	Y+18, r17	; 0x12
     fac:	09 8b       	std	Y+17, r16	; 0x11
     fae:	02 5f       	subi	r16, 0xF2	; 242
     fb0:	1f 4f       	sbci	r17, 0xFF	; 255
     fb2:	18 8b       	std	Y+16, r17	; 0x10
     fb4:	0f 87       	std	Y+15, r16	; 0x0f
     fb6:	01 50       	subi	r16, 0x01	; 1
     fb8:	11 09       	sbc	r17, r1
     fba:	18 a3       	std	Y+32, r17	; 0x20
     fbc:	0f 8f       	std	Y+31, r16	; 0x1f
     fbe:	0f 85       	ldd	r16, Y+15	; 0x0f
     fc0:	18 89       	ldd	r17, Y+16	; 0x10
     fc2:	06 5e       	subi	r16, 0xE6	; 230
     fc4:	1f 4f       	sbci	r17, 0xFF	; 255
     fc6:	1e 8f       	std	Y+30, r17	; 0x1e
     fc8:	0d 8f       	std	Y+29, r16	; 0x1d
     fca:	0f 85       	ldd	r16, Y+15	; 0x0f
     fcc:	18 89       	ldd	r17, Y+16	; 0x10
     fce:	00 5f       	subi	r16, 0xF0	; 240
     fd0:	1f 4f       	sbci	r17, 0xFF	; 255
     fd2:	1a 8f       	std	Y+26, r17	; 0x1a
     fd4:	09 8f       	std	Y+25, r16	; 0x19
     fd6:	0f 85       	ldd	r16, Y+15	; 0x0f
     fd8:	18 89       	ldd	r17, Y+16	; 0x10
     fda:	0a 5f       	subi	r16, 0xFA	; 250
     fdc:	1f 4f       	sbci	r17, 0xFF	; 255
     fde:	1c 8f       	std	Y+28, r17	; 0x1c
     fe0:	0b 8f       	std	Y+27, r16	; 0x1b
     fe2:	53 01       	movw	r10, r6
     fe4:	42 01       	movw	r8, r4
     fe6:	14 e1       	ldi	r17, 0x14	; 20
     fe8:	81 0e       	add	r8, r17
     fea:	91 1c       	adc	r9, r1
     fec:	a1 1c       	adc	r10, r1
     fee:	b1 1c       	adc	r11, r1
     ff0:	f1 01       	movw	r30, r2
     ff2:	87 85       	ldd	r24, Z+15	; 0x0f
     ff4:	90 89       	ldd	r25, Z+16	; 0x10
     ff6:	a1 89       	ldd	r26, Z+17	; 0x11
     ff8:	b2 89       	ldd	r27, Z+18	; 0x12
     ffa:	89 2b       	or	r24, r25
     ffc:	8a 2b       	or	r24, r26
     ffe:	8b 2b       	or	r24, r27
    1000:	99 f0       	breq	.+38     	; 0x1028 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x132>
    1002:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <avr_time_now>
    1006:	dc 01       	movw	r26, r24
    1008:	cb 01       	movw	r24, r22
    100a:	84 19       	sub	r24, r4
    100c:	95 09       	sbc	r25, r5
    100e:	a6 09       	sbc	r26, r6
    1010:	b7 09       	sbc	r27, r7
    1012:	f1 01       	movw	r30, r2
    1014:	07 85       	ldd	r16, Z+15	; 0x0f
    1016:	10 89       	ldd	r17, Z+16	; 0x10
    1018:	21 89       	ldd	r18, Z+17	; 0x11
    101a:	32 89       	ldd	r19, Z+18	; 0x12
    101c:	08 17       	cp	r16, r24
    101e:	19 07       	cpc	r17, r25
    1020:	2a 07       	cpc	r18, r26
    1022:	3b 07       	cpc	r19, r27
    1024:	08 f4       	brcc	.+2      	; 0x1028 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x132>
    1026:	5d c5       	rjmp	.+2746   	; 0x1ae2 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xbec>
    1028:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <avr_uart_receive_byte>
    102c:	99 23       	and	r25, r25
    102e:	0c f4       	brge	.+2      	; 0x1032 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x13c>
    1030:	17 c5       	rjmp	.+2606   	; 0x1a60 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xb6a>
    1032:	d6 01       	movw	r26, r12
    1034:	2d 91       	ld	r18, X+
    1036:	3c 91       	ld	r19, X
    1038:	11 97       	sbiw	r26, 0x01	; 1
    103a:	28 0f       	add	r18, r24
    103c:	39 1f       	adc	r19, r25
    103e:	2d 93       	st	X+, r18
    1040:	3c 93       	st	X, r19
    1042:	f7 01       	movw	r30, r14
    1044:	40 81       	ld	r20, Z
    1046:	51 81       	ldd	r21, Z+1	; 0x01
    1048:	47 30       	cpi	r20, 0x07	; 7
    104a:	51 05       	cpc	r21, r1
    104c:	f9 f4       	brne	.+62     	; 0x108c <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x196>
    104e:	f1 01       	movw	r30, r2
    1050:	e3 58       	subi	r30, 0x83	; 131
    1052:	fb 4f       	sbci	r31, 0xFB	; 251
    1054:	20 81       	ld	r18, Z
    1056:	31 81       	ldd	r19, Z+1	; 0x01
    1058:	a9 01       	movw	r20, r18
    105a:	4f 5f       	subi	r20, 0xFF	; 255
    105c:	5f 4f       	sbci	r21, 0xFF	; 255
    105e:	51 83       	std	Z+1, r21	; 0x01
    1060:	40 83       	st	Z, r20
    1062:	f1 01       	movw	r30, r2
    1064:	e2 0f       	add	r30, r18
    1066:	f3 1f       	adc	r31, r19
    1068:	83 8b       	std	Z+19, r24	; 0x13
    106a:	f1 01       	movw	r30, r2
    106c:	e7 58       	subi	r30, 0x87	; 135
    106e:	fb 4f       	sbci	r31, 0xFB	; 251
    1070:	80 81       	ld	r24, Z
    1072:	91 81       	ldd	r25, Z+1	; 0x01
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	91 83       	std	Z+1, r25	; 0x01
    1078:	80 83       	st	Z, r24
    107a:	89 2b       	or	r24, r25
    107c:	09 f0       	breq	.+2      	; 0x1080 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x18a>
    107e:	b8 cf       	rjmp	.-144    	; 0xff0 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfa>
    1080:	88 e0       	ldi	r24, 0x08	; 8
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	d7 01       	movw	r26, r14
    1086:	8d 93       	st	X+, r24
    1088:	9c 93       	st	X, r25
    108a:	b2 cf       	rjmp	.-156    	; 0xff0 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfa>
    108c:	41 15       	cp	r20, r1
    108e:	51 05       	cpc	r21, r1
    1090:	29 f5       	brne	.+74     	; 0x10dc <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e6>
    1092:	8f 3f       	cpi	r24, 0xFF	; 255
    1094:	91 05       	cpc	r25, r1
    1096:	69 f4       	brne	.+26     	; 0x10b2 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1bc>
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	f7 01       	movw	r30, r14
    109e:	91 83       	std	Z+1, r25	; 0x01
    10a0:	80 83       	st	Z, r24
    10a2:	f1 01       	movw	r30, r2
    10a4:	e6 57       	subi	r30, 0x76	; 118
    10a6:	fb 4f       	sbci	r31, 0xFB	; 251
    10a8:	80 82       	st	Z, r8
    10aa:	91 82       	std	Z+1, r9	; 0x01
    10ac:	a2 82       	std	Z+2, r10	; 0x02
    10ae:	b3 82       	std	Z+3, r11	; 0x03
    10b0:	9f cf       	rjmp	.-194    	; 0xff0 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfa>
    10b2:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <avr_time_now>
    10b6:	dc 01       	movw	r26, r24
    10b8:	cb 01       	movw	r24, r22
    10ba:	84 19       	sub	r24, r4
    10bc:	95 09       	sbc	r25, r5
    10be:	a6 09       	sbc	r26, r6
    10c0:	b7 09       	sbc	r27, r7
    10c2:	89 38       	cpi	r24, 0x89	; 137
    10c4:	93 41       	sbci	r25, 0x13	; 19
    10c6:	a1 05       	cpc	r26, r1
    10c8:	b1 05       	cpc	r27, r1
    10ca:	08 f4       	brcc	.+2      	; 0x10ce <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1d8>
    10cc:	91 cf       	rjmp	.-222    	; 0xff0 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfa>
    10ce:	f1 01       	movw	r30, r2
    10d0:	ef 57       	subi	r30, 0x7F	; 127
    10d2:	fb 4f       	sbci	r31, 0xFB	; 251
    10d4:	10 82       	st	Z, r1
    10d6:	8e ef       	ldi	r24, 0xFE	; 254
    10d8:	9f ef       	ldi	r25, 0xFF	; 255
    10da:	0b c5       	rjmp	.+2582   	; 0x1af2 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xbfc>
    10dc:	41 30       	cpi	r20, 0x01	; 1
    10de:	51 05       	cpc	r21, r1
    10e0:	89 f5       	brne	.+98     	; 0x1144 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x24e>
    10e2:	8e 3f       	cpi	r24, 0xFE	; 254
    10e4:	91 05       	cpc	r25, r1
    10e6:	29 f4       	brne	.+10     	; 0x10f2 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1fc>
    10e8:	82 e0       	ldi	r24, 0x02	; 2
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	91 83       	std	Z+1, r25	; 0x01
    10ee:	80 83       	st	Z, r24
    10f0:	7f cf       	rjmp	.-258    	; 0xff0 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfa>
    10f2:	f7 01       	movw	r30, r14
    10f4:	11 82       	std	Z+1, r1	; 0x01
    10f6:	10 82       	st	Z, r1
    10f8:	a9 89       	ldd	r26, Y+17	; 0x11
    10fa:	ba 89       	ldd	r27, Y+18	; 0x12
    10fc:	8c 91       	ld	r24, X
    10fe:	81 11       	cpse	r24, r1
    1100:	77 cf       	rjmp	.-274    	; 0xff0 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfa>
    1102:	8b ea       	ldi	r24, 0xAB	; 171
    1104:	91 e0       	ldi	r25, 0x01	; 1
    1106:	9a 83       	std	Y+2, r25	; 0x02
    1108:	89 83       	std	Y+1, r24	; 0x01
    110a:	1b 82       	std	Y+3, r1	; 0x03
    110c:	1c 82       	std	Y+4, r1	; 0x04
    110e:	1d 82       	std	Y+5, r1	; 0x05
    1110:	1e 82       	std	Y+6, r1	; 0x06
    1112:	1f 82       	std	Y+7, r1	; 0x07
    1114:	18 86       	std	Y+8, r1	; 0x08
    1116:	19 86       	std	Y+9, r1	; 0x09
    1118:	1a 86       	std	Y+10, r1	; 0x0a
    111a:	d1 01       	movw	r26, r2
    111c:	ed 91       	ld	r30, X+
    111e:	fc 91       	ld	r31, X
    1120:	01 90       	ld	r0, Z+
    1122:	f0 81       	ld	r31, Z
    1124:	e0 2d       	mov	r30, r0
    1126:	ae 01       	movw	r20, r28
    1128:	4f 5f       	subi	r20, 0xFF	; 255
    112a:	5f 4f       	sbci	r21, 0xFF	; 255
    112c:	6a e0       	ldi	r22, 0x0A	; 10
    112e:	70 e0       	ldi	r23, 0x00	; 0
    1130:	c1 01       	movw	r24, r2
    1132:	09 95       	icall
    1134:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <avr_time_now>
    1138:	f1 01       	movw	r30, r2
    113a:	63 83       	std	Z+3, r22	; 0x03
    113c:	74 83       	std	Z+4, r23	; 0x04
    113e:	85 83       	std	Z+5, r24	; 0x05
    1140:	96 83       	std	Z+6, r25	; 0x06
    1142:	56 cf       	rjmp	.-340    	; 0xff0 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfa>
    1144:	42 30       	cpi	r20, 0x02	; 2
    1146:	51 05       	cpc	r21, r1
    1148:	89 f4       	brne	.+34     	; 0x116c <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x276>
    114a:	f1 01       	movw	r30, r2
    114c:	e7 58       	subi	r30, 0x87	; 135
    114e:	fb 4f       	sbci	r31, 0xFB	; 251
    1150:	91 83       	std	Z+1, r25	; 0x01
    1152:	80 83       	st	Z, r24
    1154:	34 96       	adiw	r30, 0x04	; 4
    1156:	11 82       	std	Z+1, r1	; 0x01
    1158:	10 82       	st	Z, r1
    115a:	23 e0       	ldi	r18, 0x03	; 3
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	d7 01       	movw	r26, r14
    1160:	2d 93       	st	X+, r18
    1162:	3c 93       	st	X, r19
    1164:	f6 01       	movw	r30, r12
    1166:	91 83       	std	Z+1, r25	; 0x01
    1168:	80 83       	st	Z, r24
    116a:	42 cf       	rjmp	.-380    	; 0xff0 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfa>
    116c:	43 30       	cpi	r20, 0x03	; 3
    116e:	51 05       	cpc	r21, r1
    1170:	89 f4       	brne	.+34     	; 0x1194 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x29e>
    1172:	f1 01       	movw	r30, r2
    1174:	e7 58       	subi	r30, 0x87	; 135
    1176:	fb 4f       	sbci	r31, 0xFB	; 251
    1178:	98 2f       	mov	r25, r24
    117a:	88 27       	eor	r24, r24
    117c:	20 81       	ld	r18, Z
    117e:	31 81       	ldd	r19, Z+1	; 0x01
    1180:	82 0f       	add	r24, r18
    1182:	93 1f       	adc	r25, r19
    1184:	91 83       	std	Z+1, r25	; 0x01
    1186:	80 83       	st	Z, r24
    1188:	84 e0       	ldi	r24, 0x04	; 4
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	d7 01       	movw	r26, r14
    118e:	8d 93       	st	X+, r24
    1190:	9c 93       	st	X, r25
    1192:	2e cf       	rjmp	.-420    	; 0xff0 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfa>
    1194:	44 30       	cpi	r20, 0x04	; 4
    1196:	51 05       	cpc	r21, r1
    1198:	a9 f4       	brne	.+42     	; 0x11c4 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ce>
    119a:	30 78       	andi	r19, 0x80	; 128
    119c:	33 23       	and	r19, r19
    119e:	2c f4       	brge	.+10     	; 0x11aa <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2b4>
    11a0:	21 50       	subi	r18, 0x01	; 1
    11a2:	31 09       	sbc	r19, r1
    11a4:	3f 6f       	ori	r19, 0xFF	; 255
    11a6:	2f 5f       	subi	r18, 0xFF	; 255
    11a8:	3f 4f       	sbci	r19, 0xFF	; 255
    11aa:	2f 3f       	cpi	r18, 0xFF	; 255
    11ac:	31 05       	cpc	r19, r1
    11ae:	31 f4       	brne	.+12     	; 0x11bc <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c6>
    11b0:	85 e0       	ldi	r24, 0x05	; 5
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	f7 01       	movw	r30, r14
    11b6:	91 83       	std	Z+1, r25	; 0x01
    11b8:	80 83       	st	Z, r24
    11ba:	1a cf       	rjmp	.-460    	; 0xff0 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfa>
    11bc:	d7 01       	movw	r26, r14
    11be:	1d 92       	st	X+, r1
    11c0:	1c 92       	st	X, r1
    11c2:	16 cf       	rjmp	.-468    	; 0xff0 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfa>
    11c4:	45 30       	cpi	r20, 0x05	; 5
    11c6:	51 05       	cpc	r21, r1
    11c8:	69 f4       	brne	.+26     	; 0x11e4 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
    11ca:	eb 89       	ldd	r30, Y+19	; 0x13
    11cc:	fc 89       	ldd	r31, Y+20	; 0x14
    11ce:	91 83       	std	Z+1, r25	; 0x01
    11d0:	80 83       	st	Z, r24
    11d2:	26 e0       	ldi	r18, 0x06	; 6
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	d7 01       	movw	r26, r14
    11d8:	2d 93       	st	X+, r18
    11da:	3c 93       	st	X, r19
    11dc:	f6 01       	movw	r30, r12
    11de:	91 83       	std	Z+1, r25	; 0x01
    11e0:	80 83       	st	Z, r24
    11e2:	06 cf       	rjmp	.-500    	; 0xff0 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfa>
    11e4:	46 30       	cpi	r20, 0x06	; 6
    11e6:	51 05       	cpc	r21, r1
    11e8:	f1 f4       	brne	.+60     	; 0x1226 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x330>
    11ea:	98 2f       	mov	r25, r24
    11ec:	88 27       	eor	r24, r24
    11ee:	ab 89       	ldd	r26, Y+19	; 0x13
    11f0:	bc 89       	ldd	r27, Y+20	; 0x14
    11f2:	2d 91       	ld	r18, X+
    11f4:	3c 91       	ld	r19, X
    11f6:	11 97       	sbiw	r26, 0x01	; 1
    11f8:	82 0f       	add	r24, r18
    11fa:	93 1f       	adc	r25, r19
    11fc:	8d 93       	st	X+, r24
    11fe:	9c 93       	st	X, r25
    1200:	87 e0       	ldi	r24, 0x07	; 7
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	f7 01       	movw	r30, r14
    1206:	91 83       	std	Z+1, r25	; 0x01
    1208:	80 83       	st	Z, r24
    120a:	f1 01       	movw	r30, r2
    120c:	e7 58       	subi	r30, 0x87	; 135
    120e:	fb 4f       	sbci	r31, 0xFB	; 251
    1210:	80 81       	ld	r24, Z
    1212:	91 81       	ldd	r25, Z+1	; 0x01
    1214:	89 2b       	or	r24, r25
    1216:	09 f0       	breq	.+2      	; 0x121a <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x324>
    1218:	eb ce       	rjmp	.-554    	; 0xff0 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfa>
    121a:	88 e0       	ldi	r24, 0x08	; 8
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	d7 01       	movw	r26, r14
    1220:	8d 93       	st	X+, r24
    1222:	9c 93       	st	X, r25
    1224:	e5 ce       	rjmp	.-566    	; 0xff0 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfa>
    1226:	48 30       	cpi	r20, 0x08	; 8
    1228:	51 05       	cpc	r21, r1
    122a:	09 f0       	breq	.+2      	; 0x122e <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x338>
    122c:	e1 ce       	rjmp	.-574    	; 0xff0 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfa>
    122e:	f7 01       	movw	r30, r14
    1230:	11 82       	std	Z+1, r1	; 0x01
    1232:	10 82       	st	Z, r1
    1234:	30 78       	andi	r19, 0x80	; 128
    1236:	33 23       	and	r19, r19
    1238:	2c f4       	brge	.+10     	; 0x1244 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x34e>
    123a:	21 50       	subi	r18, 0x01	; 1
    123c:	31 09       	sbc	r19, r1
    123e:	3f 6f       	ori	r19, 0xFF	; 255
    1240:	2f 5f       	subi	r18, 0xFF	; 255
    1242:	3f 4f       	sbci	r19, 0xFF	; 255
    1244:	2f 3f       	cpi	r18, 0xFF	; 255
    1246:	31 05       	cpc	r19, r1
    1248:	09 f0       	breq	.+2      	; 0x124c <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x356>
    124a:	d2 ce       	rjmp	.-604    	; 0xff0 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfa>
    124c:	ab 89       	ldd	r26, Y+19	; 0x13
    124e:	bc 89       	ldd	r27, Y+20	; 0x14
    1250:	8d 91       	ld	r24, X+
    1252:	9c 91       	ld	r25, X
    1254:	00 97       	sbiw	r24, 0x00	; 0
    1256:	09 f0       	breq	.+2      	; 0x125a <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x364>
    1258:	e3 c0       	rjmp	.+454    	; 0x1420 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x52a>
    125a:	8b ea       	ldi	r24, 0xAB	; 171
    125c:	91 e0       	ldi	r25, 0x01	; 1
    125e:	9a 83       	std	Y+2, r25	; 0x02
    1260:	89 83       	std	Y+1, r24	; 0x01
    1262:	1b 82       	std	Y+3, r1	; 0x03
    1264:	1c 82       	std	Y+4, r1	; 0x04
    1266:	1d 82       	std	Y+5, r1	; 0x05
    1268:	1e 82       	std	Y+6, r1	; 0x06
    126a:	1f 82       	std	Y+7, r1	; 0x07
    126c:	18 86       	std	Y+8, r1	; 0x08
    126e:	19 86       	std	Y+9, r1	; 0x09
    1270:	1a 86       	std	Y+10, r1	; 0x0a
    1272:	d1 01       	movw	r26, r2
    1274:	ed 91       	ld	r30, X+
    1276:	fc 91       	ld	r31, X
    1278:	01 90       	ld	r0, Z+
    127a:	f0 81       	ld	r31, Z
    127c:	e0 2d       	mov	r30, r0
    127e:	ae 01       	movw	r20, r28
    1280:	4f 5f       	subi	r20, 0xFF	; 255
    1282:	5f 4f       	sbci	r21, 0xFF	; 255
    1284:	6a e0       	ldi	r22, 0x0A	; 10
    1286:	70 e0       	ldi	r23, 0x00	; 0
    1288:	c1 01       	movw	r24, r2
    128a:	09 95       	icall
    128c:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <avr_time_now>
    1290:	f1 01       	movw	r30, r2
    1292:	63 83       	std	Z+3, r22	; 0x03
    1294:	74 83       	std	Z+4, r23	; 0x04
    1296:	85 83       	std	Z+5, r24	; 0x05
    1298:	96 83       	std	Z+6, r25	; 0x06
    129a:	87 eb       	ldi	r24, 0xB7	; 183
    129c:	91 e0       	ldi	r25, 0x01	; 1
    129e:	9a 83       	std	Y+2, r25	; 0x02
    12a0:	89 83       	std	Y+1, r24	; 0x01
    12a2:	1c 82       	std	Y+4, r1	; 0x04
    12a4:	1b 82       	std	Y+3, r1	; 0x03
    12a6:	8d e8       	ldi	r24, 0x8D	; 141
    12a8:	91 e0       	ldi	r25, 0x01	; 1
    12aa:	9e 83       	std	Y+6, r25	; 0x06
    12ac:	8d 83       	std	Y+5, r24	; 0x05
    12ae:	98 87       	std	Y+8, r25	; 0x08
    12b0:	8f 83       	std	Y+7, r24	; 0x07
    12b2:	9a 87       	std	Y+10, r25	; 0x0a
    12b4:	89 87       	std	Y+9, r24	; 0x09
    12b6:	1b 86       	std	Y+11, r1	; 0x0b
    12b8:	1c 86       	std	Y+12, r1	; 0x0c
    12ba:	1d 86       	std	Y+13, r1	; 0x0d
    12bc:	1e 86       	std	Y+14, r1	; 0x0e
    12be:	71 01       	movw	r14, r2
    12c0:	fd ee       	ldi	r31, 0xED	; 237
    12c2:	ef 1a       	sub	r14, r31
    12c4:	fb ef       	ldi	r31, 0xFB	; 251
    12c6:	ff 0a       	sbc	r15, r31
    12c8:	81 01       	movw	r16, r2
    12ca:	0b 5b       	subi	r16, 0xBB	; 187
    12cc:	1b 4f       	sbci	r17, 0xFB	; 251
    12ce:	81 2c       	mov	r8, r1
    12d0:	91 2c       	mov	r9, r1
    12d2:	54 01       	movw	r10, r8
    12d4:	68 94       	set
    12d6:	91 f8       	bld	r9, 1
    12d8:	d7 01       	movw	r26, r14
    12da:	ed 91       	ld	r30, X+
    12dc:	fc 91       	ld	r31, X
    12de:	30 97       	sbiw	r30, 0x00	; 0
    12e0:	a9 f1       	breq	.+106    	; 0x134c <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x456>
    12e2:	84 81       	ldd	r24, Z+4	; 0x04
    12e4:	95 81       	ldd	r25, Z+5	; 0x05
    12e6:	9c 83       	std	Y+4, r25	; 0x04
    12e8:	8b 83       	std	Y+3, r24	; 0x03
    12ea:	80 81       	ld	r24, Z
    12ec:	91 81       	ldd	r25, Z+1	; 0x01
    12ee:	9e 83       	std	Y+6, r25	; 0x06
    12f0:	8d 83       	std	Y+5, r24	; 0x05
    12f2:	82 81       	ldd	r24, Z+2	; 0x02
    12f4:	93 81       	ldd	r25, Z+3	; 0x03
    12f6:	dc 01       	movw	r26, r24
    12f8:	ed 91       	ld	r30, X+
    12fa:	fc 91       	ld	r31, X
    12fc:	04 80       	ldd	r0, Z+4	; 0x04
    12fe:	f5 81       	ldd	r31, Z+5	; 0x05
    1300:	e0 2d       	mov	r30, r0
    1302:	09 95       	icall
    1304:	98 87       	std	Y+8, r25	; 0x08
    1306:	8f 83       	std	Y+7, r24	; 0x07
    1308:	d7 01       	movw	r26, r14
    130a:	ed 91       	ld	r30, X+
    130c:	fc 91       	ld	r31, X
    130e:	82 81       	ldd	r24, Z+2	; 0x02
    1310:	93 81       	ldd	r25, Z+3	; 0x03
    1312:	dc 01       	movw	r26, r24
    1314:	ed 91       	ld	r30, X+
    1316:	fc 91       	ld	r31, X
    1318:	06 80       	ldd	r0, Z+6	; 0x06
    131a:	f7 81       	ldd	r31, Z+7	; 0x07
    131c:	e0 2d       	mov	r30, r0
    131e:	09 95       	icall
    1320:	9a 87       	std	Y+10, r25	; 0x0a
    1322:	89 87       	std	Y+9, r24	; 0x09
    1324:	8b 86       	std	Y+11, r8	; 0x0b
    1326:	9c 86       	std	Y+12, r9	; 0x0c
    1328:	ad 86       	std	Y+13, r10	; 0x0d
    132a:	be 86       	std	Y+14, r11	; 0x0e
    132c:	d7 01       	movw	r26, r14
    132e:	ed 91       	ld	r30, X+
    1330:	fc 91       	ld	r31, X
    1332:	60 85       	ldd	r22, Z+8	; 0x08
    1334:	71 85       	ldd	r23, Z+9	; 0x09
    1336:	d1 01       	movw	r26, r2
    1338:	ed 91       	ld	r30, X+
    133a:	fc 91       	ld	r31, X
    133c:	01 90       	ld	r0, Z+
    133e:	f0 81       	ld	r31, Z
    1340:	e0 2d       	mov	r30, r0
    1342:	ae 01       	movw	r20, r28
    1344:	4f 5f       	subi	r20, 0xFF	; 255
    1346:	5f 4f       	sbci	r21, 0xFF	; 255
    1348:	c1 01       	movw	r24, r2
    134a:	09 95       	icall
    134c:	b2 e0       	ldi	r27, 0x02	; 2
    134e:	eb 0e       	add	r14, r27
    1350:	f1 1c       	adc	r15, r1
    1352:	e0 16       	cp	r14, r16
    1354:	f1 06       	cpc	r15, r17
    1356:	09 f0       	breq	.+2      	; 0x135a <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x464>
    1358:	bf cf       	rjmp	.-130    	; 0x12d8 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3e2>
    135a:	71 01       	movw	r14, r2
    135c:	e9 e8       	ldi	r30, 0x89	; 137
    135e:	ee 1a       	sub	r14, r30
    1360:	eb ef       	ldi	r30, 0xFB	; 251
    1362:	fe 0a       	sbc	r15, r30
    1364:	81 2c       	mov	r8, r1
    1366:	91 2c       	mov	r9, r1
    1368:	54 01       	movw	r10, r8
    136a:	68 94       	set
    136c:	91 f8       	bld	r9, 1
    136e:	f8 01       	movw	r30, r16
    1370:	a0 81       	ld	r26, Z
    1372:	b1 81       	ldd	r27, Z+1	; 0x01
    1374:	10 97       	sbiw	r26, 0x00	; 0
    1376:	e1 f1       	breq	.+120    	; 0x13f0 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4fa>
    1378:	12 96       	adiw	r26, 0x02	; 2
    137a:	8d 91       	ld	r24, X+
    137c:	9c 91       	ld	r25, X
    137e:	13 97       	sbiw	r26, 0x03	; 3
    1380:	9c 83       	std	Y+4, r25	; 0x04
    1382:	8b 83       	std	Y+3, r24	; 0x03
    1384:	14 96       	adiw	r26, 0x04	; 4
    1386:	8d 91       	ld	r24, X+
    1388:	9c 91       	ld	r25, X
    138a:	15 97       	sbiw	r26, 0x05	; 5
    138c:	9e 83       	std	Y+6, r25	; 0x06
    138e:	8d 83       	std	Y+5, r24	; 0x05
    1390:	ed 91       	ld	r30, X+
    1392:	fc 91       	ld	r31, X
    1394:	11 97       	sbiw	r26, 0x01	; 1
    1396:	04 80       	ldd	r0, Z+4	; 0x04
    1398:	f5 81       	ldd	r31, Z+5	; 0x05
    139a:	e0 2d       	mov	r30, r0
    139c:	cd 01       	movw	r24, r26
    139e:	09 95       	icall
    13a0:	98 87       	std	Y+8, r25	; 0x08
    13a2:	8f 83       	std	Y+7, r24	; 0x07
    13a4:	d8 01       	movw	r26, r16
    13a6:	8d 91       	ld	r24, X+
    13a8:	9c 91       	ld	r25, X
    13aa:	dc 01       	movw	r26, r24
    13ac:	ed 91       	ld	r30, X+
    13ae:	fc 91       	ld	r31, X
    13b0:	06 80       	ldd	r0, Z+6	; 0x06
    13b2:	f7 81       	ldd	r31, Z+7	; 0x07
    13b4:	e0 2d       	mov	r30, r0
    13b6:	09 95       	icall
    13b8:	9a 87       	std	Y+10, r25	; 0x0a
    13ba:	89 87       	std	Y+9, r24	; 0x09
    13bc:	8b 86       	std	Y+11, r8	; 0x0b
    13be:	9c 86       	std	Y+12, r9	; 0x0c
    13c0:	ad 86       	std	Y+13, r10	; 0x0d
    13c2:	be 86       	std	Y+14, r11	; 0x0e
    13c4:	d1 01       	movw	r26, r2
    13c6:	ed 91       	ld	r30, X+
    13c8:	fc 91       	ld	r31, X
    13ca:	c0 80       	ld	r12, Z
    13cc:	d1 80       	ldd	r13, Z+1	; 0x01
    13ce:	f8 01       	movw	r30, r16
    13d0:	80 81       	ld	r24, Z
    13d2:	91 81       	ldd	r25, Z+1	; 0x01
    13d4:	dc 01       	movw	r26, r24
    13d6:	ed 91       	ld	r30, X+
    13d8:	fc 91       	ld	r31, X
    13da:	02 80       	ldd	r0, Z+2	; 0x02
    13dc:	f3 81       	ldd	r31, Z+3	; 0x03
    13de:	e0 2d       	mov	r30, r0
    13e0:	09 95       	icall
    13e2:	ae 01       	movw	r20, r28
    13e4:	4f 5f       	subi	r20, 0xFF	; 255
    13e6:	5f 4f       	sbci	r21, 0xFF	; 255
    13e8:	bc 01       	movw	r22, r24
    13ea:	c1 01       	movw	r24, r2
    13ec:	f6 01       	movw	r30, r12
    13ee:	09 95       	icall
    13f0:	0e 5f       	subi	r16, 0xFE	; 254
    13f2:	1f 4f       	sbci	r17, 0xFF	; 255
    13f4:	e0 16       	cp	r14, r16
    13f6:	f1 06       	cpc	r15, r17
    13f8:	09 f0       	breq	.+2      	; 0x13fc <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x506>
    13fa:	b9 cf       	rjmp	.-142    	; 0x136e <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x478>
    13fc:	f1 01       	movw	r30, r2
    13fe:	ef 57       	subi	r30, 0x7F	; 127
    1400:	fb 4f       	sbci	r31, 0xFB	; 251
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	80 83       	st	Z, r24
    1406:	31 96       	adiw	r30, 0x01	; 1
    1408:	40 82       	st	Z, r4
    140a:	51 82       	std	Z+1, r5	; 0x01
    140c:	62 82       	std	Z+2, r6	; 0x02
    140e:	73 82       	std	Z+3, r7	; 0x03
    1410:	34 96       	adiw	r30, 0x04	; 4
    1412:	40 82       	st	Z, r4
    1414:	51 82       	std	Z+1, r5	; 0x01
    1416:	62 82       	std	Z+2, r6	; 0x02
    1418:	73 82       	std	Z+3, r7	; 0x03
    141a:	8f ef       	ldi	r24, 0xFF	; 255
    141c:	9f ef       	ldi	r25, 0xFF	; 255
    141e:	69 c3       	rjmp	.+1746   	; 0x1af2 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xbfc>
    1420:	8a 30       	cpi	r24, 0x0A	; 10
    1422:	91 05       	cpc	r25, r1
    1424:	09 f0       	breq	.+2      	; 0x1428 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x532>
    1426:	c5 c0       	rjmp	.+394    	; 0x15b2 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x6bc>
    1428:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <avr_time_now>
    142c:	d1 01       	movw	r26, r2
    142e:	13 96       	adiw	r26, 0x03	; 3
    1430:	0d 91       	ld	r16, X+
    1432:	1d 91       	ld	r17, X+
    1434:	2d 91       	ld	r18, X+
    1436:	3c 91       	ld	r19, X
    1438:	16 97       	sbiw	r26, 0x06	; 6
    143a:	60 1b       	sub	r22, r16
    143c:	71 0b       	sbc	r23, r17
    143e:	82 0b       	sbc	r24, r18
    1440:	93 0b       	sbc	r25, r19
    1442:	69 a7       	std	Y+41, r22	; 0x29
    1444:	7a a7       	std	Y+42, r23	; 0x2a
    1446:	8b a7       	std	Y+43, r24	; 0x2b
    1448:	9c a7       	std	Y+44, r25	; 0x2c
    144a:	54 96       	adiw	r26, 0x14	; 20
    144c:	8c 91       	ld	r24, X
    144e:	54 97       	sbiw	r26, 0x14	; 20
    1450:	55 96       	adiw	r26, 0x15	; 21
    1452:	2c 91       	ld	r18, X
    1454:	55 97       	sbiw	r26, 0x15	; 21
    1456:	42 2f       	mov	r20, r18
    1458:	50 e0       	ldi	r21, 0x00	; 0
    145a:	60 e0       	ldi	r22, 0x00	; 0
    145c:	70 e0       	ldi	r23, 0x00	; 0
    145e:	ba 01       	movw	r22, r20
    1460:	55 27       	eor	r21, r21
    1462:	44 27       	eor	r20, r20
    1464:	58 2b       	or	r21, r24
    1466:	53 96       	adiw	r26, 0x13	; 19
    1468:	8c 91       	ld	r24, X
    146a:	53 97       	sbiw	r26, 0x13	; 19
    146c:	48 2b       	or	r20, r24
    146e:	56 96       	adiw	r26, 0x16	; 22
    1470:	8c 91       	ld	r24, X
    1472:	8a 01       	movw	r16, r20
    1474:	9b 01       	movw	r18, r22
    1476:	38 2b       	or	r19, r24
    1478:	a9 01       	movw	r20, r18
    147a:	98 01       	movw	r18, r16
    147c:	21 50       	subi	r18, 0x01	; 1
    147e:	31 09       	sbc	r19, r1
    1480:	41 09       	sbc	r20, r1
    1482:	51 09       	sbc	r21, r1
    1484:	29 a3       	std	Y+33, r18	; 0x21
    1486:	3a a3       	std	Y+34, r19	; 0x22
    1488:	4b a3       	std	Y+35, r20	; 0x23
    148a:	5c a3       	std	Y+36, r21	; 0x24
    148c:	d1 01       	movw	r26, r2
    148e:	58 96       	adiw	r26, 0x18	; 24
    1490:	2c 91       	ld	r18, X
    1492:	58 97       	sbiw	r26, 0x18	; 24
    1494:	59 96       	adiw	r26, 0x19	; 25
    1496:	8c 91       	ld	r24, X
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	a0 e0       	ldi	r26, 0x00	; 0
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	dc 01       	movw	r26, r24
    14a0:	99 27       	eor	r25, r25
    14a2:	88 27       	eor	r24, r24
    14a4:	92 2b       	or	r25, r18
    14a6:	f1 01       	movw	r30, r2
    14a8:	27 89       	ldd	r18, Z+23	; 0x17
    14aa:	82 2b       	or	r24, r18
    14ac:	22 8d       	ldd	r18, Z+26	; 0x1a
    14ae:	b2 2b       	or	r27, r18
    14b0:	8c 01       	movw	r16, r24
    14b2:	9d 01       	movw	r18, r26
    14b4:	16 53       	subi	r17, 0x36	; 54
    14b6:	25 46       	sbci	r18, 0x65	; 101
    14b8:	34 4c       	sbci	r19, 0xC4	; 196
    14ba:	0d 8b       	std	Y+21, r16	; 0x15
    14bc:	1e 8b       	std	Y+22, r17	; 0x16
    14be:	2f 8b       	std	Y+23, r18	; 0x17
    14c0:	38 8f       	std	Y+24, r19	; 0x18
    14c2:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <avr_time_now>
    14c6:	6d a3       	std	Y+37, r22	; 0x25
    14c8:	7e a3       	std	Y+38, r23	; 0x26
    14ca:	8f a3       	std	Y+39, r24	; 0x27
    14cc:	98 a7       	std	Y+40, r25	; 0x28
    14ce:	69 a5       	ldd	r22, Y+41	; 0x29
    14d0:	7a a5       	ldd	r23, Y+42	; 0x2a
    14d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    14d4:	9c a5       	ldd	r25, Y+44	; 0x2c
    14d6:	28 ee       	ldi	r18, 0xE8	; 232
    14d8:	33 e0       	ldi	r19, 0x03	; 3
    14da:	40 e0       	ldi	r20, 0x00	; 0
    14dc:	50 e0       	ldi	r21, 0x00	; 0
    14de:	0e 94 cc 19 	call	0x3398	; 0x3398 <__udivmodsi4>
    14e2:	69 a7       	std	Y+41, r22	; 0x29
    14e4:	7a a7       	std	Y+42, r23	; 0x2a
    14e6:	8b a7       	std	Y+43, r24	; 0x2b
    14e8:	9c a7       	std	Y+44, r25	; 0x2c
    14ea:	69 a1       	ldd	r22, Y+33	; 0x21
    14ec:	7a a1       	ldd	r23, Y+34	; 0x22
    14ee:	8b a1       	ldd	r24, Y+35	; 0x23
    14f0:	9c a1       	ldd	r25, Y+36	; 0x24
    14f2:	62 0f       	add	r22, r18
    14f4:	73 1f       	adc	r23, r19
    14f6:	84 1f       	adc	r24, r20
    14f8:	95 1f       	adc	r25, r21
    14fa:	69 a3       	std	Y+33, r22	; 0x21
    14fc:	7a a3       	std	Y+34, r23	; 0x22
    14fe:	8b a3       	std	Y+35, r24	; 0x23
    1500:	9c a3       	std	Y+36, r25	; 0x24
    1502:	6d a1       	ldd	r22, Y+37	; 0x25
    1504:	7e a1       	ldd	r23, Y+38	; 0x26
    1506:	8f a1       	ldd	r24, Y+39	; 0x27
    1508:	98 a5       	ldd	r25, Y+40	; 0x28
    150a:	28 ee       	ldi	r18, 0xE8	; 232
    150c:	33 e0       	ldi	r19, 0x03	; 3
    150e:	40 e0       	ldi	r20, 0x00	; 0
    1510:	50 e0       	ldi	r21, 0x00	; 0
    1512:	0e 94 cc 19 	call	0x3398	; 0x3398 <__udivmodsi4>
    1516:	6d a3       	std	Y+37, r22	; 0x25
    1518:	7e a3       	std	Y+38, r23	; 0x26
    151a:	8f a3       	std	Y+39, r24	; 0x27
    151c:	98 a7       	std	Y+40, r25	; 0x28
    151e:	89 a1       	ldd	r24, Y+33	; 0x21
    1520:	9a a1       	ldd	r25, Y+34	; 0x22
    1522:	ab a1       	ldd	r26, Y+35	; 0x23
    1524:	bc a1       	ldd	r27, Y+36	; 0x24
    1526:	82 1b       	sub	r24, r18
    1528:	93 0b       	sbc	r25, r19
    152a:	a4 0b       	sbc	r26, r20
    152c:	b5 0b       	sbc	r27, r21
    152e:	f1 01       	movw	r30, r2
    1530:	87 83       	std	Z+7, r24	; 0x07
    1532:	90 87       	std	Z+8, r25	; 0x08
    1534:	a1 87       	std	Z+9, r26	; 0x09
    1536:	b2 87       	std	Z+10, r27	; 0x0a
    1538:	29 a5       	ldd	r18, Y+41	; 0x29
    153a:	3a a5       	ldd	r19, Y+42	; 0x2a
    153c:	4b a5       	ldd	r20, Y+43	; 0x2b
    153e:	5c a5       	ldd	r21, Y+44	; 0x2c
    1540:	60 e4       	ldi	r22, 0x40	; 64
    1542:	72 e4       	ldi	r23, 0x42	; 66
    1544:	8f e0       	ldi	r24, 0x0F	; 15
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	0e 94 bc 19 	call	0x3378	; 0x3378 <__mulsi3>
    154c:	0d 89       	ldd	r16, Y+21	; 0x15
    154e:	1e 89       	ldd	r17, Y+22	; 0x16
    1550:	2f 89       	ldd	r18, Y+23	; 0x17
    1552:	38 8d       	ldd	r19, Y+24	; 0x18
    1554:	06 0f       	add	r16, r22
    1556:	17 1f       	adc	r17, r23
    1558:	28 1f       	adc	r18, r24
    155a:	39 1f       	adc	r19, r25
    155c:	0d 8b       	std	Y+21, r16	; 0x15
    155e:	1e 8b       	std	Y+22, r17	; 0x16
    1560:	2f 8b       	std	Y+23, r18	; 0x17
    1562:	38 8f       	std	Y+24, r19	; 0x18
    1564:	2d a1       	ldd	r18, Y+37	; 0x25
    1566:	3e a1       	ldd	r19, Y+38	; 0x26
    1568:	4f a1       	ldd	r20, Y+39	; 0x27
    156a:	58 a5       	ldd	r21, Y+40	; 0x28
    156c:	60 e4       	ldi	r22, 0x40	; 64
    156e:	72 e4       	ldi	r23, 0x42	; 66
    1570:	8f e0       	ldi	r24, 0x0F	; 15
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	0e 94 bc 19 	call	0x3378	; 0x3378 <__mulsi3>
    1578:	0d 89       	ldd	r16, Y+21	; 0x15
    157a:	1e 89       	ldd	r17, Y+22	; 0x16
    157c:	2f 89       	ldd	r18, Y+23	; 0x17
    157e:	38 8d       	ldd	r19, Y+24	; 0x18
    1580:	06 1b       	sub	r16, r22
    1582:	17 0b       	sbc	r17, r23
    1584:	28 0b       	sbc	r18, r24
    1586:	39 0b       	sbc	r19, r25
    1588:	03 87       	std	Z+11, r16	; 0x0b
    158a:	14 87       	std	Z+12, r17	; 0x0c
    158c:	25 87       	std	Z+13, r18	; 0x0d
    158e:	36 87       	std	Z+14, r19	; 0x0e
    1590:	b1 01       	movw	r22, r2
    1592:	65 5f       	subi	r22, 0xF5	; 245
    1594:	7f 4f       	sbci	r23, 0xFF	; 255
    1596:	c1 01       	movw	r24, r2
    1598:	07 96       	adiw	r24, 0x07	; 7
    159a:	0e 94 34 17 	call	0x2e68	; 0x2e68 <_ZN3ros16normalizeSecNSecERmS0_>
    159e:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <avr_time_now>
    15a2:	f1 01       	movw	r30, r2
    15a4:	ea 57       	subi	r30, 0x7A	; 122
    15a6:	fb 4f       	sbci	r31, 0xFB	; 251
    15a8:	60 83       	st	Z, r22
    15aa:	71 83       	std	Z+1, r23	; 0x01
    15ac:	82 83       	std	Z+2, r24	; 0x02
    15ae:	93 83       	std	Z+3, r25	; 0x03
    15b0:	1f cd       	rjmp	.-1474   	; 0xff0 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfa>
    15b2:	86 30       	cpi	r24, 0x06	; 6
    15b4:	91 05       	cpc	r25, r1
    15b6:	09 f0       	breq	.+2      	; 0x15ba <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x6c4>
    15b8:	33 c2       	rjmp	.+1126   	; 0x1a20 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xb2a>
    15ba:	81 01       	movw	r16, r2
    15bc:	0d 5e       	subi	r16, 0xED	; 237
    15be:	1f 4f       	sbci	r17, 0xFF	; 255
    15c0:	1a a3       	std	Y+34, r17	; 0x22
    15c2:	09 a3       	std	Y+33, r16	; 0x21
    15c4:	d1 01       	movw	r26, r2
    15c6:	53 96       	adiw	r26, 0x13	; 19
    15c8:	2c 91       	ld	r18, X
    15ca:	53 97       	sbiw	r26, 0x13	; 19
    15cc:	54 96       	adiw	r26, 0x14	; 20
    15ce:	3c 91       	ld	r19, X
    15d0:	54 97       	sbiw	r26, 0x14	; 20
    15d2:	55 96       	adiw	r26, 0x15	; 21
    15d4:	8c 91       	ld	r24, X
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	a0 e0       	ldi	r26, 0x00	; 0
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	dc 01       	movw	r26, r24
    15de:	99 27       	eor	r25, r25
    15e0:	88 27       	eor	r24, r24
    15e2:	93 2b       	or	r25, r19
    15e4:	82 2b       	or	r24, r18
    15e6:	f1 01       	movw	r30, r2
    15e8:	26 89       	ldd	r18, Z+22	; 0x16
    15ea:	ac 01       	movw	r20, r24
    15ec:	bd 01       	movw	r22, r26
    15ee:	72 2b       	or	r23, r18
    15f0:	4d 8b       	std	Y+21, r20	; 0x15
    15f2:	5e 8b       	std	Y+22, r21	; 0x16
    15f4:	6f 8b       	std	Y+23, r22	; 0x17
    15f6:	78 8f       	std	Y+24, r23	; 0x18
    15f8:	ef 85       	ldd	r30, Y+15	; 0x0f
    15fa:	f8 89       	ldd	r31, Y+16	; 0x10
    15fc:	82 81       	ldd	r24, Z+2	; 0x02
    15fe:	93 81       	ldd	r25, Z+3	; 0x03
    1600:	a4 81       	ldd	r26, Z+4	; 0x04
    1602:	b5 81       	ldd	r27, Z+5	; 0x05
    1604:	84 17       	cp	r24, r20
    1606:	95 07       	cpc	r25, r21
    1608:	a6 07       	cpc	r26, r22
    160a:	b7 07       	cpc	r27, r23
    160c:	78 f4       	brcc	.+30     	; 0x162c <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x736>
    160e:	ba 01       	movw	r22, r20
    1610:	66 0f       	add	r22, r22
    1612:	77 1f       	adc	r23, r23
    1614:	66 0f       	add	r22, r22
    1616:	77 1f       	adc	r23, r23
    1618:	82 85       	ldd	r24, Z+10	; 0x0a
    161a:	93 85       	ldd	r25, Z+11	; 0x0b
    161c:	0e 94 0e 1a 	call	0x341c	; 0x341c <realloc>
    1620:	af 85       	ldd	r26, Y+15	; 0x0f
    1622:	b8 89       	ldd	r27, Y+16	; 0x10
    1624:	1b 96       	adiw	r26, 0x0b	; 11
    1626:	9c 93       	st	X, r25
    1628:	8e 93       	st	-X, r24
    162a:	1a 97       	sbiw	r26, 0x0a	; 10
    162c:	0d 89       	ldd	r16, Y+21	; 0x15
    162e:	1e 89       	ldd	r17, Y+22	; 0x16
    1630:	2f 89       	ldd	r18, Y+23	; 0x17
    1632:	38 8d       	ldd	r19, Y+24	; 0x18
    1634:	af 85       	ldd	r26, Y+15	; 0x0f
    1636:	b8 89       	ldd	r27, Y+16	; 0x10
    1638:	12 96       	adiw	r26, 0x02	; 2
    163a:	0d 93       	st	X+, r16
    163c:	1d 93       	st	X+, r17
    163e:	2d 93       	st	X+, r18
    1640:	3c 93       	st	X, r19
    1642:	15 97       	sbiw	r26, 0x05	; 5
    1644:	01 2b       	or	r16, r17
    1646:	02 2b       	or	r16, r18
    1648:	03 2b       	or	r16, r19
    164a:	09 f4       	brne	.+2      	; 0x164e <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x758>
    164c:	54 c0       	rjmp	.+168    	; 0x16f6 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x800>
    164e:	a9 a1       	ldd	r26, Y+33	; 0x21
    1650:	ba a1       	ldd	r27, Y+34	; 0x22
    1652:	e4 e0       	ldi	r30, 0x04	; 4
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	fe 8b       	std	Y+22, r31	; 0x16
    1658:	ed 8b       	std	Y+21, r30	; 0x15
    165a:	40 e0       	ldi	r20, 0x00	; 0
    165c:	50 e0       	ldi	r21, 0x00	; 0
    165e:	ba 01       	movw	r22, r20
    1660:	15 96       	adiw	r26, 0x05	; 5
    1662:	8c 91       	ld	r24, X
    1664:	15 97       	sbiw	r26, 0x05	; 5
    1666:	16 96       	adiw	r26, 0x06	; 6
    1668:	9c 91       	ld	r25, X
    166a:	16 97       	sbiw	r26, 0x06	; 6
    166c:	09 2f       	mov	r16, r25
    166e:	10 e0       	ldi	r17, 0x00	; 0
    1670:	20 e0       	ldi	r18, 0x00	; 0
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	98 01       	movw	r18, r16
    1676:	11 27       	eor	r17, r17
    1678:	00 27       	eor	r16, r16
    167a:	18 2b       	or	r17, r24
    167c:	14 96       	adiw	r26, 0x04	; 4
    167e:	8c 91       	ld	r24, X
    1680:	14 97       	sbiw	r26, 0x04	; 4
    1682:	08 2b       	or	r16, r24
    1684:	17 96       	adiw	r26, 0x07	; 7
    1686:	8c 91       	ld	r24, X
    1688:	17 97       	sbiw	r26, 0x07	; 7
    168a:	38 2b       	or	r19, r24
    168c:	ef 85       	ldd	r30, Y+15	; 0x0f
    168e:	f8 89       	ldd	r31, Y+16	; 0x10
    1690:	06 83       	std	Z+6, r16	; 0x06
    1692:	17 83       	std	Z+7, r17	; 0x07
    1694:	20 87       	std	Z+8, r18	; 0x08
    1696:	31 87       	std	Z+9, r19	; 0x09
    1698:	ed 89       	ldd	r30, Y+21	; 0x15
    169a:	fe 89       	ldd	r31, Y+22	; 0x16
    169c:	cf 01       	movw	r24, r30
    169e:	04 97       	sbiw	r24, 0x04	; 4
    16a0:	8f 01       	movw	r16, r30
    16a2:	0c 5f       	subi	r16, 0xFC	; 252
    16a4:	1f 4f       	sbci	r17, 0xFF	; 255
    16a6:	1e 8b       	std	Y+22, r17	; 0x16
    16a8:	0d 8b       	std	Y+21, r16	; 0x15
    16aa:	ef 85       	ldd	r30, Y+15	; 0x0f
    16ac:	f8 89       	ldd	r31, Y+16	; 0x10
    16ae:	22 85       	ldd	r18, Z+10	; 0x0a
    16b0:	33 85       	ldd	r19, Z+11	; 0x0b
    16b2:	28 0f       	add	r18, r24
    16b4:	39 1f       	adc	r19, r25
    16b6:	eb 8d       	ldd	r30, Y+27	; 0x1b
    16b8:	fc 8d       	ldd	r31, Y+28	; 0x1c
    16ba:	80 81       	ld	r24, Z
    16bc:	91 81       	ldd	r25, Z+1	; 0x01
    16be:	f9 01       	movw	r30, r18
    16c0:	91 83       	std	Z+1, r25	; 0x01
    16c2:	80 83       	st	Z, r24
    16c4:	eb 8d       	ldd	r30, Y+27	; 0x1b
    16c6:	fc 8d       	ldd	r31, Y+28	; 0x1c
    16c8:	82 81       	ldd	r24, Z+2	; 0x02
    16ca:	93 81       	ldd	r25, Z+3	; 0x03
    16cc:	f9 01       	movw	r30, r18
    16ce:	93 83       	std	Z+3, r25	; 0x03
    16d0:	82 83       	std	Z+2, r24	; 0x02
    16d2:	4f 5f       	subi	r20, 0xFF	; 255
    16d4:	5f 4f       	sbci	r21, 0xFF	; 255
    16d6:	6f 4f       	sbci	r22, 0xFF	; 255
    16d8:	7f 4f       	sbci	r23, 0xFF	; 255
    16da:	14 96       	adiw	r26, 0x04	; 4
    16dc:	ef 85       	ldd	r30, Y+15	; 0x0f
    16de:	f8 89       	ldd	r31, Y+16	; 0x10
    16e0:	02 81       	ldd	r16, Z+2	; 0x02
    16e2:	13 81       	ldd	r17, Z+3	; 0x03
    16e4:	24 81       	ldd	r18, Z+4	; 0x04
    16e6:	35 81       	ldd	r19, Z+5	; 0x05
    16e8:	40 17       	cp	r20, r16
    16ea:	51 07       	cpc	r21, r17
    16ec:	62 07       	cpc	r22, r18
    16ee:	73 07       	cpc	r23, r19
    16f0:	08 f4       	brcc	.+2      	; 0x16f4 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7fe>
    16f2:	b6 cf       	rjmp	.-148    	; 0x1660 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x76a>
    16f4:	04 c0       	rjmp	.+8      	; 0x16fe <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x808>
    16f6:	04 e0       	ldi	r16, 0x04	; 4
    16f8:	10 e0       	ldi	r17, 0x00	; 0
    16fa:	1e 8b       	std	Y+22, r17	; 0x16
    16fc:	0d 8b       	std	Y+21, r16	; 0x15
    16fe:	09 a1       	ldd	r16, Y+33	; 0x21
    1700:	1a a1       	ldd	r17, Y+34	; 0x22
    1702:	2d 89       	ldd	r18, Y+21	; 0x15
    1704:	3e 89       	ldd	r19, Y+22	; 0x16
    1706:	02 0f       	add	r16, r18
    1708:	13 1f       	adc	r17, r19
    170a:	1e a3       	std	Y+38, r17	; 0x26
    170c:	0d a3       	std	Y+37, r16	; 0x25
    170e:	d8 01       	movw	r26, r16
    1710:	4c 91       	ld	r20, X
    1712:	11 96       	adiw	r26, 0x01	; 1
    1714:	5c 91       	ld	r21, X
    1716:	11 97       	sbiw	r26, 0x01	; 1
    1718:	12 96       	adiw	r26, 0x02	; 2
    171a:	8c 91       	ld	r24, X
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	a0 e0       	ldi	r26, 0x00	; 0
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	dc 01       	movw	r26, r24
    1724:	99 27       	eor	r25, r25
    1726:	88 27       	eor	r24, r24
    1728:	95 2b       	or	r25, r21
    172a:	84 2b       	or	r24, r20
    172c:	f8 01       	movw	r30, r16
    172e:	43 81       	ldd	r20, Z+3	; 0x03
    1730:	8c 01       	movw	r16, r24
    1732:	9d 01       	movw	r18, r26
    1734:	34 2b       	or	r19, r20
    1736:	09 a7       	std	Y+41, r16	; 0x29
    1738:	1a a7       	std	Y+42, r17	; 0x2a
    173a:	2b a7       	std	Y+43, r18	; 0x2b
    173c:	3c a7       	std	Y+44, r19	; 0x2c
    173e:	0d 89       	ldd	r16, Y+21	; 0x15
    1740:	1e 89       	ldd	r17, Y+22	; 0x16
    1742:	0c 5f       	subi	r16, 0xFC	; 252
    1744:	1f 4f       	sbci	r17, 0xFF	; 255
    1746:	ef 85       	ldd	r30, Y+15	; 0x0f
    1748:	f8 89       	ldd	r31, Y+16	; 0x10
    174a:	84 85       	ldd	r24, Z+12	; 0x0c
    174c:	95 85       	ldd	r25, Z+13	; 0x0d
    174e:	a6 85       	ldd	r26, Z+14	; 0x0e
    1750:	b7 85       	ldd	r27, Z+15	; 0x0f
    1752:	29 a5       	ldd	r18, Y+41	; 0x29
    1754:	3a a5       	ldd	r19, Y+42	; 0x2a
    1756:	4b a5       	ldd	r20, Y+43	; 0x2b
    1758:	5c a5       	ldd	r21, Y+44	; 0x2c
    175a:	82 17       	cp	r24, r18
    175c:	93 07       	cpc	r25, r19
    175e:	a4 07       	cpc	r26, r20
    1760:	b5 07       	cpc	r27, r21
    1762:	78 f4       	brcc	.+30     	; 0x1782 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x88c>
    1764:	b9 01       	movw	r22, r18
    1766:	66 0f       	add	r22, r22
    1768:	77 1f       	adc	r23, r23
    176a:	66 0f       	add	r22, r22
    176c:	77 1f       	adc	r23, r23
    176e:	84 89       	ldd	r24, Z+20	; 0x14
    1770:	95 89       	ldd	r25, Z+21	; 0x15
    1772:	0e 94 0e 1a 	call	0x341c	; 0x341c <realloc>
    1776:	af 85       	ldd	r26, Y+15	; 0x0f
    1778:	b8 89       	ldd	r27, Y+16	; 0x10
    177a:	55 96       	adiw	r26, 0x15	; 21
    177c:	9c 93       	st	X, r25
    177e:	8e 93       	st	-X, r24
    1780:	54 97       	sbiw	r26, 0x14	; 20
    1782:	29 a5       	ldd	r18, Y+41	; 0x29
    1784:	3a a5       	ldd	r19, Y+42	; 0x2a
    1786:	4b a5       	ldd	r20, Y+43	; 0x2b
    1788:	5c a5       	ldd	r21, Y+44	; 0x2c
    178a:	af 85       	ldd	r26, Y+15	; 0x0f
    178c:	b8 89       	ldd	r27, Y+16	; 0x10
    178e:	1c 96       	adiw	r26, 0x0c	; 12
    1790:	2d 93       	st	X+, r18
    1792:	3d 93       	st	X+, r19
    1794:	4d 93       	st	X+, r20
    1796:	5c 93       	st	X, r21
    1798:	1f 97       	sbiw	r26, 0x0f	; 15
    179a:	23 2b       	or	r18, r19
    179c:	24 2b       	or	r18, r20
    179e:	25 2b       	or	r18, r21
    17a0:	09 f4       	brne	.+2      	; 0x17a4 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x8ae>
    17a2:	61 c0       	rjmp	.+194    	; 0x1866 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x970>
    17a4:	ed a1       	ldd	r30, Y+37	; 0x25
    17a6:	fe a1       	ldd	r31, Y+38	; 0x26
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	40 e0       	ldi	r20, 0x00	; 0
    17ae:	50 e0       	ldi	r21, 0x00	; 0
    17b0:	ba 01       	movw	r22, r20
    17b2:	fa a7       	std	Y+42, r31	; 0x2a
    17b4:	e9 a7       	std	Y+41, r30	; 0x29
    17b6:	fe 8a       	std	Y+22, r15	; 0x16
    17b8:	ed 8a       	std	Y+21, r14	; 0x15
    17ba:	8f a6       	std	Y+47, r8	; 0x2f
    17bc:	98 aa       	std	Y+48, r9	; 0x30
    17be:	a9 aa       	std	Y+49, r10	; 0x31
    17c0:	ba aa       	std	Y+50, r11	; 0x32
    17c2:	e9 a5       	ldd	r30, Y+41	; 0x29
    17c4:	fa a5       	ldd	r31, Y+42	; 0x2a
    17c6:	f5 80       	ldd	r15, Z+5	; 0x05
    17c8:	86 81       	ldd	r24, Z+6	; 0x06
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	a0 e0       	ldi	r26, 0x00	; 0
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	dc 01       	movw	r26, r24
    17d2:	99 27       	eor	r25, r25
    17d4:	88 27       	eor	r24, r24
    17d6:	9f 29       	or	r25, r15
    17d8:	f4 80       	ldd	r15, Z+4	; 0x04
    17da:	8f 29       	or	r24, r15
    17dc:	f7 80       	ldd	r15, Z+7	; 0x07
    17de:	4c 01       	movw	r8, r24
    17e0:	5d 01       	movw	r10, r26
    17e2:	bf 28       	or	r11, r15
    17e4:	8d a2       	std	Y+37, r8	; 0x25
    17e6:	9e a2       	std	Y+38, r9	; 0x26
    17e8:	af a2       	std	Y+39, r10	; 0x27
    17ea:	b8 a6       	std	Y+40, r11	; 0x28
    17ec:	af 85       	ldd	r26, Y+15	; 0x0f
    17ee:	b8 89       	ldd	r27, Y+16	; 0x10
    17f0:	50 96       	adiw	r26, 0x10	; 16
    17f2:	8d 92       	st	X+, r8
    17f4:	9d 92       	st	X+, r9
    17f6:	ad 92       	st	X+, r10
    17f8:	bc 92       	st	X, r11
    17fa:	53 97       	sbiw	r26, 0x13	; 19
    17fc:	0c 5f       	subi	r16, 0xFC	; 252
    17fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1800:	54 96       	adiw	r26, 0x14	; 20
    1802:	ed 90       	ld	r14, X+
    1804:	fc 90       	ld	r15, X
    1806:	55 97       	sbiw	r26, 0x15	; 21
    1808:	e2 0e       	add	r14, r18
    180a:	f3 1e       	adc	r15, r19
    180c:	e9 8d       	ldd	r30, Y+25	; 0x19
    180e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1810:	80 81       	ld	r24, Z
    1812:	91 81       	ldd	r25, Z+1	; 0x01
    1814:	d7 01       	movw	r26, r14
    1816:	11 96       	adiw	r26, 0x01	; 1
    1818:	9c 93       	st	X, r25
    181a:	8e 93       	st	-X, r24
    181c:	82 81       	ldd	r24, Z+2	; 0x02
    181e:	93 81       	ldd	r25, Z+3	; 0x03
    1820:	13 96       	adiw	r26, 0x03	; 3
    1822:	9c 93       	st	X, r25
    1824:	8e 93       	st	-X, r24
    1826:	12 97       	sbiw	r26, 0x02	; 2
    1828:	4f 5f       	subi	r20, 0xFF	; 255
    182a:	5f 4f       	sbci	r21, 0xFF	; 255
    182c:	6f 4f       	sbci	r22, 0xFF	; 255
    182e:	7f 4f       	sbci	r23, 0xFF	; 255
    1830:	2c 5f       	subi	r18, 0xFC	; 252
    1832:	3f 4f       	sbci	r19, 0xFF	; 255
    1834:	e9 a5       	ldd	r30, Y+41	; 0x29
    1836:	fa a5       	ldd	r31, Y+42	; 0x2a
    1838:	34 96       	adiw	r30, 0x04	; 4
    183a:	fa a7       	std	Y+42, r31	; 0x2a
    183c:	e9 a7       	std	Y+41, r30	; 0x29
    183e:	af 85       	ldd	r26, Y+15	; 0x0f
    1840:	b8 89       	ldd	r27, Y+16	; 0x10
    1842:	1c 96       	adiw	r26, 0x0c	; 12
    1844:	8d 90       	ld	r8, X+
    1846:	9d 90       	ld	r9, X+
    1848:	ad 90       	ld	r10, X+
    184a:	bc 90       	ld	r11, X
    184c:	1f 97       	sbiw	r26, 0x0f	; 15
    184e:	48 15       	cp	r20, r8
    1850:	59 05       	cpc	r21, r9
    1852:	6a 05       	cpc	r22, r10
    1854:	7b 05       	cpc	r23, r11
    1856:	08 f4       	brcc	.+2      	; 0x185a <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x964>
    1858:	b4 cf       	rjmp	.-152    	; 0x17c2 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x8cc>
    185a:	ed 88       	ldd	r14, Y+21	; 0x15
    185c:	fe 88       	ldd	r15, Y+22	; 0x16
    185e:	8f a4       	ldd	r8, Y+47	; 0x2f
    1860:	98 a8       	ldd	r9, Y+48	; 0x30
    1862:	a9 a8       	ldd	r10, Y+49	; 0x31
    1864:	ba a8       	ldd	r11, Y+50	; 0x32
    1866:	e9 a1       	ldd	r30, Y+33	; 0x21
    1868:	fa a1       	ldd	r31, Y+34	; 0x22
    186a:	e0 0f       	add	r30, r16
    186c:	f1 1f       	adc	r31, r17
    186e:	20 81       	ld	r18, Z
    1870:	31 81       	ldd	r19, Z+1	; 0x01
    1872:	82 81       	ldd	r24, Z+2	; 0x02
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	a0 e0       	ldi	r26, 0x00	; 0
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	dc 01       	movw	r26, r24
    187c:	99 27       	eor	r25, r25
    187e:	88 27       	eor	r24, r24
    1880:	93 2b       	or	r25, r19
    1882:	82 2b       	or	r24, r18
    1884:	23 81       	ldd	r18, Z+3	; 0x03
    1886:	ac 01       	movw	r20, r24
    1888:	bd 01       	movw	r22, r26
    188a:	72 2b       	or	r23, r18
    188c:	4d 8b       	std	Y+21, r20	; 0x15
    188e:	5e 8b       	std	Y+22, r21	; 0x16
    1890:	6f 8b       	std	Y+23, r22	; 0x17
    1892:	78 8f       	std	Y+24, r23	; 0x18
    1894:	0c 5f       	subi	r16, 0xFC	; 252
    1896:	1f 4f       	sbci	r17, 0xFF	; 255
    1898:	ef 85       	ldd	r30, Y+15	; 0x0f
    189a:	f8 89       	ldd	r31, Y+16	; 0x10
    189c:	86 89       	ldd	r24, Z+22	; 0x16
    189e:	97 89       	ldd	r25, Z+23	; 0x17
    18a0:	a0 8d       	ldd	r26, Z+24	; 0x18
    18a2:	b1 8d       	ldd	r27, Z+25	; 0x19
    18a4:	84 17       	cp	r24, r20
    18a6:	95 07       	cpc	r25, r21
    18a8:	a6 07       	cpc	r26, r22
    18aa:	b7 07       	cpc	r27, r23
    18ac:	68 f4       	brcc	.+26     	; 0x18c8 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9d2>
    18ae:	ba 01       	movw	r22, r20
    18b0:	66 0f       	add	r22, r22
    18b2:	77 1f       	adc	r23, r23
    18b4:	84 8d       	ldd	r24, Z+28	; 0x1c
    18b6:	95 8d       	ldd	r25, Z+29	; 0x1d
    18b8:	0e 94 0e 1a 	call	0x341c	; 0x341c <realloc>
    18bc:	af 85       	ldd	r26, Y+15	; 0x0f
    18be:	b8 89       	ldd	r27, Y+16	; 0x10
    18c0:	5d 96       	adiw	r26, 0x1d	; 29
    18c2:	9c 93       	st	X, r25
    18c4:	8e 93       	st	-X, r24
    18c6:	5c 97       	sbiw	r26, 0x1c	; 28
    18c8:	2d 89       	ldd	r18, Y+21	; 0x15
    18ca:	3e 89       	ldd	r19, Y+22	; 0x16
    18cc:	4f 89       	ldd	r20, Y+23	; 0x17
    18ce:	58 8d       	ldd	r21, Y+24	; 0x18
    18d0:	af 85       	ldd	r26, Y+15	; 0x0f
    18d2:	b8 89       	ldd	r27, Y+16	; 0x10
    18d4:	56 96       	adiw	r26, 0x16	; 22
    18d6:	2d 93       	st	X+, r18
    18d8:	3d 93       	st	X+, r19
    18da:	4d 93       	st	X+, r20
    18dc:	5c 93       	st	X, r21
    18de:	59 97       	sbiw	r26, 0x19	; 25
    18e0:	23 2b       	or	r18, r19
    18e2:	24 2b       	or	r18, r20
    18e4:	25 2b       	or	r18, r21
    18e6:	09 f4       	brne	.+2      	; 0x18ea <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9f4>
    18e8:	96 c0       	rjmp	.+300    	; 0x1a16 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xb20>
    18ea:	1a a6       	std	Y+42, r1	; 0x2a
    18ec:	19 a6       	std	Y+41, r1	; 0x29
    18ee:	1d a2       	std	Y+37, r1	; 0x25
    18f0:	1e a2       	std	Y+38, r1	; 0x26
    18f2:	1f a2       	std	Y+39, r1	; 0x27
    18f4:	18 a6       	std	Y+40, r1	; 0x28
    18f6:	1e a7       	std	Y+46, r17	; 0x2e
    18f8:	0d a7       	std	Y+45, r16	; 0x2d
    18fa:	e9 a1       	ldd	r30, Y+33	; 0x21
    18fc:	fa a1       	ldd	r31, Y+34	; 0x22
    18fe:	e0 0f       	add	r30, r16
    1900:	f1 1f       	adc	r31, r17
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	1d 8a       	std	Y+21, r1	; 0x15
    1908:	1e 8a       	std	Y+22, r1	; 0x16
    190a:	1f 8a       	std	Y+23, r1	; 0x17
    190c:	18 8e       	std	Y+24, r1	; 0x18
    190e:	40 e0       	ldi	r20, 0x00	; 0
    1910:	50 e0       	ldi	r21, 0x00	; 0
    1912:	ba 01       	movw	r22, r20
    1914:	81 91       	ld	r24, Z+
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	02 2e       	mov	r0, r18
    191a:	02 c0       	rjmp	.+4      	; 0x1920 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xa2a>
    191c:	88 0f       	add	r24, r24
    191e:	99 1f       	adc	r25, r25
    1920:	0a 94       	dec	r0
    1922:	e2 f7       	brpl	.-8      	; 0x191c <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xa26>
    1924:	09 2e       	mov	r0, r25
    1926:	00 0c       	add	r0, r0
    1928:	aa 0b       	sbc	r26, r26
    192a:	bb 0b       	sbc	r27, r27
    192c:	48 2b       	or	r20, r24
    192e:	59 2b       	or	r21, r25
    1930:	6a 2b       	or	r22, r26
    1932:	7b 2b       	or	r23, r27
    1934:	28 5f       	subi	r18, 0xF8	; 248
    1936:	3f 4f       	sbci	r19, 0xFF	; 255
    1938:	20 32       	cpi	r18, 0x20	; 32
    193a:	31 05       	cpc	r19, r1
    193c:	59 f7       	brne	.-42     	; 0x1914 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xa1e>
    193e:	4d 8b       	std	Y+21, r20	; 0x15
    1940:	5e 8b       	std	Y+22, r21	; 0x16
    1942:	6f 8b       	std	Y+23, r22	; 0x17
    1944:	78 8f       	std	Y+24, r23	; 0x18
    1946:	d8 01       	movw	r26, r16
    1948:	14 96       	adiw	r26, 0x04	; 4
    194a:	8d 01       	movw	r16, r26
    194c:	0b 2e       	mov	r0, r27
    194e:	00 0c       	add	r0, r0
    1950:	22 0b       	sbc	r18, r18
    1952:	33 0b       	sbc	r19, r19
    1954:	04 0f       	add	r16, r20
    1956:	15 1f       	adc	r17, r21
    1958:	26 1f       	adc	r18, r22
    195a:	37 1f       	adc	r19, r23
    195c:	ad 01       	movw	r20, r26
    195e:	60 e0       	ldi	r22, 0x00	; 0
    1960:	70 e0       	ldi	r23, 0x00	; 0
    1962:	40 17       	cp	r20, r16
    1964:	51 07       	cpc	r21, r17
    1966:	62 07       	cpc	r22, r18
    1968:	73 07       	cpc	r23, r19
    196a:	98 f4       	brcc	.+38     	; 0x1992 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xa9c>
    196c:	ed a5       	ldd	r30, Y+45	; 0x2d
    196e:	fe a5       	ldd	r31, Y+46	; 0x2e
    1970:	33 96       	adiw	r30, 0x03	; 3
    1972:	49 a1       	ldd	r20, Y+33	; 0x21
    1974:	5a a1       	ldd	r21, Y+34	; 0x22
    1976:	e4 0f       	add	r30, r20
    1978:	f5 1f       	adc	r31, r21
    197a:	cd 01       	movw	r24, r26
    197c:	41 81       	ldd	r20, Z+1	; 0x01
    197e:	41 93       	st	Z+, r20
    1980:	01 96       	adiw	r24, 0x01	; 1
    1982:	ac 01       	movw	r20, r24
    1984:	60 e0       	ldi	r22, 0x00	; 0
    1986:	70 e0       	ldi	r23, 0x00	; 0
    1988:	40 17       	cp	r20, r16
    198a:	51 07       	cpc	r21, r17
    198c:	62 07       	cpc	r22, r18
    198e:	73 07       	cpc	r23, r19
    1990:	a8 f3       	brcs	.-22     	; 0x197c <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xa86>
    1992:	0d 89       	ldd	r16, Y+21	; 0x15
    1994:	1e 89       	ldd	r17, Y+22	; 0x16
    1996:	0a 0f       	add	r16, r26
    1998:	1b 1f       	adc	r17, r27
    199a:	e9 a1       	ldd	r30, Y+33	; 0x21
    199c:	fa a1       	ldd	r31, Y+34	; 0x22
    199e:	e0 0f       	add	r30, r16
    19a0:	f1 1f       	adc	r31, r17
    19a2:	31 97       	sbiw	r30, 0x01	; 1
    19a4:	10 82       	st	Z, r1
    19a6:	11 97       	sbiw	r26, 0x01	; 1
    19a8:	69 a1       	ldd	r22, Y+33	; 0x21
    19aa:	7a a1       	ldd	r23, Y+34	; 0x22
    19ac:	a6 0f       	add	r26, r22
    19ae:	b7 1f       	adc	r27, r23
    19b0:	ef 85       	ldd	r30, Y+15	; 0x0f
    19b2:	f8 89       	ldd	r31, Y+16	; 0x10
    19b4:	b3 8f       	std	Z+27, r27	; 0x1b
    19b6:	a2 8f       	std	Z+26, r26	; 0x1a
    19b8:	04 8c       	ldd	r0, Z+28	; 0x1c
    19ba:	f5 8d       	ldd	r31, Z+29	; 0x1d
    19bc:	e0 2d       	mov	r30, r0
    19be:	29 a5       	ldd	r18, Y+41	; 0x29
    19c0:	3a a5       	ldd	r19, Y+42	; 0x2a
    19c2:	e2 0f       	add	r30, r18
    19c4:	f3 1f       	adc	r31, r19
    19c6:	ad 8d       	ldd	r26, Y+29	; 0x1d
    19c8:	be 8d       	ldd	r27, Y+30	; 0x1e
    19ca:	8d 91       	ld	r24, X+
    19cc:	9c 91       	ld	r25, X
    19ce:	91 83       	std	Z+1, r25	; 0x01
    19d0:	80 83       	st	Z, r24
    19d2:	2d a1       	ldd	r18, Y+37	; 0x25
    19d4:	3e a1       	ldd	r19, Y+38	; 0x26
    19d6:	4f a1       	ldd	r20, Y+39	; 0x27
    19d8:	58 a5       	ldd	r21, Y+40	; 0x28
    19da:	2f 5f       	subi	r18, 0xFF	; 255
    19dc:	3f 4f       	sbci	r19, 0xFF	; 255
    19de:	4f 4f       	sbci	r20, 0xFF	; 255
    19e0:	5f 4f       	sbci	r21, 0xFF	; 255
    19e2:	2d a3       	std	Y+37, r18	; 0x25
    19e4:	3e a3       	std	Y+38, r19	; 0x26
    19e6:	4f a3       	std	Y+39, r20	; 0x27
    19e8:	58 a7       	std	Y+40, r21	; 0x28
    19ea:	49 a5       	ldd	r20, Y+41	; 0x29
    19ec:	5a a5       	ldd	r21, Y+42	; 0x2a
    19ee:	4e 5f       	subi	r20, 0xFE	; 254
    19f0:	5f 4f       	sbci	r21, 0xFF	; 255
    19f2:	5a a7       	std	Y+42, r21	; 0x2a
    19f4:	49 a7       	std	Y+41, r20	; 0x29
    19f6:	ef 85       	ldd	r30, Y+15	; 0x0f
    19f8:	f8 89       	ldd	r31, Y+16	; 0x10
    19fa:	86 89       	ldd	r24, Z+22	; 0x16
    19fc:	97 89       	ldd	r25, Z+23	; 0x17
    19fe:	a0 8d       	ldd	r26, Z+24	; 0x18
    1a00:	b1 8d       	ldd	r27, Z+25	; 0x19
    1a02:	2d a1       	ldd	r18, Y+37	; 0x25
    1a04:	3e a1       	ldd	r19, Y+38	; 0x26
    1a06:	4f a1       	ldd	r20, Y+39	; 0x27
    1a08:	58 a5       	ldd	r21, Y+40	; 0x28
    1a0a:	28 17       	cp	r18, r24
    1a0c:	39 07       	cpc	r19, r25
    1a0e:	4a 07       	cpc	r20, r26
    1a10:	5b 07       	cpc	r21, r27
    1a12:	08 f4       	brcc	.+2      	; 0x1a16 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xb20>
    1a14:	70 cf       	rjmp	.-288    	; 0x18f6 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xa00>
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	af 8d       	ldd	r26, Y+31	; 0x1f
    1a1a:	b8 a1       	ldd	r27, Y+32	; 0x20
    1a1c:	8c 93       	st	X, r24
    1a1e:	e8 ca       	rjmp	.-2608   	; 0xff0 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfa>
    1a20:	8b 30       	cpi	r24, 0x0B	; 11
    1a22:	91 05       	cpc	r25, r1
    1a24:	21 f4       	brne	.+8      	; 0x1a2e <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xb38>
    1a26:	e9 89       	ldd	r30, Y+17	; 0x11
    1a28:	fa 89       	ldd	r31, Y+18	; 0x12
    1a2a:	10 82       	st	Z, r1
    1a2c:	e1 ca       	rjmp	.-2622   	; 0xff0 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfa>
    1a2e:	fc 01       	movw	r30, r24
    1a30:	e4 56       	subi	r30, 0x64	; 100
    1a32:	f1 09       	sbc	r31, r1
    1a34:	ee 0f       	add	r30, r30
    1a36:	ff 1f       	adc	r31, r31
    1a38:	e2 0d       	add	r30, r2
    1a3a:	f3 1d       	adc	r31, r3
    1a3c:	eb 5b       	subi	r30, 0xBB	; 187
    1a3e:	fb 4f       	sbci	r31, 0xFB	; 251
    1a40:	80 81       	ld	r24, Z
    1a42:	91 81       	ldd	r25, Z+1	; 0x01
    1a44:	00 97       	sbiw	r24, 0x00	; 0
    1a46:	09 f4       	brne	.+2      	; 0x1a4a <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xb54>
    1a48:	d3 ca       	rjmp	.-2650   	; 0xff0 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfa>
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	ed 91       	ld	r30, X+
    1a4e:	fc 91       	ld	r31, X
    1a50:	01 90       	ld	r0, Z+
    1a52:	f0 81       	ld	r31, Z
    1a54:	e0 2d       	mov	r30, r0
    1a56:	b1 01       	movw	r22, r2
    1a58:	6d 5e       	subi	r22, 0xED	; 237
    1a5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a5c:	09 95       	icall
    1a5e:	c8 ca       	rjmp	.-2672   	; 0xff0 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfa>
    1a60:	f1 01       	movw	r30, r2
    1a62:	ef 57       	subi	r30, 0x7F	; 127
    1a64:	fb 4f       	sbci	r31, 0xFB	; 251
    1a66:	80 81       	ld	r24, Z
    1a68:	88 23       	and	r24, r24
    1a6a:	f1 f1       	breq	.+124    	; 0x1ae8 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xbf2>
    1a6c:	31 96       	adiw	r30, 0x01	; 1
    1a6e:	80 81       	ld	r24, Z
    1a70:	91 81       	ldd	r25, Z+1	; 0x01
    1a72:	a2 81       	ldd	r26, Z+2	; 0x02
    1a74:	b3 81       	ldd	r27, Z+3	; 0x03
    1a76:	53 01       	movw	r10, r6
    1a78:	42 01       	movw	r8, r4
    1a7a:	88 1a       	sub	r8, r24
    1a7c:	99 0a       	sbc	r9, r25
    1a7e:	aa 0a       	sbc	r10, r26
    1a80:	bb 0a       	sbc	r11, r27
    1a82:	05 ec       	ldi	r16, 0xC5	; 197
    1a84:	80 16       	cp	r8, r16
    1a86:	09 e0       	ldi	r16, 0x09	; 9
    1a88:	90 06       	cpc	r9, r16
    1a8a:	a1 04       	cpc	r10, r1
    1a8c:	b1 04       	cpc	r11, r1
    1a8e:	78 f1       	brcs	.+94     	; 0x1aee <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xbf8>
    1a90:	8b ea       	ldi	r24, 0xAB	; 171
    1a92:	91 e0       	ldi	r25, 0x01	; 1
    1a94:	9a 83       	std	Y+2, r25	; 0x02
    1a96:	89 83       	std	Y+1, r24	; 0x01
    1a98:	1b 82       	std	Y+3, r1	; 0x03
    1a9a:	1c 82       	std	Y+4, r1	; 0x04
    1a9c:	1d 82       	std	Y+5, r1	; 0x05
    1a9e:	1e 82       	std	Y+6, r1	; 0x06
    1aa0:	1f 82       	std	Y+7, r1	; 0x07
    1aa2:	18 86       	std	Y+8, r1	; 0x08
    1aa4:	19 86       	std	Y+9, r1	; 0x09
    1aa6:	1a 86       	std	Y+10, r1	; 0x0a
    1aa8:	d1 01       	movw	r26, r2
    1aaa:	ed 91       	ld	r30, X+
    1aac:	fc 91       	ld	r31, X
    1aae:	01 90       	ld	r0, Z+
    1ab0:	f0 81       	ld	r31, Z
    1ab2:	e0 2d       	mov	r30, r0
    1ab4:	ae 01       	movw	r20, r28
    1ab6:	4f 5f       	subi	r20, 0xFF	; 255
    1ab8:	5f 4f       	sbci	r21, 0xFF	; 255
    1aba:	6a e0       	ldi	r22, 0x0A	; 10
    1abc:	70 e0       	ldi	r23, 0x00	; 0
    1abe:	c1 01       	movw	r24, r2
    1ac0:	09 95       	icall
    1ac2:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <avr_time_now>
    1ac6:	f1 01       	movw	r30, r2
    1ac8:	63 83       	std	Z+3, r22	; 0x03
    1aca:	74 83       	std	Z+4, r23	; 0x04
    1acc:	85 83       	std	Z+5, r24	; 0x05
    1ace:	96 83       	std	Z+6, r25	; 0x06
    1ad0:	ee 57       	subi	r30, 0x7E	; 126
    1ad2:	fb 4f       	sbci	r31, 0xFB	; 251
    1ad4:	40 82       	st	Z, r4
    1ad6:	51 82       	std	Z+1, r5	; 0x01
    1ad8:	62 82       	std	Z+2, r6	; 0x02
    1ada:	73 82       	std	Z+3, r7	; 0x03
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	08 c0       	rjmp	.+16     	; 0x1af2 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xbfc>
    1ae2:	8e ef       	ldi	r24, 0xFE	; 254
    1ae4:	9f ef       	ldi	r25, 0xFF	; 255
    1ae6:	05 c0       	rjmp	.+10     	; 0x1af2 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xbfc>
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	02 c0       	rjmp	.+4      	; 0x1af2 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xbfc>
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	e2 96       	adiw	r28, 0x32	; 50
    1af4:	0f b6       	in	r0, 0x3f	; 63
    1af6:	f8 94       	cli
    1af8:	de bf       	out	0x3e, r29	; 62
    1afa:	0f be       	out	0x3f, r0	; 63
    1afc:	cd bf       	out	0x3d, r28	; 61
    1afe:	df 91       	pop	r29
    1b00:	cf 91       	pop	r28
    1b02:	1f 91       	pop	r17
    1b04:	0f 91       	pop	r16
    1b06:	ff 90       	pop	r15
    1b08:	ef 90       	pop	r14
    1b0a:	df 90       	pop	r13
    1b0c:	cf 90       	pop	r12
    1b0e:	bf 90       	pop	r11
    1b10:	af 90       	pop	r10
    1b12:	9f 90       	pop	r9
    1b14:	8f 90       	pop	r8
    1b16:	7f 90       	pop	r7
    1b18:	6f 90       	pop	r6
    1b1a:	5f 90       	pop	r5
    1b1c:	4f 90       	pop	r4
    1b1e:	3f 90       	pop	r3
    1b20:	2f 90       	pop	r2
    1b22:	08 95       	ret

00001b24 <main>:
ros::Subscriber<std_msgs::UInt16> sub("MPC_velocity", &SpeedCb );



int main()
{
    1b24:	cf 93       	push	r28
    1b26:	df 93       	push	r29
    1b28:	cd b7       	in	r28, 0x3d	; 61
    1b2a:	de b7       	in	r29, 0x3e	; 62
    1b2c:	6e 97       	sbiw	r28, 0x1e	; 30
    1b2e:	0f b6       	in	r0, 0x3f	; 63
    1b30:	f8 94       	cli
    1b32:	de bf       	out	0x3e, r29	; 62
    1b34:	0f be       	out	0x3f, r0	; 63
    1b36:	cd bf       	out	0x3d, r28	; 61
	/* Set Interrupt pin to input */
	DIO_VidSetPinDirection(PORTD, PIN2, INPUT);
    1b38:	40 e0       	ldi	r20, 0x00	; 0
    1b3a:	62 e0       	ldi	r22, 0x02	; 2
    1b3c:	83 e0       	ldi	r24, 0x03	; 3
    1b3e:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <DIO_VidSetPinDirection>
	/* active pull up resistor for encoder pin */
	DIO_VidSetPinValue(PORTD, PIN2, HIGH);
    1b42:	4f ef       	ldi	r20, 0xFF	; 255
    1b44:	62 e0       	ldi	r22, 0x02	; 2
    1b46:	83 e0       	ldi	r24, 0x03	; 3
    1b48:	0e 94 33 16 	call	0x2c66	; 0x2c66 <DIO_VidSetPinValue>
	DIO_VidSetPinDirection(PORTD, PIN5, OUTPUT);
    1b4c:	4f ef       	ldi	r20, 0xFF	; 255
    1b4e:	65 e0       	ldi	r22, 0x05	; 5
    1b50:	83 e0       	ldi	r24, 0x03	; 3
    1b52:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <DIO_VidSetPinDirection>

		
	/* INT0 initialization for rising edge */
	INT0_Init(Rising_Edge);
    1b56:	83 e0       	ldi	r24, 0x03	; 3
    1b58:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <INT0_Init>

	/* set timer_0 prescaler to 1024 and init ticks to 28 to have 0.5 s sampling time (OVF = 0.0218 s) */
	TIM0_OVF_Init(TIMER_PRESCALER_1024, Init_ticks);
    1b5c:	6c e6       	ldi	r22, 0x6C	; 108
    1b5e:	85 e0       	ldi	r24, 0x05	; 5
    1b60:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <TIM0_OVF_Init>
				"out __SREG__,__tmp_reg__"   "\n\t"
				: [TEMPREG] "=d" (temp_reg)
				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
				: "r0"
		);
    1b64:	0f b6       	in	r0, 0x3f	; 63
    1b66:	f8 94       	cli
    1b68:	a8 95       	wdr
    1b6a:	81 b5       	in	r24, 0x21	; 33
    1b6c:	88 61       	ori	r24, 0x18	; 24
    1b6e:	81 bd       	out	0x21, r24	; 33
    1b70:	11 bc       	out	0x21, r1	; 33
    1b72:	0f be       	out	0x3f, r0	; 63

	// Initialize the AVR
	void init()
	{
		wdt_disable();
		avr_time_init();
    1b74:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <avr_time_init>
		avr_uart_init();
    1b78:	0e 94 99 15 	call	0x2b32	; 0x2b32 <avr_uart_init>
		sei();
    1b7c:	78 94       	sei

  /* Start serial, initialize buffers */
  void initNode()
  {
    hardware_.init();
    mode_ = 0;
    1b7e:	10 92 aa 06 	sts	0x06AA, r1	; 0x8006aa <nh+0x478>
    1b82:	10 92 a9 06 	sts	0x06A9, r1	; 0x8006a9 <nh+0x477>
    bytes_ = 0;
    1b86:	10 92 ac 06 	sts	0x06AC, r1	; 0x8006ac <nh+0x47a>
    1b8a:	10 92 ab 06 	sts	0x06AB, r1	; 0x8006ab <nh+0x479>
    index_ = 0;
    1b8e:	10 92 b0 06 	sts	0x06B0, r1	; 0x8006b0 <nh+0x47e>
    1b92:	10 92 af 06 	sts	0x06AF, r1	; 0x8006af <nh+0x47d>
    topic_ = 0;
    1b96:	10 92 ae 06 	sts	0x06AE, r1	; 0x8006ae <nh+0x47c>
    1b9a:	10 92 ad 06 	sts	0x06AD, r1	; 0x8006ad <nh+0x47b>
  /* Register a new publisher */
  bool advertise(Publisher & p)
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
    {
      if (publishers[i] == 0) // empty slot
    1b9e:	80 91 45 06 	lds	r24, 0x0645	; 0x800645 <nh+0x413>
    1ba2:	90 91 46 06 	lds	r25, 0x0646	; 0x800646 <nh+0x414>
    1ba6:	89 2b       	or	r24, r25
    1ba8:	49 f0       	breq	.+18     	; 0x1bbc <main+0x98>
    1baa:	e7 e4       	ldi	r30, 0x47	; 71
    1bac:	f6 e0       	ldi	r31, 0x06	; 6
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    {
      if (publishers[i] == 0) // empty slot
    1bb2:	21 91       	ld	r18, Z+
    1bb4:	31 91       	ld	r19, Z+
    1bb6:	23 2b       	or	r18, r19
    1bb8:	a9 f4       	brne	.+42     	; 0x1be4 <main+0xc0>
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <main+0x9c>
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    {
      if (publishers[i] == 0) // empty slot
      {
        publishers[i] = &p;
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	aa 0f       	add	r26, r26
    1bc4:	bb 1f       	adc	r27, r27
    1bc6:	ab 5b       	subi	r26, 0xBB	; 187
    1bc8:	b9 4f       	sbci	r27, 0xF9	; 249
    1bca:	e4 e2       	ldi	r30, 0x24	; 36
    1bcc:	f2 e0       	ldi	r31, 0x02	; 2
    1bce:	ed 93       	st	X+, r30
    1bd0:	fc 93       	st	X, r31
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
    1bd2:	83 58       	subi	r24, 0x83	; 131
    1bd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd6:	95 83       	std	Z+5, r25	; 0x05
    1bd8:	84 83       	std	Z+4, r24	; 0x04
        p.nh_ = this;
    1bda:	82 e3       	ldi	r24, 0x32	; 50
    1bdc:	92 e0       	ldi	r25, 0x02	; 2
    1bde:	97 83       	std	Z+7, r25	; 0x07
    1be0:	86 83       	std	Z+6, r24	; 0x06
    1be2:	04 c0       	rjmp	.+8      	; 0x1bec <main+0xc8>
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
    1be4:	01 96       	adiw	r24, 0x01	; 1
    1be6:	89 31       	cpi	r24, 0x19	; 25
    1be8:	91 05       	cpc	r25, r1
    1bea:	19 f7       	brne	.-58     	; 0x1bb2 <main+0x8e>
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
    {
      if (subscribers[i] == 0) // empty slot
    1bec:	80 91 77 06 	lds	r24, 0x0677	; 0x800677 <nh+0x445>
    1bf0:	90 91 78 06 	lds	r25, 0x0678	; 0x800678 <nh+0x446>
    1bf4:	89 2b       	or	r24, r25
    1bf6:	49 f0       	breq	.+18     	; 0x1c0a <main+0xe6>
    1bf8:	e9 e7       	ldi	r30, 0x79	; 121
    1bfa:	f6 e0       	ldi	r31, 0x06	; 6

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    {
      if (subscribers[i] == 0) // empty slot
    1c00:	21 91       	ld	r18, Z+
    1c02:	31 91       	ld	r19, Z+
    1c04:	23 2b       	or	r18, r19
    1c06:	b9 f4       	brne	.+46     	; 0x1c36 <main+0x112>
    1c08:	02 c0       	rjmp	.+4      	; 0x1c0e <main+0xea>

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    {
      if (subscribers[i] == 0) // empty slot
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
    1c0e:	fc 01       	movw	r30, r24
    1c10:	ee 0f       	add	r30, r30
    1c12:	ff 1f       	adc	r31, r31
    1c14:	e9 58       	subi	r30, 0x89	; 137
    1c16:	f9 4f       	sbci	r31, 0xF9	; 249
    1c18:	a6 e1       	ldi	r26, 0x16	; 22
    1c1a:	b2 e0       	ldi	r27, 0x02	; 2
    1c1c:	b1 83       	std	Z+1, r27	; 0x01
    1c1e:	a0 83       	st	Z, r26
        s.id_ = i + 100;
    1c20:	8c 59       	subi	r24, 0x9C	; 156
    1c22:	9f 4f       	sbci	r25, 0xFF	; 255
    1c24:	13 96       	adiw	r26, 0x03	; 3
    1c26:	9c 93       	st	X, r25
    1c28:	8e 93       	st	-X, r24
    1c2a:	12 97       	sbiw	r26, 0x02	; 2

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
    1c2c:	1f 86       	std	Y+15, r1	; 0x0f
    1c2e:	18 8a       	std	Y+16, r1	; 0x10
    1c30:	19 8a       	std	Y+17, r1	; 0x11
    1c32:	1a 8a       	std	Y+18, r1	; 0x12
    1c34:	05 c0       	rjmp	.+10     	; 0x1c40 <main+0x11c>
    1c36:	01 96       	adiw	r24, 0x01	; 1
    1c38:	89 31       	cpi	r24, 0x19	; 25
    1c3a:	91 05       	cpc	r25, r1
    1c3c:	09 f7       	brne	.-62     	; 0x1c00 <main+0xdc>
    1c3e:	f6 cf       	rjmp	.-20     	; 0x1c2c <main+0x108>


	while(1)
	{
	// Send the message every second
	if(avr_time_now() - lasttime > 100)
    1c40:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <avr_time_now>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	4f 84       	ldd	r4, Y+15	; 0x0f
    1c4a:	58 88       	ldd	r5, Y+16	; 0x10
    1c4c:	69 88       	ldd	r6, Y+17	; 0x11
    1c4e:	7a 88       	ldd	r7, Y+18	; 0x12
    1c50:	84 19       	sub	r24, r4
    1c52:	95 09       	sbc	r25, r5
    1c54:	a6 09       	sbc	r26, r6
    1c56:	b7 09       	sbc	r27, r7
    1c58:	85 36       	cpi	r24, 0x65	; 101
    1c5a:	91 05       	cpc	r25, r1
    1c5c:	a1 05       	cpc	r26, r1
    1c5e:	b1 05       	cpc	r27, r1
    1c60:	e8 f0       	brcs	.+58     	; 0x1c9c <main+0x178>
	{
		uint_msg.data = speed_rpm;
    1c62:	80 91 e7 06 	lds	r24, 0x06E7	; 0x8006e7 <speed_rpm>
    1c66:	90 91 e8 06 	lds	r25, 0x06E8	; 0x8006e8 <speed_rpm+0x1>
    1c6a:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <uint_msg+0x3>
    1c6e:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <uint_msg+0x2>
    msg_(msg),
    endpoint_(endpoint) {};

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
    1c72:	e4 e2       	ldi	r30, 0x24	; 36
    1c74:	f2 e0       	ldi	r31, 0x02	; 2
    1c76:	86 81       	ldd	r24, Z+6	; 0x06
    1c78:	97 81       	ldd	r25, Z+7	; 0x07
    1c7a:	64 81       	ldd	r22, Z+4	; 0x04
    1c7c:	75 81       	ldd	r23, Z+5	; 0x05
    1c7e:	dc 01       	movw	r26, r24
    1c80:	ed 91       	ld	r30, X+
    1c82:	fc 91       	ld	r31, X
    1c84:	01 90       	ld	r0, Z+
    1c86:	f0 81       	ld	r31, Z
    1c88:	e0 2d       	mov	r30, r0
    1c8a:	4e e2       	ldi	r20, 0x2E	; 46
    1c8c:	52 e0       	ldi	r21, 0x02	; 2
    1c8e:	09 95       	icall
		chatter.publish(&uint_msg);
		lasttime = avr_time_now();
    1c90:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <avr_time_now>
    1c94:	6f 87       	std	Y+15, r22	; 0x0f
    1c96:	78 8b       	std	Y+16, r23	; 0x10
    1c98:	89 8b       	std	Y+17, r24	; 0x11
    1c9a:	9a 8b       	std	Y+18, r25	; 0x12


	// Returns milliseconds since start of program
	unsigned long time()
	{
		return avr_time_now();
    1c9c:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <avr_time_now>
    1ca0:	6b 01       	movw	r12, r22
    1ca2:	7c 01       	movw	r14, r24

  virtual int spinOnce()
  {
    /* restart if timed out */
    uint32_t c_time = hardware_.time();
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
    1ca4:	80 91 b8 06 	lds	r24, 0x06B8	; 0x8006b8 <nh+0x486>
    1ca8:	90 91 b9 06 	lds	r25, 0x06B9	; 0x8006b9 <nh+0x487>
    1cac:	a0 91 ba 06 	lds	r26, 0x06BA	; 0x8006ba <nh+0x488>
    1cb0:	b0 91 bb 06 	lds	r27, 0x06BB	; 0x8006bb <nh+0x489>
    1cb4:	26 01       	movw	r4, r12
    1cb6:	37 01       	movw	r6, r14
    1cb8:	48 1a       	sub	r4, r24
    1cba:	59 0a       	sbc	r5, r25
    1cbc:	6a 0a       	sbc	r6, r26
    1cbe:	7b 0a       	sbc	r7, r27
    1cc0:	29 ef       	ldi	r18, 0xF9	; 249
    1cc2:	42 16       	cp	r4, r18
    1cc4:	2a e2       	ldi	r18, 0x2A	; 42
    1cc6:	52 06       	cpc	r5, r18
    1cc8:	61 04       	cpc	r6, r1
    1cca:	71 04       	cpc	r7, r1
    1ccc:	10 f0       	brcs	.+4      	; 0x1cd2 <main+0x1ae>
    {
      configured_ = false;
    1cce:	10 92 b3 06 	sts	0x06B3, r1	; 0x8006b3 <nh+0x481>
    }

    /* reset if message has timed out */
    if (mode_ != MODE_FIRST_FF)
    1cd2:	80 91 a9 06 	lds	r24, 0x06A9	; 0x8006a9 <nh+0x477>
    1cd6:	90 91 aa 06 	lds	r25, 0x06AA	; 0x8006aa <nh+0x478>
    1cda:	89 2b       	or	r24, r25
    1cdc:	89 f0       	breq	.+34     	; 0x1d00 <main+0x1dc>
    {
      if (c_time > last_msg_timeout_time)
    1cde:	80 91 bc 06 	lds	r24, 0x06BC	; 0x8006bc <nh+0x48a>
    1ce2:	90 91 bd 06 	lds	r25, 0x06BD	; 0x8006bd <nh+0x48b>
    1ce6:	a0 91 be 06 	lds	r26, 0x06BE	; 0x8006be <nh+0x48c>
    1cea:	b0 91 bf 06 	lds	r27, 0x06BF	; 0x8006bf <nh+0x48d>
    1cee:	8c 15       	cp	r24, r12
    1cf0:	9d 05       	cpc	r25, r13
    1cf2:	ae 05       	cpc	r26, r14
    1cf4:	bf 05       	cpc	r27, r15
    1cf6:	20 f4       	brcc	.+8      	; 0x1d00 <main+0x1dc>
      {
        mode_ = MODE_FIRST_FF;
    1cf8:	10 92 aa 06 	sts	0x06AA, r1	; 0x8006aa <nh+0x478>
    1cfc:	10 92 a9 06 	sts	0x06A9, r1	; 0x8006a9 <nh+0x477>
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->floats_length);
      if(floats_lengthT > floats_length)
    1d00:	0f 2e       	mov	r0, r31
    1d02:	fd ec       	ldi	r31, 0xCD	; 205
    1d04:	2f 2e       	mov	r2, r31
    1d06:	f6 e0       	ldi	r31, 0x06	; 6
    1d08:	3f 2e       	mov	r3, r31
    1d0a:	f0 2d       	mov	r31, r0
      else if (mode_ == MODE_FIRST_FF)
      {
        if (data == 0xff)
        {
          mode_++;
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
    1d0c:	46 01       	movw	r8, r12
    1d0e:	57 01       	movw	r10, r14
    1d10:	34 e1       	ldi	r19, 0x14	; 20
    1d12:	83 0e       	add	r8, r19
    1d14:	91 1c       	adc	r9, r1
    1d16:	a1 1c       	adc	r10, r1
    1d18:	b1 1c       	adc	r11, r1

    /* while available buffer, read data */
    while (true)
    {
      // If a timeout has been specified, check how long spinOnce has been running.
      if (spin_timeout_ > 0)
    1d1a:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <nh+0xf>
    1d1e:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <nh+0x10>
    1d22:	a0 91 43 02 	lds	r26, 0x0243	; 0x800243 <nh+0x11>
    1d26:	b0 91 44 02 	lds	r27, 0x0244	; 0x800244 <nh+0x12>
    1d2a:	89 2b       	or	r24, r25
    1d2c:	8a 2b       	or	r24, r26
    1d2e:	8b 2b       	or	r24, r27
    1d30:	b1 f0       	breq	.+44     	; 0x1d5e <main+0x23a>
    1d32:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <avr_time_now>
      {
        // If the maximum processing timeout has been exceeded, exit with error.
        // The next spinOnce can continue where it left off, or optionally
        // based on the application in use, the hardware buffer could be flushed
        // and start fresh.
        if ((hardware_.time() - c_time) > spin_timeout_)
    1d36:	dc 01       	movw	r26, r24
    1d38:	cb 01       	movw	r24, r22
    1d3a:	8c 19       	sub	r24, r12
    1d3c:	9d 09       	sbc	r25, r13
    1d3e:	ae 09       	sbc	r26, r14
    1d40:	bf 09       	sbc	r27, r15
    1d42:	00 91 41 02 	lds	r16, 0x0241	; 0x800241 <nh+0xf>
    1d46:	10 91 42 02 	lds	r17, 0x0242	; 0x800242 <nh+0x10>
    1d4a:	20 91 43 02 	lds	r18, 0x0243	; 0x800243 <nh+0x11>
    1d4e:	30 91 44 02 	lds	r19, 0x0244	; 0x800244 <nh+0x12>
    1d52:	08 17       	cp	r16, r24
    1d54:	19 07       	cpc	r17, r25
    1d56:	2a 07       	cpc	r18, r26
    1d58:	3b 07       	cpc	r19, r27
    1d5a:	08 f4       	brcc	.+2      	; 0x1d5e <main+0x23a>
    1d5c:	71 cf       	rjmp	.-286    	; 0x1c40 <main+0x11c>

	// Read a byte of data from ROS connection.
	// If no data, returns -1
	int read()
	{
		return avr_uart_receive_byte();
    1d5e:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <avr_uart_receive_byte>
          // Exit the spin, processing timeout exceeded.
          return SPIN_TIMEOUT;
        }
      }
      int data = hardware_.read();
      if (data < 0)
    1d62:	99 23       	and	r25, r25
    1d64:	0c f4       	brge	.+2      	; 0x1d68 <main+0x244>
    1d66:	b6 c4       	rjmp	.+2412   	; 0x26d4 <main+0xbb0>
        break;
      checksum_ += data;
    1d68:	e1 eb       	ldi	r30, 0xB1	; 177
    1d6a:	f6 e0       	ldi	r31, 0x06	; 6
    1d6c:	20 81       	ld	r18, Z
    1d6e:	31 81       	ldd	r19, Z+1	; 0x01
    1d70:	28 0f       	add	r18, r24
    1d72:	39 1f       	adc	r19, r25
    1d74:	31 83       	std	Z+1, r19	; 0x01
    1d76:	20 83       	st	Z, r18
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
    1d78:	40 91 a9 06 	lds	r20, 0x06A9	; 0x8006a9 <nh+0x477>
    1d7c:	50 91 aa 06 	lds	r21, 0x06AA	; 0x8006aa <nh+0x478>
    1d80:	47 30       	cpi	r20, 0x07	; 7
    1d82:	51 05       	cpc	r21, r1
    1d84:	f1 f4       	brne	.+60     	; 0x1dc2 <main+0x29e>
      {
        message_in[index_++] = data;
    1d86:	ef ea       	ldi	r30, 0xAF	; 175
    1d88:	f6 e0       	ldi	r31, 0x06	; 6
    1d8a:	20 81       	ld	r18, Z
    1d8c:	31 81       	ldd	r19, Z+1	; 0x01
    1d8e:	a9 01       	movw	r20, r18
    1d90:	4f 5f       	subi	r20, 0xFF	; 255
    1d92:	5f 4f       	sbci	r21, 0xFF	; 255
    1d94:	51 83       	std	Z+1, r21	; 0x01
    1d96:	40 83       	st	Z, r20
    1d98:	f9 01       	movw	r30, r18
    1d9a:	ee 5c       	subi	r30, 0xCE	; 206
    1d9c:	fd 4f       	sbci	r31, 0xFD	; 253
    1d9e:	83 8b       	std	Z+19, r24	; 0x13
        bytes_--;
    1da0:	eb ea       	ldi	r30, 0xAB	; 171
    1da2:	f6 e0       	ldi	r31, 0x06	; 6
    1da4:	80 81       	ld	r24, Z
    1da6:	91 81       	ldd	r25, Z+1	; 0x01
    1da8:	01 97       	sbiw	r24, 0x01	; 1
    1daa:	91 83       	std	Z+1, r25	; 0x01
    1dac:	80 83       	st	Z, r24
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
    1dae:	89 2b       	or	r24, r25
    1db0:	09 f0       	breq	.+2      	; 0x1db4 <main+0x290>
    1db2:	b3 cf       	rjmp	.-154    	; 0x1d1a <main+0x1f6>
          mode_ = MODE_MSG_CHECKSUM;
    1db4:	88 e0       	ldi	r24, 0x08	; 8
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	90 93 aa 06 	sts	0x06AA, r25	; 0x8006aa <nh+0x478>
    1dbc:	80 93 a9 06 	sts	0x06A9, r24	; 0x8006a9 <nh+0x477>
    1dc0:	ac cf       	rjmp	.-168    	; 0x1d1a <main+0x1f6>
      }
      else if (mode_ == MODE_FIRST_FF)
    1dc2:	41 15       	cp	r20, r1
    1dc4:	51 05       	cpc	r21, r1
    1dc6:	19 f5       	brne	.+70     	; 0x1e0e <main+0x2ea>
      {
        if (data == 0xff)
    1dc8:	8f 3f       	cpi	r24, 0xFF	; 255
    1dca:	91 05       	cpc	r25, r1
    1dcc:	79 f4       	brne	.+30     	; 0x1dec <main+0x2c8>
        {
          mode_++;
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	90 93 aa 06 	sts	0x06AA, r25	; 0x8006aa <nh+0x478>
    1dd6:	80 93 a9 06 	sts	0x06A9, r24	; 0x8006a9 <nh+0x477>
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
    1dda:	80 92 bc 06 	sts	0x06BC, r8	; 0x8006bc <nh+0x48a>
    1dde:	90 92 bd 06 	sts	0x06BD, r9	; 0x8006bd <nh+0x48b>
    1de2:	a0 92 be 06 	sts	0x06BE, r10	; 0x8006be <nh+0x48c>
    1de6:	b0 92 bf 06 	sts	0x06BF, r11	; 0x8006bf <nh+0x48d>
    1dea:	97 cf       	rjmp	.-210    	; 0x1d1a <main+0x1f6>


	// Returns milliseconds since start of program
	unsigned long time()
	{
		return avr_time_now();
    1dec:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <avr_time_now>
        }
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	8c 19       	sub	r24, r12
    1df6:	9d 09       	sbc	r25, r13
    1df8:	ae 09       	sbc	r26, r14
    1dfa:	bf 09       	sbc	r27, r15
    1dfc:	89 38       	cpi	r24, 0x89	; 137
    1dfe:	93 41       	sbci	r25, 0x13	; 19
    1e00:	a1 05       	cpc	r26, r1
    1e02:	b1 05       	cpc	r27, r1
    1e04:	08 f4       	brcc	.+2      	; 0x1e08 <main+0x2e4>
    1e06:	89 cf       	rjmp	.-238    	; 0x1d1a <main+0x1f6>
        {
          /* We have been stuck in spinOnce too long, return error */
          configured_ = false;
    1e08:	10 92 b3 06 	sts	0x06B3, r1	; 0x8006b3 <nh+0x481>
    1e0c:	19 cf       	rjmp	.-462    	; 0x1c40 <main+0x11c>
          return SPIN_TIMEOUT;
        }
      }
      else if (mode_ == MODE_PROTOCOL_VER)
    1e0e:	41 30       	cpi	r20, 0x01	; 1
    1e10:	51 05       	cpc	r21, r1
    1e12:	a9 f5       	brne	.+106    	; 0x1e7e <main+0x35a>
      {
        if (data == PROTOCOL_VER)
    1e14:	8e 3f       	cpi	r24, 0xFE	; 254
    1e16:	91 05       	cpc	r25, r1
    1e18:	39 f4       	brne	.+14     	; 0x1e28 <main+0x304>
        {
          mode_++;
    1e1a:	82 e0       	ldi	r24, 0x02	; 2
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	90 93 aa 06 	sts	0x06AA, r25	; 0x8006aa <nh+0x478>
    1e22:	80 93 a9 06 	sts	0x06A9, r24	; 0x8006a9 <nh+0x477>
    1e26:	79 cf       	rjmp	.-270    	; 0x1d1a <main+0x1f6>
        }
        else
        {
          mode_ = MODE_FIRST_FF;
    1e28:	10 92 aa 06 	sts	0x06AA, r1	; 0x8006aa <nh+0x478>
    1e2c:	10 92 a9 06 	sts	0x06A9, r1	; 0x8006a9 <nh+0x477>
          if (configured_ == false)
    1e30:	80 91 b3 06 	lds	r24, 0x06B3	; 0x8006b3 <nh+0x481>
    1e34:	81 11       	cpse	r24, r1
    1e36:	71 cf       	rjmp	.-286    	; 0x1d1a <main+0x1f6>
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
      data()
    1e38:	8b ea       	ldi	r24, 0xAB	; 171
    1e3a:	91 e0       	ldi	r25, 0x01	; 1
    1e3c:	9a 83       	std	Y+2, r25	; 0x02
    1e3e:	89 83       	std	Y+1, r24	; 0x01
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
    1e40:	1b 82       	std	Y+3, r1	; 0x03
    1e42:	1c 82       	std	Y+4, r1	; 0x04
    1e44:	1d 82       	std	Y+5, r1	; 0x05
    1e46:	1e 82       	std	Y+6, r1	; 0x06
    1e48:	1f 82       	std	Y+7, r1	; 0x07
    1e4a:	18 86       	std	Y+8, r1	; 0x08
    1e4c:	19 86       	std	Y+9, r1	; 0x09
    1e4e:	1a 86       	std	Y+10, r1	; 0x0a
   */

  void requestSyncTime()
  {
    std_msgs::Time t;
    publish(TopicInfo::ID_TIME, &t);
    1e50:	02 e3       	ldi	r16, 0x32	; 50
    1e52:	12 e0       	ldi	r17, 0x02	; 2
    1e54:	d8 01       	movw	r26, r16
    1e56:	ed 91       	ld	r30, X+
    1e58:	fc 91       	ld	r31, X
    1e5a:	01 90       	ld	r0, Z+
    1e5c:	f0 81       	ld	r31, Z
    1e5e:	e0 2d       	mov	r30, r0
    1e60:	ae 01       	movw	r20, r28
    1e62:	4f 5f       	subi	r20, 0xFF	; 255
    1e64:	5f 4f       	sbci	r21, 0xFF	; 255
    1e66:	6a e0       	ldi	r22, 0x0A	; 10
    1e68:	70 e0       	ldi	r23, 0x00	; 0
    1e6a:	c8 01       	movw	r24, r16
    1e6c:	09 95       	icall
    1e6e:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <avr_time_now>
    rt_time = hardware_.time();
    1e72:	f8 01       	movw	r30, r16
    1e74:	63 83       	std	Z+3, r22	; 0x03
    1e76:	74 83       	std	Z+4, r23	; 0x04
    1e78:	85 83       	std	Z+5, r24	; 0x05
    1e7a:	96 83       	std	Z+6, r25	; 0x06
    1e7c:	4e cf       	rjmp	.-356    	; 0x1d1a <main+0x1f6>
          mode_ = MODE_FIRST_FF;
          if (configured_ == false)
            requestSyncTime();  /* send a msg back showing our protocol version */
        }
      }
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
    1e7e:	42 30       	cpi	r20, 0x02	; 2
    1e80:	51 05       	cpc	r21, r1
    1e82:	99 f4       	brne	.+38     	; 0x1eaa <main+0x386>
      {
        bytes_ = data;
    1e84:	90 93 ac 06 	sts	0x06AC, r25	; 0x8006ac <nh+0x47a>
    1e88:	80 93 ab 06 	sts	0x06AB, r24	; 0x8006ab <nh+0x479>
        index_ = 0;
    1e8c:	10 92 b0 06 	sts	0x06B0, r1	; 0x8006b0 <nh+0x47e>
    1e90:	10 92 af 06 	sts	0x06AF, r1	; 0x8006af <nh+0x47d>
        mode_++;
    1e94:	23 e0       	ldi	r18, 0x03	; 3
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	30 93 aa 06 	sts	0x06AA, r19	; 0x8006aa <nh+0x478>
    1e9c:	20 93 a9 06 	sts	0x06A9, r18	; 0x8006a9 <nh+0x477>
        checksum_ = data;               /* first byte for calculating size checksum */
    1ea0:	90 93 b2 06 	sts	0x06B2, r25	; 0x8006b2 <nh+0x480>
    1ea4:	80 93 b1 06 	sts	0x06B1, r24	; 0x8006b1 <nh+0x47f>
    1ea8:	38 cf       	rjmp	.-400    	; 0x1d1a <main+0x1f6>
      }
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
    1eaa:	43 30       	cpi	r20, 0x03	; 3
    1eac:	51 05       	cpc	r21, r1
    1eae:	89 f4       	brne	.+34     	; 0x1ed2 <main+0x3ae>
      {
        bytes_ += data << 8;
    1eb0:	eb ea       	ldi	r30, 0xAB	; 171
    1eb2:	f6 e0       	ldi	r31, 0x06	; 6
    1eb4:	98 2f       	mov	r25, r24
    1eb6:	88 27       	eor	r24, r24
    1eb8:	20 81       	ld	r18, Z
    1eba:	31 81       	ldd	r19, Z+1	; 0x01
    1ebc:	82 0f       	add	r24, r18
    1ebe:	93 1f       	adc	r25, r19
    1ec0:	91 83       	std	Z+1, r25	; 0x01
    1ec2:	80 83       	st	Z, r24
        mode_++;
    1ec4:	84 e0       	ldi	r24, 0x04	; 4
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	90 93 aa 06 	sts	0x06AA, r25	; 0x8006aa <nh+0x478>
    1ecc:	80 93 a9 06 	sts	0x06A9, r24	; 0x8006a9 <nh+0x477>
    1ed0:	24 cf       	rjmp	.-440    	; 0x1d1a <main+0x1f6>
      }
      else if (mode_ == MODE_SIZE_CHECKSUM)
    1ed2:	44 30       	cpi	r20, 0x04	; 4
    1ed4:	51 05       	cpc	r21, r1
    1ed6:	b9 f4       	brne	.+46     	; 0x1f06 <main+0x3e2>
      {
        if ((checksum_ % 256) == 255)
    1ed8:	30 78       	andi	r19, 0x80	; 128
    1eda:	33 23       	and	r19, r19
    1edc:	2c f4       	brge	.+10     	; 0x1ee8 <main+0x3c4>
    1ede:	21 50       	subi	r18, 0x01	; 1
    1ee0:	31 09       	sbc	r19, r1
    1ee2:	3f 6f       	ori	r19, 0xFF	; 255
    1ee4:	2f 5f       	subi	r18, 0xFF	; 255
    1ee6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee8:	2f 3f       	cpi	r18, 0xFF	; 255
    1eea:	31 05       	cpc	r19, r1
    1eec:	39 f4       	brne	.+14     	; 0x1efc <main+0x3d8>
          mode_++;
    1eee:	85 e0       	ldi	r24, 0x05	; 5
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	90 93 aa 06 	sts	0x06AA, r25	; 0x8006aa <nh+0x478>
    1ef6:	80 93 a9 06 	sts	0x06A9, r24	; 0x8006a9 <nh+0x477>
    1efa:	0f cf       	rjmp	.-482    	; 0x1d1a <main+0x1f6>
        else
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
    1efc:	10 92 aa 06 	sts	0x06AA, r1	; 0x8006aa <nh+0x478>
    1f00:	10 92 a9 06 	sts	0x06A9, r1	; 0x8006a9 <nh+0x477>
    1f04:	0a cf       	rjmp	.-492    	; 0x1d1a <main+0x1f6>
      }
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
    1f06:	45 30       	cpi	r20, 0x05	; 5
    1f08:	51 05       	cpc	r21, r1
    1f0a:	79 f4       	brne	.+30     	; 0x1f2a <main+0x406>
      {
        topic_ = data;
    1f0c:	90 93 ae 06 	sts	0x06AE, r25	; 0x8006ae <nh+0x47c>
    1f10:	80 93 ad 06 	sts	0x06AD, r24	; 0x8006ad <nh+0x47b>
        mode_++;
    1f14:	26 e0       	ldi	r18, 0x06	; 6
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	30 93 aa 06 	sts	0x06AA, r19	; 0x8006aa <nh+0x478>
    1f1c:	20 93 a9 06 	sts	0x06A9, r18	; 0x8006a9 <nh+0x477>
        checksum_ = data;               /* first byte included in checksum */
    1f20:	90 93 b2 06 	sts	0x06B2, r25	; 0x8006b2 <nh+0x480>
    1f24:	80 93 b1 06 	sts	0x06B1, r24	; 0x8006b1 <nh+0x47f>
    1f28:	f8 ce       	rjmp	.-528    	; 0x1d1a <main+0x1f6>
      }
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
    1f2a:	46 30       	cpi	r20, 0x06	; 6
    1f2c:	51 05       	cpc	r21, r1
    1f2e:	f1 f4       	brne	.+60     	; 0x1f6c <main+0x448>
      {
        topic_ += data << 8;
    1f30:	ed ea       	ldi	r30, 0xAD	; 173
    1f32:	f6 e0       	ldi	r31, 0x06	; 6
    1f34:	98 2f       	mov	r25, r24
    1f36:	88 27       	eor	r24, r24
    1f38:	20 81       	ld	r18, Z
    1f3a:	31 81       	ldd	r19, Z+1	; 0x01
    1f3c:	82 0f       	add	r24, r18
    1f3e:	93 1f       	adc	r25, r19
    1f40:	91 83       	std	Z+1, r25	; 0x01
    1f42:	80 83       	st	Z, r24
        mode_ = MODE_MESSAGE;
    1f44:	87 e0       	ldi	r24, 0x07	; 7
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	90 93 aa 06 	sts	0x06AA, r25	; 0x8006aa <nh+0x478>
    1f4c:	80 93 a9 06 	sts	0x06A9, r24	; 0x8006a9 <nh+0x477>
        if (bytes_ == 0)
    1f50:	80 91 ab 06 	lds	r24, 0x06AB	; 0x8006ab <nh+0x479>
    1f54:	90 91 ac 06 	lds	r25, 0x06AC	; 0x8006ac <nh+0x47a>
    1f58:	89 2b       	or	r24, r25
    1f5a:	09 f0       	breq	.+2      	; 0x1f5e <main+0x43a>
    1f5c:	de ce       	rjmp	.-580    	; 0x1d1a <main+0x1f6>
          mode_ = MODE_MSG_CHECKSUM;
    1f5e:	88 e0       	ldi	r24, 0x08	; 8
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	90 93 aa 06 	sts	0x06AA, r25	; 0x8006aa <nh+0x478>
    1f66:	80 93 a9 06 	sts	0x06A9, r24	; 0x8006a9 <nh+0x477>
    1f6a:	d7 ce       	rjmp	.-594    	; 0x1d1a <main+0x1f6>
      }
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
    1f6c:	48 30       	cpi	r20, 0x08	; 8
    1f6e:	51 05       	cpc	r21, r1
    1f70:	09 f0       	breq	.+2      	; 0x1f74 <main+0x450>
    1f72:	d3 ce       	rjmp	.-602    	; 0x1d1a <main+0x1f6>
      {
        mode_ = MODE_FIRST_FF;
    1f74:	10 92 aa 06 	sts	0x06AA, r1	; 0x8006aa <nh+0x478>
    1f78:	10 92 a9 06 	sts	0x06A9, r1	; 0x8006a9 <nh+0x477>
        if ((checksum_ % 256) == 255)
    1f7c:	30 78       	andi	r19, 0x80	; 128
    1f7e:	33 23       	and	r19, r19
    1f80:	2c f4       	brge	.+10     	; 0x1f8c <main+0x468>
    1f82:	21 50       	subi	r18, 0x01	; 1
    1f84:	31 09       	sbc	r19, r1
    1f86:	3f 6f       	ori	r19, 0xFF	; 255
    1f88:	2f 5f       	subi	r18, 0xFF	; 255
    1f8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f8c:	2f 3f       	cpi	r18, 0xFF	; 255
    1f8e:	31 05       	cpc	r19, r1
    1f90:	09 f0       	breq	.+2      	; 0x1f94 <main+0x470>
    1f92:	c3 ce       	rjmp	.-634    	; 0x1d1a <main+0x1f6>
        {
          if (topic_ == TopicInfo::ID_PUBLISHER)
    1f94:	80 91 ad 06 	lds	r24, 0x06AD	; 0x8006ad <nh+0x47b>
    1f98:	90 91 ae 06 	lds	r25, 0x06AE	; 0x8006ae <nh+0x47c>
    1f9c:	00 97       	sbiw	r24, 0x00	; 0
    1f9e:	09 f0       	breq	.+2      	; 0x1fa2 <main+0x47e>
    1fa0:	ee c0       	rjmp	.+476    	; 0x217e <main+0x65a>
    1fa2:	8b ea       	ldi	r24, 0xAB	; 171
    1fa4:	91 e0       	ldi	r25, 0x01	; 1
    1fa6:	9a 83       	std	Y+2, r25	; 0x02
    1fa8:	89 83       	std	Y+1, r24	; 0x01
    1faa:	1b 82       	std	Y+3, r1	; 0x03
    1fac:	1c 82       	std	Y+4, r1	; 0x04
    1fae:	1d 82       	std	Y+5, r1	; 0x05
    1fb0:	1e 82       	std	Y+6, r1	; 0x06
    1fb2:	1f 82       	std	Y+7, r1	; 0x07
    1fb4:	18 86       	std	Y+8, r1	; 0x08
    1fb6:	19 86       	std	Y+9, r1	; 0x09
    1fb8:	1a 86       	std	Y+10, r1	; 0x0a
   */

  void requestSyncTime()
  {
    std_msgs::Time t;
    publish(TopicInfo::ID_TIME, &t);
    1fba:	02 e3       	ldi	r16, 0x32	; 50
    1fbc:	12 e0       	ldi	r17, 0x02	; 2
    1fbe:	d8 01       	movw	r26, r16
    1fc0:	ed 91       	ld	r30, X+
    1fc2:	fc 91       	ld	r31, X
    1fc4:	01 90       	ld	r0, Z+
    1fc6:	f0 81       	ld	r31, Z
    1fc8:	e0 2d       	mov	r30, r0
    1fca:	ae 01       	movw	r20, r28
    1fcc:	4f 5f       	subi	r20, 0xFF	; 255
    1fce:	5f 4f       	sbci	r21, 0xFF	; 255
    1fd0:	6a e0       	ldi	r22, 0x0A	; 10
    1fd2:	70 e0       	ldi	r23, 0x00	; 0
    1fd4:	c8 01       	movw	r24, r16
    1fd6:	09 95       	icall
    1fd8:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <avr_time_now>
    rt_time = hardware_.time();
    1fdc:	f8 01       	movw	r30, r16
    1fde:	63 83       	std	Z+3, r22	; 0x03
    1fe0:	74 83       	std	Z+4, r23	; 0x04
    1fe2:	85 83       	std	Z+5, r24	; 0x05
    1fe4:	96 83       	std	Z+6, r25	; 0x06
    TopicInfo():
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
    1fe6:	87 eb       	ldi	r24, 0xB7	; 183
    1fe8:	91 e0       	ldi	r25, 0x01	; 1
    1fea:	9a 83       	std	Y+2, r25	; 0x02
    1fec:	89 83       	std	Y+1, r24	; 0x01
    1fee:	1c 82       	std	Y+4, r1	; 0x04
    1ff0:	1b 82       	std	Y+3, r1	; 0x03
    1ff2:	8d e8       	ldi	r24, 0x8D	; 141
    1ff4:	91 e0       	ldi	r25, 0x01	; 1
    1ff6:	9e 83       	std	Y+6, r25	; 0x06
    1ff8:	8d 83       	std	Y+5, r24	; 0x05
    1ffa:	98 87       	std	Y+8, r25	; 0x08
    1ffc:	8f 83       	std	Y+7, r24	; 0x07
    1ffe:	9a 87       	std	Y+10, r25	; 0x0a
    2000:	89 87       	std	Y+9, r24	; 0x09
    2002:	1b 86       	std	Y+11, r1	; 0x0b
    2004:	1c 86       	std	Y+12, r1	; 0x0c
    2006:	1d 86       	std	Y+13, r1	; 0x0d
    2008:	1e 86       	std	Y+14, r1	; 0x0e
    200a:	05 e4       	ldi	r16, 0x45	; 69
    200c:	16 e0       	ldi	r17, 0x06	; 6
    200e:	0f 2e       	mov	r0, r31
    2010:	f7 e7       	ldi	r31, 0x77	; 119
    2012:	6f 2e       	mov	r6, r31
    2014:	f6 e0       	ldi	r31, 0x06	; 6
    2016:	7f 2e       	mov	r7, r31
    2018:	f0 2d       	mov	r31, r0
        ti.topic_id = publishers[i]->id_;
        ti.topic_name = (char *) publishers[i]->topic_;
        ti.message_type = (char *) publishers[i]->msg_->getType();
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
        ti.buffer_size = OUTPUT_SIZE;
        publish(publishers[i]->getEndpointType(), &ti);
    201a:	5f 01       	movw	r10, r30
  {
    rosserial_msgs::TopicInfo ti;
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
    {
      if (publishers[i] != 0) // non-empty slot
    201c:	d8 01       	movw	r26, r16
    201e:	ed 91       	ld	r30, X+
    2020:	fc 91       	ld	r31, X
    2022:	30 97       	sbiw	r30, 0x00	; 0
    2024:	c9 f1       	breq	.+114    	; 0x2098 <main+0x574>
      {
        ti.topic_id = publishers[i]->id_;
    2026:	84 81       	ldd	r24, Z+4	; 0x04
    2028:	95 81       	ldd	r25, Z+5	; 0x05
    202a:	9c 83       	std	Y+4, r25	; 0x04
    202c:	8b 83       	std	Y+3, r24	; 0x03
        ti.topic_name = (char *) publishers[i]->topic_;
    202e:	80 81       	ld	r24, Z
    2030:	91 81       	ldd	r25, Z+1	; 0x01
    2032:	9e 83       	std	Y+6, r25	; 0x06
    2034:	8d 83       	std	Y+5, r24	; 0x05
        ti.message_type = (char *) publishers[i]->msg_->getType();
    2036:	82 81       	ldd	r24, Z+2	; 0x02
    2038:	93 81       	ldd	r25, Z+3	; 0x03
    203a:	dc 01       	movw	r26, r24
    203c:	ed 91       	ld	r30, X+
    203e:	fc 91       	ld	r31, X
    2040:	04 80       	ldd	r0, Z+4	; 0x04
    2042:	f5 81       	ldd	r31, Z+5	; 0x05
    2044:	e0 2d       	mov	r30, r0
    2046:	09 95       	icall
    2048:	98 87       	std	Y+8, r25	; 0x08
    204a:	8f 83       	std	Y+7, r24	; 0x07
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
    204c:	d8 01       	movw	r26, r16
    204e:	ed 91       	ld	r30, X+
    2050:	fc 91       	ld	r31, X
    2052:	82 81       	ldd	r24, Z+2	; 0x02
    2054:	93 81       	ldd	r25, Z+3	; 0x03
    2056:	dc 01       	movw	r26, r24
    2058:	ed 91       	ld	r30, X+
    205a:	fc 91       	ld	r31, X
    205c:	06 80       	ldd	r0, Z+6	; 0x06
    205e:	f7 81       	ldd	r31, Z+7	; 0x07
    2060:	e0 2d       	mov	r30, r0
    2062:	09 95       	icall
    2064:	9a 87       	std	Y+10, r25	; 0x0a
    2066:	89 87       	std	Y+9, r24	; 0x09
        ti.buffer_size = OUTPUT_SIZE;
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	32 e0       	ldi	r19, 0x02	; 2
    206c:	40 e0       	ldi	r20, 0x00	; 0
    206e:	50 e0       	ldi	r21, 0x00	; 0
    2070:	2b 87       	std	Y+11, r18	; 0x0b
    2072:	3c 87       	std	Y+12, r19	; 0x0c
    2074:	4d 87       	std	Y+13, r20	; 0x0d
    2076:	5e 87       	std	Y+14, r21	; 0x0e
  };
  int getEndpointType()
  {
    return endpoint_;
    2078:	d8 01       	movw	r26, r16
    207a:	ed 91       	ld	r30, X+
    207c:	fc 91       	ld	r31, X
        publish(publishers[i]->getEndpointType(), &ti);
    207e:	60 85       	ldd	r22, Z+8	; 0x08
    2080:	71 85       	ldd	r23, Z+9	; 0x09
    2082:	d5 01       	movw	r26, r10
    2084:	ed 91       	ld	r30, X+
    2086:	fc 91       	ld	r31, X
    2088:	01 90       	ld	r0, Z+
    208a:	f0 81       	ld	r31, Z
    208c:	e0 2d       	mov	r30, r0
    208e:	ae 01       	movw	r20, r28
    2090:	4f 5f       	subi	r20, 0xFF	; 255
    2092:	5f 4f       	sbci	r21, 0xFF	; 255
    2094:	c5 01       	movw	r24, r10
    2096:	09 95       	icall
    2098:	0e 5f       	subi	r16, 0xFE	; 254
    209a:	1f 4f       	sbci	r17, 0xFF	; 255

  void negotiateTopics()
  {
    rosserial_msgs::TopicInfo ti;
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
    209c:	60 16       	cp	r6, r16
    209e:	71 06       	cpc	r7, r17
    20a0:	09 f0       	breq	.+2      	; 0x20a4 <main+0x580>
    20a2:	bc cf       	rjmp	.-136    	; 0x201c <main+0x4f8>
    20a4:	0f 2e       	mov	r0, r31
    20a6:	f9 ea       	ldi	r31, 0xA9	; 169
    20a8:	8f 2e       	mov	r8, r31
    20aa:	f6 e0       	ldi	r31, 0x06	; 6
    20ac:	9f 2e       	mov	r9, r31
    20ae:	f0 2d       	mov	r31, r0
        ti.topic_id = subscribers[i]->id_;
        ti.topic_name = (char *) subscribers[i]->topic_;
        ti.message_type = (char *) subscribers[i]->getMsgType();
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
        ti.buffer_size = INPUT_SIZE;
        publish(subscribers[i]->getEndpointType(), &ti);
    20b0:	0f 2e       	mov	r0, r31
    20b2:	f2 e3       	ldi	r31, 0x32	; 50
    20b4:	af 2e       	mov	r10, r31
    20b6:	f2 e0       	ldi	r31, 0x02	; 2
    20b8:	bf 2e       	mov	r11, r31
    20ba:	f0 2d       	mov	r31, r0
        publish(publishers[i]->getEndpointType(), &ti);
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
    {
      if (subscribers[i] != 0) // non-empty slot
    20bc:	f3 01       	movw	r30, r6
    20be:	a0 81       	ld	r26, Z
    20c0:	b1 81       	ldd	r27, Z+1	; 0x01
    20c2:	10 97       	sbiw	r26, 0x00	; 0
    20c4:	09 f4       	brne	.+2      	; 0x20c8 <main+0x5a4>
    20c6:	40 c0       	rjmp	.+128    	; 0x2148 <main+0x624>
      {
        ti.topic_id = subscribers[i]->id_;
    20c8:	12 96       	adiw	r26, 0x02	; 2
    20ca:	8d 91       	ld	r24, X+
    20cc:	9c 91       	ld	r25, X
    20ce:	13 97       	sbiw	r26, 0x03	; 3
    20d0:	9c 83       	std	Y+4, r25	; 0x04
    20d2:	8b 83       	std	Y+3, r24	; 0x03
        ti.topic_name = (char *) subscribers[i]->topic_;
    20d4:	14 96       	adiw	r26, 0x04	; 4
    20d6:	8d 91       	ld	r24, X+
    20d8:	9c 91       	ld	r25, X
    20da:	15 97       	sbiw	r26, 0x05	; 5
    20dc:	9e 83       	std	Y+6, r25	; 0x06
    20de:	8d 83       	std	Y+5, r24	; 0x05
        ti.message_type = (char *) subscribers[i]->getMsgType();
    20e0:	ed 91       	ld	r30, X+
    20e2:	fc 91       	ld	r31, X
    20e4:	11 97       	sbiw	r26, 0x01	; 1
    20e6:	04 80       	ldd	r0, Z+4	; 0x04
    20e8:	f5 81       	ldd	r31, Z+5	; 0x05
    20ea:	e0 2d       	mov	r30, r0
    20ec:	cd 01       	movw	r24, r26
    20ee:	09 95       	icall
    20f0:	98 87       	std	Y+8, r25	; 0x08
    20f2:	8f 83       	std	Y+7, r24	; 0x07
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
    20f4:	d3 01       	movw	r26, r6
    20f6:	8d 91       	ld	r24, X+
    20f8:	9c 91       	ld	r25, X
    20fa:	dc 01       	movw	r26, r24
    20fc:	ed 91       	ld	r30, X+
    20fe:	fc 91       	ld	r31, X
    2100:	06 80       	ldd	r0, Z+6	; 0x06
    2102:	f7 81       	ldd	r31, Z+7	; 0x07
    2104:	e0 2d       	mov	r30, r0
    2106:	09 95       	icall
    2108:	9a 87       	std	Y+10, r25	; 0x0a
    210a:	89 87       	std	Y+9, r24	; 0x09
        ti.buffer_size = INPUT_SIZE;
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	32 e0       	ldi	r19, 0x02	; 2
    2110:	40 e0       	ldi	r20, 0x00	; 0
    2112:	50 e0       	ldi	r21, 0x00	; 0
    2114:	2b 87       	std	Y+11, r18	; 0x0b
    2116:	3c 87       	std	Y+12, r19	; 0x0c
    2118:	4d 87       	std	Y+13, r20	; 0x0d
    211a:	5e 87       	std	Y+14, r21	; 0x0e
        publish(subscribers[i]->getEndpointType(), &ti);
    211c:	d5 01       	movw	r26, r10
    211e:	ed 91       	ld	r30, X+
    2120:	fc 91       	ld	r31, X
    2122:	00 81       	ld	r16, Z
    2124:	11 81       	ldd	r17, Z+1	; 0x01
    2126:	f3 01       	movw	r30, r6
    2128:	80 81       	ld	r24, Z
    212a:	91 81       	ldd	r25, Z+1	; 0x01
    212c:	dc 01       	movw	r26, r24
    212e:	ed 91       	ld	r30, X+
    2130:	fc 91       	ld	r31, X
    2132:	02 80       	ldd	r0, Z+2	; 0x02
    2134:	f3 81       	ldd	r31, Z+3	; 0x03
    2136:	e0 2d       	mov	r30, r0
    2138:	09 95       	icall
    213a:	ae 01       	movw	r20, r28
    213c:	4f 5f       	subi	r20, 0xFF	; 255
    213e:	5f 4f       	sbci	r21, 0xFF	; 255
    2140:	bc 01       	movw	r22, r24
    2142:	c5 01       	movw	r24, r10
    2144:	f8 01       	movw	r30, r16
    2146:	09 95       	icall
    2148:	f2 e0       	ldi	r31, 0x02	; 2
    214a:	6f 0e       	add	r6, r31
    214c:	71 1c       	adc	r7, r1
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
        ti.buffer_size = OUTPUT_SIZE;
        publish(publishers[i]->getEndpointType(), &ti);
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
    214e:	68 14       	cp	r6, r8
    2150:	79 04       	cpc	r7, r9
    2152:	09 f0       	breq	.+2      	; 0x2156 <main+0x632>
    2154:	b3 cf       	rjmp	.-154    	; 0x20bc <main+0x598>
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
        ti.buffer_size = INPUT_SIZE;
        publish(subscribers[i]->getEndpointType(), &ti);
      }
    }
    configured_ = true;
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	80 93 b3 06 	sts	0x06B3, r24	; 0x8006b3 <nh+0x481>
        {
          if (topic_ == TopicInfo::ID_PUBLISHER)
          {
            requestSyncTime();
            negotiateTopics();
            last_sync_time = c_time;
    215c:	c0 92 b4 06 	sts	0x06B4, r12	; 0x8006b4 <nh+0x482>
    2160:	d0 92 b5 06 	sts	0x06B5, r13	; 0x8006b5 <nh+0x483>
    2164:	e0 92 b6 06 	sts	0x06B6, r14	; 0x8006b6 <nh+0x484>
    2168:	f0 92 b7 06 	sts	0x06B7, r15	; 0x8006b7 <nh+0x485>
            last_sync_receive_time = c_time;
    216c:	c0 92 b8 06 	sts	0x06B8, r12	; 0x8006b8 <nh+0x486>
    2170:	d0 92 b9 06 	sts	0x06B9, r13	; 0x8006b9 <nh+0x487>
    2174:	e0 92 ba 06 	sts	0x06BA, r14	; 0x8006ba <nh+0x488>
    2178:	f0 92 bb 06 	sts	0x06BB, r15	; 0x8006bb <nh+0x489>
    217c:	61 cd       	rjmp	.-1342   	; 0x1c40 <main+0x11c>
            return SPIN_ERR;
          }
          else if (topic_ == TopicInfo::ID_TIME)
    217e:	8a 30       	cpi	r24, 0x0A	; 10
    2180:	91 05       	cpc	r25, r1
    2182:	09 f0       	breq	.+2      	; 0x2186 <main+0x662>
    2184:	be c0       	rjmp	.+380    	; 0x2302 <main+0x7de>
    2186:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <avr_time_now>
  }

  void syncTime(uint8_t * data)
  {
    std_msgs::Time t;
    uint32_t offset = hardware_.time() - rt_time;
    218a:	02 e3       	ldi	r16, 0x32	; 50
    218c:	12 e0       	ldi	r17, 0x02	; 2
    218e:	d8 01       	movw	r26, r16
    2190:	13 96       	adiw	r26, 0x03	; 3
    2192:	4d 90       	ld	r4, X+
    2194:	5d 90       	ld	r5, X+
    2196:	6d 90       	ld	r6, X+
    2198:	7c 90       	ld	r7, X
    219a:	16 97       	sbiw	r26, 0x06	; 6
    219c:	9b 01       	movw	r18, r22
    219e:	ac 01       	movw	r20, r24
    21a0:	24 19       	sub	r18, r4
    21a2:	35 09       	sbc	r19, r5
    21a4:	46 09       	sbc	r20, r6
    21a6:	57 09       	sbc	r21, r7
    21a8:	2f 8b       	std	Y+23, r18	; 0x17
    21aa:	38 8f       	std	Y+24, r19	; 0x18
    21ac:	49 8f       	std	Y+25, r20	; 0x19
    21ae:	5a 8f       	std	Y+26, r21	; 0x1a
    21b0:	54 96       	adiw	r26, 0x14	; 20
    21b2:	8c 91       	ld	r24, X
    21b4:	54 97       	sbiw	r26, 0x14	; 20
    21b6:	55 96       	adiw	r26, 0x15	; 21
    21b8:	2c 91       	ld	r18, X
    21ba:	55 97       	sbiw	r26, 0x15	; 21
    21bc:	42 2f       	mov	r20, r18
    21be:	50 e0       	ldi	r21, 0x00	; 0
    21c0:	60 e0       	ldi	r22, 0x00	; 0
    21c2:	70 e0       	ldi	r23, 0x00	; 0
    21c4:	ba 01       	movw	r22, r20
    21c6:	55 27       	eor	r21, r21
    21c8:	44 27       	eor	r20, r20
    21ca:	58 2b       	or	r21, r24
    21cc:	53 96       	adiw	r26, 0x13	; 19
    21ce:	8c 91       	ld	r24, X
    21d0:	53 97       	sbiw	r26, 0x13	; 19
    21d2:	48 2b       	or	r20, r24
    21d4:	56 96       	adiw	r26, 0x16	; 22
    21d6:	8c 91       	ld	r24, X
    21d8:	2a 01       	movw	r4, r20
    21da:	3b 01       	movw	r6, r22
    21dc:	78 2a       	or	r7, r24
    21de:	a3 01       	movw	r20, r6
    21e0:	92 01       	movw	r18, r4
    21e2:	21 50       	subi	r18, 0x01	; 1
    21e4:	31 09       	sbc	r19, r1
    21e6:	41 09       	sbc	r20, r1
    21e8:	51 09       	sbc	r21, r1
    21ea:	2b 8b       	std	Y+19, r18	; 0x13
    21ec:	3c 8b       	std	Y+20, r19	; 0x14
    21ee:	4d 8b       	std	Y+21, r20	; 0x15
    21f0:	5e 8b       	std	Y+22, r21	; 0x16
    21f2:	d8 01       	movw	r26, r16
    21f4:	58 96       	adiw	r26, 0x18	; 24
    21f6:	2c 91       	ld	r18, X
    21f8:	58 97       	sbiw	r26, 0x18	; 24
    21fa:	59 96       	adiw	r26, 0x19	; 25
    21fc:	8c 91       	ld	r24, X
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	a0 e0       	ldi	r26, 0x00	; 0
    2202:	b0 e0       	ldi	r27, 0x00	; 0
    2204:	dc 01       	movw	r26, r24
    2206:	99 27       	eor	r25, r25
    2208:	88 27       	eor	r24, r24
    220a:	92 2b       	or	r25, r18
    220c:	f8 01       	movw	r30, r16
    220e:	27 89       	ldd	r18, Z+23	; 0x17
    2210:	82 2b       	or	r24, r18
    2212:	22 8d       	ldd	r18, Z+26	; 0x1a
    2214:	b2 2b       	or	r27, r18
    2216:	2c 01       	movw	r4, r24
    2218:	3d 01       	movw	r6, r26
    221a:	f6 e3       	ldi	r31, 0x36	; 54
    221c:	5f 1a       	sub	r5, r31
    221e:	f5 e6       	ldi	r31, 0x65	; 101
    2220:	6f 0a       	sbc	r6, r31
    2222:	f4 ec       	ldi	r31, 0xC4	; 196
    2224:	7f 0a       	sbc	r7, r31
    2226:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <avr_time_now>
    222a:	6b 8f       	std	Y+27, r22	; 0x1b
    222c:	7c 8f       	std	Y+28, r23	; 0x1c
    222e:	8d 8f       	std	Y+29, r24	; 0x1d
    2230:	9e 8f       	std	Y+30, r25	; 0x1e
  }

  void setNow(Time & new_now)
  {
    uint32_t ms = hardware_.time();
    sec_offset = new_now.sec - ms / 1000 - 1;
    2232:	6f 89       	ldd	r22, Y+23	; 0x17
    2234:	78 8d       	ldd	r23, Y+24	; 0x18
    2236:	89 8d       	ldd	r24, Y+25	; 0x19
    2238:	9a 8d       	ldd	r25, Y+26	; 0x1a
    223a:	28 ee       	ldi	r18, 0xE8	; 232
    223c:	33 e0       	ldi	r19, 0x03	; 3
    223e:	40 e0       	ldi	r20, 0x00	; 0
    2240:	50 e0       	ldi	r21, 0x00	; 0
    2242:	0e 94 cc 19 	call	0x3398	; 0x3398 <__udivmodsi4>
    2246:	6f 8b       	std	Y+23, r22	; 0x17
    2248:	78 8f       	std	Y+24, r23	; 0x18
    224a:	89 8f       	std	Y+25, r24	; 0x19
    224c:	9a 8f       	std	Y+26, r25	; 0x1a
    224e:	8b 89       	ldd	r24, Y+19	; 0x13
    2250:	9c 89       	ldd	r25, Y+20	; 0x14
    2252:	ad 89       	ldd	r26, Y+21	; 0x15
    2254:	be 89       	ldd	r27, Y+22	; 0x16
    2256:	82 0f       	add	r24, r18
    2258:	93 1f       	adc	r25, r19
    225a:	a4 1f       	adc	r26, r20
    225c:	b5 1f       	adc	r27, r21
    225e:	8b 8b       	std	Y+19, r24	; 0x13
    2260:	9c 8b       	std	Y+20, r25	; 0x14
    2262:	ad 8b       	std	Y+21, r26	; 0x15
    2264:	be 8b       	std	Y+22, r27	; 0x16
    2266:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2268:	7c 8d       	ldd	r23, Y+28	; 0x1c
    226a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    226c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    226e:	28 ee       	ldi	r18, 0xE8	; 232
    2270:	33 e0       	ldi	r19, 0x03	; 3
    2272:	40 e0       	ldi	r20, 0x00	; 0
    2274:	50 e0       	ldi	r21, 0x00	; 0
    2276:	0e 94 cc 19 	call	0x3398	; 0x3398 <__udivmodsi4>
    227a:	6b 8f       	std	Y+27, r22	; 0x1b
    227c:	7c 8f       	std	Y+28, r23	; 0x1c
    227e:	8d 8f       	std	Y+29, r24	; 0x1d
    2280:	9e 8f       	std	Y+30, r25	; 0x1e
    2282:	8b 89       	ldd	r24, Y+19	; 0x13
    2284:	9c 89       	ldd	r25, Y+20	; 0x14
    2286:	ad 89       	ldd	r26, Y+21	; 0x15
    2288:	be 89       	ldd	r27, Y+22	; 0x16
    228a:	82 1b       	sub	r24, r18
    228c:	93 0b       	sbc	r25, r19
    228e:	a4 0b       	sbc	r26, r20
    2290:	b5 0b       	sbc	r27, r21
    2292:	f8 01       	movw	r30, r16
    2294:	87 83       	std	Z+7, r24	; 0x07
    2296:	90 87       	std	Z+8, r25	; 0x08
    2298:	a1 87       	std	Z+9, r26	; 0x09
    229a:	b2 87       	std	Z+10, r27	; 0x0a
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
    229c:	2f 89       	ldd	r18, Y+23	; 0x17
    229e:	38 8d       	ldd	r19, Y+24	; 0x18
    22a0:	49 8d       	ldd	r20, Y+25	; 0x19
    22a2:	5a 8d       	ldd	r21, Y+26	; 0x1a
    22a4:	60 e4       	ldi	r22, 0x40	; 64
    22a6:	72 e4       	ldi	r23, 0x42	; 66
    22a8:	8f e0       	ldi	r24, 0x0F	; 15
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	0e 94 bc 19 	call	0x3378	; 0x3378 <__mulsi3>
    22b0:	46 0e       	add	r4, r22
    22b2:	57 1e       	adc	r5, r23
    22b4:	68 1e       	adc	r6, r24
    22b6:	79 1e       	adc	r7, r25
    22b8:	2b 8d       	ldd	r18, Y+27	; 0x1b
    22ba:	3c 8d       	ldd	r19, Y+28	; 0x1c
    22bc:	4d 8d       	ldd	r20, Y+29	; 0x1d
    22be:	5e 8d       	ldd	r21, Y+30	; 0x1e
    22c0:	60 e4       	ldi	r22, 0x40	; 64
    22c2:	72 e4       	ldi	r23, 0x42	; 66
    22c4:	8f e0       	ldi	r24, 0x0F	; 15
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	0e 94 bc 19 	call	0x3378	; 0x3378 <__mulsi3>
    22cc:	a3 01       	movw	r20, r6
    22ce:	92 01       	movw	r18, r4
    22d0:	26 1b       	sub	r18, r22
    22d2:	37 0b       	sbc	r19, r23
    22d4:	48 0b       	sbc	r20, r24
    22d6:	59 0b       	sbc	r21, r25
    22d8:	23 87       	std	Z+11, r18	; 0x0b
    22da:	34 87       	std	Z+12, r19	; 0x0c
    22dc:	45 87       	std	Z+13, r20	; 0x0d
    22de:	56 87       	std	Z+14, r21	; 0x0e
    normalizeSecNSec(sec_offset, nsec_offset);
    22e0:	6d e3       	ldi	r22, 0x3D	; 61
    22e2:	72 e0       	ldi	r23, 0x02	; 2
    22e4:	89 e3       	ldi	r24, 0x39	; 57
    22e6:	92 e0       	ldi	r25, 0x02	; 2
    22e8:	0e 94 34 17 	call	0x2e68	; 0x2e68 <_ZN3ros16normalizeSecNSecERmS0_>
    22ec:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <avr_time_now>
    t.deserialize(data);
    t.data.sec += offset / 1000;
    t.data.nsec += (offset % 1000) * 1000000UL;

    this->setNow(t.data);
    last_sync_receive_time = hardware_.time();
    22f0:	60 93 b8 06 	sts	0x06B8, r22	; 0x8006b8 <nh+0x486>
    22f4:	70 93 b9 06 	sts	0x06B9, r23	; 0x8006b9 <nh+0x487>
    22f8:	80 93 ba 06 	sts	0x06BA, r24	; 0x8006ba <nh+0x488>
    22fc:	90 93 bb 06 	sts	0x06BB, r25	; 0x8006bb <nh+0x489>
    2300:	0c cd       	rjmp	.-1512   	; 0x1d1a <main+0x1f6>
          }
          else if (topic_ == TopicInfo::ID_TIME)
          {
            syncTime(message_in);
          }
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
    2302:	86 30       	cpi	r24, 0x06	; 6
    2304:	91 05       	cpc	r25, r1
    2306:	09 f0       	breq	.+2      	; 0x230a <main+0x7e6>
    2308:	cb c1       	rjmp	.+918    	; 0x26a0 <main+0xb7c>
    }

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
    230a:	e2 e3       	ldi	r30, 0x32	; 50
    230c:	f2 e0       	ldi	r31, 0x02	; 2
    230e:	83 89       	ldd	r24, Z+19	; 0x13
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
    2310:	94 89       	ldd	r25, Z+20	; 0x14
    2312:	45 88       	ldd	r4, Z+21	; 0x15
    2314:	51 2c       	mov	r5, r1
    2316:	61 2c       	mov	r6, r1
    2318:	71 2c       	mov	r7, r1
    231a:	32 01       	movw	r6, r4
    231c:	55 24       	eor	r5, r5
    231e:	44 24       	eor	r4, r4
    2320:	59 2a       	or	r5, r25
    2322:	48 2a       	or	r4, r24
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
    2324:	86 89       	ldd	r24, Z+22	; 0x16
    2326:	78 2a       	or	r7, r24
      offset += sizeof(this->ints_length);
      if(ints_lengthT > ints_length)
    2328:	80 91 c3 06 	lds	r24, 0x06C3	; 0x8006c3 <nh+0x491>
    232c:	90 91 c4 06 	lds	r25, 0x06C4	; 0x8006c4 <nh+0x492>
    2330:	a0 91 c5 06 	lds	r26, 0x06C5	; 0x8006c5 <nh+0x493>
    2334:	b0 91 c6 06 	lds	r27, 0x06C6	; 0x8006c6 <nh+0x494>
    2338:	84 15       	cp	r24, r4
    233a:	95 05       	cpc	r25, r5
    233c:	a6 05       	cpc	r26, r6
    233e:	b7 05       	cpc	r27, r7
    2340:	78 f4       	brcc	.+30     	; 0x2360 <main+0x83c>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
    2342:	0b ec       	ldi	r16, 0xCB	; 203
    2344:	16 e0       	ldi	r17, 0x06	; 6
    2346:	b2 01       	movw	r22, r4
    2348:	66 0f       	add	r22, r22
    234a:	77 1f       	adc	r23, r23
    234c:	66 0f       	add	r22, r22
    234e:	77 1f       	adc	r23, r23
    2350:	d8 01       	movw	r26, r16
    2352:	8d 91       	ld	r24, X+
    2354:	9c 91       	ld	r25, X
    2356:	0e 94 0e 1a 	call	0x341c	; 0x341c <realloc>
    235a:	f8 01       	movw	r30, r16
    235c:	91 83       	std	Z+1, r25	; 0x01
    235e:	80 83       	st	Z, r24
      ints_length = ints_lengthT;
    2360:	40 92 c3 06 	sts	0x06C3, r4	; 0x8006c3 <nh+0x491>
    2364:	50 92 c4 06 	sts	0x06C4, r5	; 0x8006c4 <nh+0x492>
    2368:	60 92 c5 06 	sts	0x06C5, r6	; 0x8006c5 <nh+0x493>
    236c:	70 92 c6 06 	sts	0x06C6, r7	; 0x8006c6 <nh+0x494>
      for( uint32_t i = 0; i < ints_length; i++){
    2370:	45 28       	or	r4, r5
    2372:	46 28       	or	r4, r6
    2374:	47 28       	or	r4, r7
    2376:	09 f4       	brne	.+2      	; 0x237a <main+0x856>
    2378:	47 c0       	rjmp	.+142    	; 0x2408 <main+0x8e4>
    237a:	e2 e3       	ldi	r30, 0x32	; 50
    237c:	f2 e0       	ldi	r31, 0x02	; 2
    237e:	64 e0       	ldi	r22, 0x04	; 4
    2380:	70 e0       	ldi	r23, 0x00	; 0
    2382:	41 2c       	mov	r4, r1
    2384:	51 2c       	mov	r5, r1
    2386:	32 01       	movw	r6, r4
      u_st_ints.base = 0;
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_ints = u_st_ints.real;
    2388:	07 ec       	ldi	r16, 0xC7	; 199
    238a:	16 e0       	ldi	r17, 0x06	; 6
    238c:	80 8d       	ldd	r24, Z+24	; 0x18
    238e:	21 8d       	ldd	r18, Z+25	; 0x19
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	40 e0       	ldi	r20, 0x00	; 0
    2394:	50 e0       	ldi	r21, 0x00	; 0
    2396:	a9 01       	movw	r20, r18
    2398:	33 27       	eor	r19, r19
    239a:	22 27       	eor	r18, r18
    239c:	38 2b       	or	r19, r24
    239e:	87 89       	ldd	r24, Z+23	; 0x17
    23a0:	28 2b       	or	r18, r24
    23a2:	82 8d       	ldd	r24, Z+26	; 0x1a
    23a4:	58 2b       	or	r21, r24
    23a6:	c9 01       	movw	r24, r18
    23a8:	d8 01       	movw	r26, r16
    23aa:	2d 93       	st	X+, r18
    23ac:	3d 93       	st	X+, r19
    23ae:	4d 93       	st	X+, r20
    23b0:	5c 93       	st	X, r21
    23b2:	13 97       	sbiw	r26, 0x03	; 3
      offset += sizeof(this->st_ints);
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
    23b4:	9b 01       	movw	r18, r22
    23b6:	24 50       	subi	r18, 0x04	; 4
    23b8:	31 09       	sbc	r19, r1
    23ba:	6c 5f       	subi	r22, 0xFC	; 252
    23bc:	7f 4f       	sbci	r23, 0xFF	; 255
    23be:	ab ec       	ldi	r26, 0xCB	; 203
    23c0:	b6 e0       	ldi	r27, 0x06	; 6
    23c2:	4d 91       	ld	r20, X+
    23c4:	5c 91       	ld	r21, X
    23c6:	24 0f       	add	r18, r20
    23c8:	35 1f       	adc	r19, r21
    23ca:	d9 01       	movw	r26, r18
    23cc:	8d 93       	st	X+, r24
    23ce:	9c 93       	st	X, r25
    23d0:	d8 01       	movw	r26, r16
    23d2:	12 96       	adiw	r26, 0x02	; 2
    23d4:	8d 91       	ld	r24, X+
    23d6:	9c 91       	ld	r25, X
    23d8:	13 97       	sbiw	r26, 0x03	; 3
    23da:	d9 01       	movw	r26, r18
    23dc:	13 96       	adiw	r26, 0x03	; 3
    23de:	9c 93       	st	X, r25
    23e0:	8e 93       	st	-X, r24
    23e2:	12 97       	sbiw	r26, 0x02	; 2
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->ints_length);
      if(ints_lengthT > ints_length)
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
      ints_length = ints_lengthT;
      for( uint32_t i = 0; i < ints_length; i++){
    23e4:	bf ef       	ldi	r27, 0xFF	; 255
    23e6:	4b 1a       	sub	r4, r27
    23e8:	5b 0a       	sbc	r5, r27
    23ea:	6b 0a       	sbc	r6, r27
    23ec:	7b 0a       	sbc	r7, r27
    23ee:	34 96       	adiw	r30, 0x04	; 4
    23f0:	a3 ec       	ldi	r26, 0xC3	; 195
    23f2:	b6 e0       	ldi	r27, 0x06	; 6
    23f4:	2d 91       	ld	r18, X+
    23f6:	3d 91       	ld	r19, X+
    23f8:	4d 91       	ld	r20, X+
    23fa:	5c 91       	ld	r21, X
    23fc:	42 16       	cp	r4, r18
    23fe:	53 06       	cpc	r5, r19
    2400:	64 06       	cpc	r6, r20
    2402:	75 06       	cpc	r7, r21
    2404:	18 f2       	brcs	.-122    	; 0x238c <main+0x868>
    2406:	02 c0       	rjmp	.+4      	; 0x240c <main+0x8e8>
      int offset = 0;
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->ints_length);
    2408:	64 e0       	ldi	r22, 0x04	; 4
    240a:	70 e0       	ldi	r23, 0x00	; 0
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_ints = u_st_ints.real;
      offset += sizeof(this->st_ints);
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
    240c:	7c 8b       	std	Y+20, r23	; 0x14
    240e:	6b 8b       	std	Y+19, r22	; 0x13
    2410:	fb 01       	movw	r30, r22
    2412:	eb 5b       	subi	r30, 0xBB	; 187
    2414:	fd 4f       	sbci	r31, 0xFD	; 253
    2416:	80 81       	ld	r24, Z
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
    2418:	fb 01       	movw	r30, r22
    241a:	ea 5b       	subi	r30, 0xBA	; 186
    241c:	fd 4f       	sbci	r31, 0xFD	; 253
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
    241e:	90 81       	ld	r25, Z
    2420:	fb 01       	movw	r30, r22
    2422:	e9 5b       	subi	r30, 0xB9	; 185
    2424:	fd 4f       	sbci	r31, 0xFD	; 253
    2426:	40 80       	ld	r4, Z
    2428:	51 2c       	mov	r5, r1
    242a:	61 2c       	mov	r6, r1
    242c:	71 2c       	mov	r7, r1
    242e:	32 01       	movw	r6, r4
    2430:	55 24       	eor	r5, r5
    2432:	44 24       	eor	r4, r4
    2434:	59 2a       	or	r5, r25
    2436:	48 2a       	or	r4, r24
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
    2438:	fb 01       	movw	r30, r22
    243a:	e8 5b       	subi	r30, 0xB8	; 184
    243c:	fd 4f       	sbci	r31, 0xFD	; 253
    243e:	80 81       	ld	r24, Z
    2440:	78 2a       	or	r7, r24
      offset += sizeof(this->floats_length);
    2442:	8b 01       	movw	r16, r22
    2444:	0c 5f       	subi	r16, 0xFC	; 252
    2446:	1f 4f       	sbci	r17, 0xFF	; 255
      if(floats_lengthT > floats_length)
    2448:	f1 01       	movw	r30, r2
    244a:	80 81       	ld	r24, Z
    244c:	91 81       	ldd	r25, Z+1	; 0x01
    244e:	a2 81       	ldd	r26, Z+2	; 0x02
    2450:	b3 81       	ldd	r27, Z+3	; 0x03
    2452:	84 15       	cp	r24, r4
    2454:	95 05       	cpc	r25, r5
    2456:	a6 05       	cpc	r26, r6
    2458:	b7 05       	cpc	r27, r7
    245a:	78 f4       	brcc	.+30     	; 0x247a <main+0x956>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
    245c:	b2 01       	movw	r22, r4
    245e:	66 0f       	add	r22, r22
    2460:	77 1f       	adc	r23, r23
    2462:	66 0f       	add	r22, r22
    2464:	77 1f       	adc	r23, r23
    2466:	a5 ed       	ldi	r26, 0xD5	; 213
    2468:	b6 e0       	ldi	r27, 0x06	; 6
    246a:	8d 91       	ld	r24, X+
    246c:	9c 91       	ld	r25, X
    246e:	0e 94 0e 1a 	call	0x341c	; 0x341c <realloc>
    2472:	e5 ed       	ldi	r30, 0xD5	; 213
    2474:	f6 e0       	ldi	r31, 0x06	; 6
    2476:	91 83       	std	Z+1, r25	; 0x01
    2478:	80 83       	st	Z, r24
      floats_length = floats_lengthT;
    247a:	d1 01       	movw	r26, r2
    247c:	4d 92       	st	X+, r4
    247e:	5d 92       	st	X+, r5
    2480:	6d 92       	st	X+, r6
    2482:	7c 92       	st	X, r7
    2484:	13 97       	sbiw	r26, 0x03	; 3
      for( uint32_t i = 0; i < floats_length; i++){
    2486:	45 28       	or	r4, r5
    2488:	46 28       	or	r4, r6
    248a:	47 28       	or	r4, r7
    248c:	09 f4       	brne	.+2      	; 0x2490 <main+0x96c>
    248e:	43 c0       	rjmp	.+134    	; 0x2516 <main+0x9f2>
    2490:	eb 89       	ldd	r30, Y+19	; 0x13
    2492:	fc 89       	ldd	r31, Y+20	; 0x14
    2494:	ee 5c       	subi	r30, 0xCE	; 206
    2496:	fd 4f       	sbci	r31, 0xFD	; 253
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	40 e0       	ldi	r20, 0x00	; 0
    249e:	50 e0       	ldi	r21, 0x00	; 0
    24a0:	ba 01       	movw	r22, r20
      } u_st_floats;
      u_st_floats.base = 0;
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
    24a2:	80 8d       	ldd	r24, Z+24	; 0x18
    24a4:	41 8c       	ldd	r4, Z+25	; 0x19
    24a6:	51 2c       	mov	r5, r1
    24a8:	61 2c       	mov	r6, r1
    24aa:	71 2c       	mov	r7, r1
    24ac:	32 01       	movw	r6, r4
    24ae:	55 24       	eor	r5, r5
    24b0:	44 24       	eor	r4, r4
    24b2:	58 2a       	or	r5, r24
    24b4:	87 89       	ldd	r24, Z+23	; 0x17
    24b6:	48 2a       	or	r4, r24
    24b8:	82 8d       	ldd	r24, Z+26	; 0x1a
    24ba:	78 2a       	or	r7, r24
      this->st_floats = u_st_floats.real;
    24bc:	c2 01       	movw	r24, r4
    24be:	a1 ed       	ldi	r26, 0xD1	; 209
    24c0:	b6 e0       	ldi	r27, 0x06	; 6
    24c2:	4d 92       	st	X+, r4
    24c4:	5d 92       	st	X+, r5
    24c6:	6d 92       	st	X+, r6
    24c8:	7c 92       	st	X, r7
    24ca:	13 97       	sbiw	r26, 0x03	; 3
    24cc:	0c 5f       	subi	r16, 0xFC	; 252
    24ce:	1f 4f       	sbci	r17, 0xFF	; 255
      offset += sizeof(this->st_floats);
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
    24d0:	a5 ed       	ldi	r26, 0xD5	; 213
    24d2:	b6 e0       	ldi	r27, 0x06	; 6
    24d4:	6d 90       	ld	r6, X+
    24d6:	7c 90       	ld	r7, X
    24d8:	d3 01       	movw	r26, r6
    24da:	a2 0f       	add	r26, r18
    24dc:	b3 1f       	adc	r27, r19
    24de:	11 96       	adiw	r26, 0x01	; 1
    24e0:	9c 93       	st	X, r25
    24e2:	8e 93       	st	-X, r24
    24e4:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <nh+0x4a1>
    24e8:	90 91 d4 06 	lds	r25, 0x06D4	; 0x8006d4 <nh+0x4a2>
    24ec:	13 96       	adiw	r26, 0x03	; 3
    24ee:	9c 93       	st	X, r25
    24f0:	8e 93       	st	-X, r24
    24f2:	12 97       	sbiw	r26, 0x02	; 2
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->floats_length);
      if(floats_lengthT > floats_length)
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
      floats_length = floats_lengthT;
      for( uint32_t i = 0; i < floats_length; i++){
    24f4:	4f 5f       	subi	r20, 0xFF	; 255
    24f6:	5f 4f       	sbci	r21, 0xFF	; 255
    24f8:	6f 4f       	sbci	r22, 0xFF	; 255
    24fa:	7f 4f       	sbci	r23, 0xFF	; 255
    24fc:	2c 5f       	subi	r18, 0xFC	; 252
    24fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2500:	34 96       	adiw	r30, 0x04	; 4
    2502:	d1 01       	movw	r26, r2
    2504:	4d 90       	ld	r4, X+
    2506:	5d 90       	ld	r5, X+
    2508:	6d 90       	ld	r6, X+
    250a:	7c 90       	ld	r7, X
    250c:	44 15       	cp	r20, r4
    250e:	55 05       	cpc	r21, r5
    2510:	66 05       	cpc	r22, r6
    2512:	77 05       	cpc	r23, r7
    2514:	30 f2       	brcs	.-116    	; 0x24a2 <main+0x97e>
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_floats = u_st_floats.real;
      offset += sizeof(this->st_floats);
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
    2516:	f8 01       	movw	r30, r16
    2518:	eb 5b       	subi	r30, 0xBB	; 187
    251a:	fd 4f       	sbci	r31, 0xFD	; 253
    251c:	80 81       	ld	r24, Z
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
    251e:	f8 01       	movw	r30, r16
    2520:	ea 5b       	subi	r30, 0xBA	; 186
    2522:	fd 4f       	sbci	r31, 0xFD	; 253
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
    2524:	90 81       	ld	r25, Z
    2526:	f8 01       	movw	r30, r16
    2528:	e9 5b       	subi	r30, 0xB9	; 185
    252a:	fd 4f       	sbci	r31, 0xFD	; 253
    252c:	40 80       	ld	r4, Z
    252e:	51 2c       	mov	r5, r1
    2530:	61 2c       	mov	r6, r1
    2532:	71 2c       	mov	r7, r1
    2534:	32 01       	movw	r6, r4
    2536:	55 24       	eor	r5, r5
    2538:	44 24       	eor	r4, r4
    253a:	59 2a       	or	r5, r25
    253c:	48 2a       	or	r4, r24
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
    253e:	f8 01       	movw	r30, r16
    2540:	e8 5b       	subi	r30, 0xB8	; 184
    2542:	fd 4f       	sbci	r31, 0xFD	; 253
    2544:	80 81       	ld	r24, Z
    2546:	78 2a       	or	r7, r24
      offset += sizeof(this->strings_length);
    2548:	0c 5f       	subi	r16, 0xFC	; 252
    254a:	1f 4f       	sbci	r17, 0xFF	; 255
      if(strings_lengthT > strings_length)
    254c:	e7 ed       	ldi	r30, 0xD7	; 215
    254e:	f6 e0       	ldi	r31, 0x06	; 6
    2550:	80 81       	ld	r24, Z
    2552:	91 81       	ldd	r25, Z+1	; 0x01
    2554:	a2 81       	ldd	r26, Z+2	; 0x02
    2556:	b3 81       	ldd	r27, Z+3	; 0x03
    2558:	84 15       	cp	r24, r4
    255a:	95 05       	cpc	r25, r5
    255c:	a6 05       	cpc	r26, r6
    255e:	b7 05       	cpc	r27, r7
    2560:	68 f4       	brcc	.+26     	; 0x257c <main+0xa58>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
    2562:	b2 01       	movw	r22, r4
    2564:	66 0f       	add	r22, r22
    2566:	77 1f       	adc	r23, r23
    2568:	ad ed       	ldi	r26, 0xDD	; 221
    256a:	b6 e0       	ldi	r27, 0x06	; 6
    256c:	8d 91       	ld	r24, X+
    256e:	9c 91       	ld	r25, X
    2570:	0e 94 0e 1a 	call	0x341c	; 0x341c <realloc>
    2574:	ed ed       	ldi	r30, 0xDD	; 221
    2576:	f6 e0       	ldi	r31, 0x06	; 6
    2578:	91 83       	std	Z+1, r25	; 0x01
    257a:	80 83       	st	Z, r24
      strings_length = strings_lengthT;
    257c:	a7 ed       	ldi	r26, 0xD7	; 215
    257e:	b6 e0       	ldi	r27, 0x06	; 6
    2580:	4d 92       	st	X+, r4
    2582:	5d 92       	st	X+, r5
    2584:	6d 92       	st	X+, r6
    2586:	7c 92       	st	X, r7
    2588:	13 97       	sbiw	r26, 0x03	; 3
      for( uint32_t i = 0; i < strings_length; i++){
    258a:	45 28       	or	r4, r5
    258c:	46 28       	or	r4, r6
    258e:	47 28       	or	r4, r7
    2590:	09 f4       	brne	.+2      	; 0x2594 <main+0xa70>
    2592:	82 c0       	rjmp	.+260    	; 0x2698 <main+0xb74>
    2594:	18 8e       	std	Y+24, r1	; 0x18
    2596:	1f 8a       	std	Y+23, r1	; 0x17
    2598:	1b 8a       	std	Y+19, r1	; 0x13
    259a:	1c 8a       	std	Y+20, r1	; 0x14
    259c:	1d 8a       	std	Y+21, r1	; 0x15
    259e:	1e 8a       	std	Y+22, r1	; 0x16
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
    25a0:	1c 8f       	std	Y+28, r17	; 0x1c
    25a2:	0b 8f       	std	Y+27, r16	; 0x1b
    25a4:	f8 01       	movw	r30, r16
    25a6:	eb 5b       	subi	r30, 0xBB	; 187
    25a8:	fd 4f       	sbci	r31, 0xFD	; 253
    25aa:	20 e0       	ldi	r18, 0x00	; 0
    25ac:	30 e0       	ldi	r19, 0x00	; 0

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
  {
    var = 0;
    25ae:	41 2c       	mov	r4, r1
    25b0:	51 2c       	mov	r5, r1
    25b2:	32 01       	movw	r6, r4
    for (size_t i = 0; i < sizeof(V); i++)
      var |= (arr[i] << (8 * i));
    25b4:	81 91       	ld	r24, Z+
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	02 2e       	mov	r0, r18
    25ba:	02 c0       	rjmp	.+4      	; 0x25c0 <main+0xa9c>
    25bc:	88 0f       	add	r24, r24
    25be:	99 1f       	adc	r25, r25
    25c0:	0a 94       	dec	r0
    25c2:	e2 f7       	brpl	.-8      	; 0x25bc <main+0xa98>
    25c4:	09 2e       	mov	r0, r25
    25c6:	00 0c       	add	r0, r0
    25c8:	aa 0b       	sbc	r26, r26
    25ca:	bb 0b       	sbc	r27, r27
    25cc:	48 2a       	or	r4, r24
    25ce:	59 2a       	or	r5, r25
    25d0:	6a 2a       	or	r6, r26
    25d2:	7b 2a       	or	r7, r27
    25d4:	28 5f       	subi	r18, 0xF8	; 248
    25d6:	3f 4f       	sbci	r19, 0xFF	; 255
  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
  {
    var = 0;
    for (size_t i = 0; i < sizeof(V); i++)
    25d8:	20 32       	cpi	r18, 0x20	; 32
    25da:	31 05       	cpc	r19, r1
    25dc:	59 f7       	brne	.-42     	; 0x25b4 <main+0xa90>
      offset += 4;
    25de:	d8 01       	movw	r26, r16
    25e0:	14 96       	adiw	r26, 0x04	; 4
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
    25e2:	8d 01       	movw	r16, r26
    25e4:	0b 2e       	mov	r0, r27
    25e6:	00 0c       	add	r0, r0
    25e8:	22 0b       	sbc	r18, r18
    25ea:	33 0b       	sbc	r19, r19
    25ec:	04 0d       	add	r16, r4
    25ee:	15 1d       	adc	r17, r5
    25f0:	26 1d       	adc	r18, r6
    25f2:	37 1d       	adc	r19, r7
    25f4:	ad 01       	movw	r20, r26
    25f6:	60 e0       	ldi	r22, 0x00	; 0
    25f8:	70 e0       	ldi	r23, 0x00	; 0
    25fa:	40 17       	cp	r20, r16
    25fc:	51 07       	cpc	r21, r17
    25fe:	62 07       	cpc	r22, r18
    2600:	73 07       	cpc	r23, r19
    2602:	80 f4       	brcc	.+32     	; 0x2624 <main+0xb00>
    2604:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2606:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2608:	e8 5b       	subi	r30, 0xB8	; 184
    260a:	fd 4f       	sbci	r31, 0xFD	; 253
    260c:	cd 01       	movw	r24, r26
          inbuffer[k-1]=inbuffer[k];
    260e:	41 81       	ldd	r20, Z+1	; 0x01
    2610:	41 93       	st	Z+, r20
      strings_length = strings_lengthT;
      for( uint32_t i = 0; i < strings_length; i++){
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
    2612:	01 96       	adiw	r24, 0x01	; 1
    2614:	ac 01       	movw	r20, r24
    2616:	60 e0       	ldi	r22, 0x00	; 0
    2618:	70 e0       	ldi	r23, 0x00	; 0
    261a:	40 17       	cp	r20, r16
    261c:	51 07       	cpc	r21, r17
    261e:	62 07       	cpc	r22, r18
    2620:	73 07       	cpc	r23, r19
    2622:	a8 f3       	brcs	.-22     	; 0x260e <main+0xaea>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_st_strings-1]=0;
    2624:	cd 01       	movw	r24, r26
    2626:	84 0d       	add	r24, r4
    2628:	95 1d       	adc	r25, r5
    262a:	fc 01       	movw	r30, r24
    262c:	ec 5b       	subi	r30, 0xBC	; 188
    262e:	fd 4f       	sbci	r31, 0xFD	; 253
    2630:	10 82       	st	Z, r1
      this->st_strings = (char *)(inbuffer + offset-1);
    2632:	ac 5b       	subi	r26, 0xBC	; 188
    2634:	bd 4f       	sbci	r27, 0xFD	; 253
    2636:	eb ed       	ldi	r30, 0xDB	; 219
    2638:	f6 e0       	ldi	r31, 0x06	; 6
    263a:	b1 83       	std	Z+1, r27	; 0x01
    263c:	a0 83       	st	Z, r26
      offset += length_st_strings;
    263e:	8c 01       	movw	r16, r24
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
    2640:	ed ed       	ldi	r30, 0xDD	; 221
    2642:	f6 e0       	ldi	r31, 0x06	; 6
    2644:	20 81       	ld	r18, Z
    2646:	31 81       	ldd	r19, Z+1	; 0x01
    2648:	ef 89       	ldd	r30, Y+23	; 0x17
    264a:	f8 8d       	ldd	r31, Y+24	; 0x18
    264c:	e2 0f       	add	r30, r18
    264e:	f3 1f       	adc	r31, r19
    2650:	b1 83       	std	Z+1, r27	; 0x01
    2652:	a0 83       	st	Z, r26
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->strings_length);
      if(strings_lengthT > strings_length)
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
      strings_length = strings_lengthT;
      for( uint32_t i = 0; i < strings_length; i++){
    2654:	2b 89       	ldd	r18, Y+19	; 0x13
    2656:	3c 89       	ldd	r19, Y+20	; 0x14
    2658:	4d 89       	ldd	r20, Y+21	; 0x15
    265a:	5e 89       	ldd	r21, Y+22	; 0x16
    265c:	2f 5f       	subi	r18, 0xFF	; 255
    265e:	3f 4f       	sbci	r19, 0xFF	; 255
    2660:	4f 4f       	sbci	r20, 0xFF	; 255
    2662:	5f 4f       	sbci	r21, 0xFF	; 255
    2664:	2b 8b       	std	Y+19, r18	; 0x13
    2666:	3c 8b       	std	Y+20, r19	; 0x14
    2668:	4d 8b       	std	Y+21, r20	; 0x15
    266a:	5e 8b       	std	Y+22, r21	; 0x16
    266c:	4f 89       	ldd	r20, Y+23	; 0x17
    266e:	58 8d       	ldd	r21, Y+24	; 0x18
    2670:	4e 5f       	subi	r20, 0xFE	; 254
    2672:	5f 4f       	sbci	r21, 0xFF	; 255
    2674:	58 8f       	std	Y+24, r21	; 0x18
    2676:	4f 8b       	std	Y+23, r20	; 0x17
    2678:	e7 ed       	ldi	r30, 0xD7	; 215
    267a:	f6 e0       	ldi	r31, 0x06	; 6
    267c:	80 81       	ld	r24, Z
    267e:	91 81       	ldd	r25, Z+1	; 0x01
    2680:	a2 81       	ldd	r26, Z+2	; 0x02
    2682:	b3 81       	ldd	r27, Z+3	; 0x03
    2684:	4b 88       	ldd	r4, Y+19	; 0x13
    2686:	5c 88       	ldd	r5, Y+20	; 0x14
    2688:	6d 88       	ldd	r6, Y+21	; 0x15
    268a:	7e 88       	ldd	r7, Y+22	; 0x16
    268c:	48 16       	cp	r4, r24
    268e:	59 06       	cpc	r5, r25
    2690:	6a 06       	cpc	r6, r26
    2692:	7b 06       	cpc	r7, r27
    2694:	08 f4       	brcc	.+2      	; 0x2698 <main+0xb74>
    2696:	84 cf       	rjmp	.-248    	; 0x25a0 <main+0xa7c>
          {
            req_param_resp.deserialize(message_in);
            param_recieved = true;
    2698:	81 e0       	ldi	r24, 0x01	; 1
    269a:	80 93 c0 06 	sts	0x06C0, r24	; 0x8006c0 <nh+0x48e>
    269e:	3d cb       	rjmp	.-2438   	; 0x1d1a <main+0x1f6>
          }
          else if (topic_ == TopicInfo::ID_TX_STOP)
    26a0:	8b 30       	cpi	r24, 0x0B	; 11
    26a2:	91 05       	cpc	r25, r1
    26a4:	19 f4       	brne	.+6      	; 0x26ac <main+0xb88>
          {
            configured_ = false;
    26a6:	10 92 b3 06 	sts	0x06B3, r1	; 0x8006b3 <nh+0x481>
    26aa:	37 cb       	rjmp	.-2450   	; 0x1d1a <main+0x1f6>
          }
          else
          {
            if (subscribers[topic_ - 100])
    26ac:	88 0f       	add	r24, r24
    26ae:	99 1f       	adc	r25, r25
    26b0:	fc 01       	movw	r30, r24
    26b2:	e1 55       	subi	r30, 0x51	; 81
    26b4:	fa 4f       	sbci	r31, 0xFA	; 250
    26b6:	80 81       	ld	r24, Z
    26b8:	91 81       	ldd	r25, Z+1	; 0x01
    26ba:	00 97       	sbiw	r24, 0x00	; 0
    26bc:	09 f4       	brne	.+2      	; 0x26c0 <main+0xb9c>
    26be:	2d cb       	rjmp	.-2470   	; 0x1d1a <main+0x1f6>
              subscribers[topic_ - 100]->callback(message_in);
    26c0:	dc 01       	movw	r26, r24
    26c2:	ed 91       	ld	r30, X+
    26c4:	fc 91       	ld	r31, X
    26c6:	01 90       	ld	r0, Z+
    26c8:	f0 81       	ld	r31, Z
    26ca:	e0 2d       	mov	r30, r0
    26cc:	65 e4       	ldi	r22, 0x45	; 69
    26ce:	72 e0       	ldi	r23, 0x02	; 2
    26d0:	09 95       	icall
    26d2:	23 cb       	rjmp	.-2490   	; 0x1d1a <main+0x1f6>
        }
      }
    }

    /* occasionally sync time */
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
    26d4:	80 91 b3 06 	lds	r24, 0x06B3	; 0x8006b3 <nh+0x481>
    26d8:	88 23       	and	r24, r24
    26da:	09 f4       	brne	.+2      	; 0x26de <main+0xbba>
    26dc:	b1 ca       	rjmp	.-2718   	; 0x1c40 <main+0x11c>
    26de:	80 91 b4 06 	lds	r24, 0x06B4	; 0x8006b4 <nh+0x482>
    26e2:	90 91 b5 06 	lds	r25, 0x06B5	; 0x8006b5 <nh+0x483>
    26e6:	a0 91 b6 06 	lds	r26, 0x06B6	; 0x8006b6 <nh+0x484>
    26ea:	b0 91 b7 06 	lds	r27, 0x06B7	; 0x8006b7 <nh+0x485>
    26ee:	26 01       	movw	r4, r12
    26f0:	37 01       	movw	r6, r14
    26f2:	48 1a       	sub	r4, r24
    26f4:	59 0a       	sbc	r5, r25
    26f6:	6a 0a       	sbc	r6, r26
    26f8:	7b 0a       	sbc	r7, r27
    26fa:	25 ec       	ldi	r18, 0xC5	; 197
    26fc:	42 16       	cp	r4, r18
    26fe:	29 e0       	ldi	r18, 0x09	; 9
    2700:	52 06       	cpc	r5, r18
    2702:	61 04       	cpc	r6, r1
    2704:	71 04       	cpc	r7, r1
    2706:	08 f4       	brcc	.+2      	; 0x270a <main+0xbe6>
    2708:	9b ca       	rjmp	.-2762   	; 0x1c40 <main+0x11c>
    270a:	8b ea       	ldi	r24, 0xAB	; 171
    270c:	91 e0       	ldi	r25, 0x01	; 1
    270e:	9a 83       	std	Y+2, r25	; 0x02
    2710:	89 83       	std	Y+1, r24	; 0x01
    2712:	1b 82       	std	Y+3, r1	; 0x03
    2714:	1c 82       	std	Y+4, r1	; 0x04
    2716:	1d 82       	std	Y+5, r1	; 0x05
    2718:	1e 82       	std	Y+6, r1	; 0x06
    271a:	1f 82       	std	Y+7, r1	; 0x07
    271c:	18 86       	std	Y+8, r1	; 0x08
    271e:	19 86       	std	Y+9, r1	; 0x09
    2720:	1a 86       	std	Y+10, r1	; 0x0a
   */

  void requestSyncTime()
  {
    std_msgs::Time t;
    publish(TopicInfo::ID_TIME, &t);
    2722:	02 e3       	ldi	r16, 0x32	; 50
    2724:	12 e0       	ldi	r17, 0x02	; 2
    2726:	d8 01       	movw	r26, r16
    2728:	ed 91       	ld	r30, X+
    272a:	fc 91       	ld	r31, X
    272c:	01 90       	ld	r0, Z+
    272e:	f0 81       	ld	r31, Z
    2730:	e0 2d       	mov	r30, r0
    2732:	ae 01       	movw	r20, r28
    2734:	4f 5f       	subi	r20, 0xFF	; 255
    2736:	5f 4f       	sbci	r21, 0xFF	; 255
    2738:	6a e0       	ldi	r22, 0x0A	; 10
    273a:	70 e0       	ldi	r23, 0x00	; 0
    273c:	c8 01       	movw	r24, r16
    273e:	09 95       	icall
    2740:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <avr_time_now>
    rt_time = hardware_.time();
    2744:	f8 01       	movw	r30, r16
    2746:	63 83       	std	Z+3, r22	; 0x03
    2748:	74 83       	std	Z+4, r23	; 0x04
    274a:	85 83       	std	Z+5, r24	; 0x05
    274c:	96 83       	std	Z+6, r25	; 0x06

    /* occasionally sync time */
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
    {
      requestSyncTime();
      last_sync_time = c_time;
    274e:	c0 92 b4 06 	sts	0x06B4, r12	; 0x8006b4 <nh+0x482>
    2752:	d0 92 b5 06 	sts	0x06B5, r13	; 0x8006b5 <nh+0x483>
    2756:	e0 92 b6 06 	sts	0x06B6, r14	; 0x8006b6 <nh+0x484>
    275a:	f0 92 b7 06 	sts	0x06B7, r15	; 0x8006b7 <nh+0x485>
    275e:	70 ca       	rjmp	.-2848   	; 0x1c40 <main+0x11c>

00002760 <__vector_1>:




ISR(INT0_vect)
{
    2760:	1f 92       	push	r1
    2762:	0f 92       	push	r0
    2764:	0f b6       	in	r0, 0x3f	; 63
    2766:	0f 92       	push	r0
    2768:	11 24       	eor	r1, r1
    276a:	8f 93       	push	r24
    276c:	9f 93       	push	r25
	pulse_count++;
    276e:	80 91 ef 06 	lds	r24, 0x06EF	; 0x8006ef <pulse_count>
    2772:	90 91 f0 06 	lds	r25, 0x06F0	; 0x8006f0 <pulse_count+0x1>
    2776:	01 96       	adiw	r24, 0x01	; 1
    2778:	90 93 f0 06 	sts	0x06F0, r25	; 0x8006f0 <pulse_count+0x1>
    277c:	80 93 ef 06 	sts	0x06EF, r24	; 0x8006ef <pulse_count>
}
    2780:	9f 91       	pop	r25
    2782:	8f 91       	pop	r24
    2784:	0f 90       	pop	r0
    2786:	0f be       	out	0x3f, r0	; 63
    2788:	0f 90       	pop	r0
    278a:	1f 90       	pop	r1
    278c:	18 95       	reti

0000278e <_Z15Set_Motor_Speedjj>:
	}
}


uint16_t Set_Motor_Speed (uint16_t Req_Speed , uint16_t Motor_Speed  )
{
    278e:	cf 92       	push	r12
    2790:	df 92       	push	r13
    2792:	ef 92       	push	r14
    2794:	ff 92       	push	r15
    2796:	cf 93       	push	r28
    2798:	df 93       	push	r29
	int16_t Error = 0 ;
	uint16_t PWM = 0 ;
	
	Error = Req_Speed - Motor_Speed ;
    279a:	ec 01       	movw	r28, r24
    279c:	c6 1b       	sub	r28, r22
    279e:	d7 0b       	sbc	r29, r23
	
	int32_t PID = (KP * Error) + ( KI * (Error + Last_Error) * (Time_Interval/2)) + ((KD * (Error - Last_Error)) / Time_Interval);

	Volt_Out = Volt_Out + PID ;
    27a0:	60 91 eb 06 	lds	r22, 0x06EB	; 0x8006eb <Last_Error>
    27a4:	70 91 ec 06 	lds	r23, 0x06EC	; 0x8006ec <Last_Error+0x1>
    27a8:	6c 0f       	add	r22, r28
    27aa:	7d 1f       	adc	r23, r29
    27ac:	07 2e       	mov	r0, r23
    27ae:	00 0c       	add	r0, r0
    27b0:	88 0b       	sbc	r24, r24
    27b2:	99 0b       	sbc	r25, r25
    27b4:	0e 94 c3 18 	call	0x3186	; 0x3186 <__floatsisf>
    27b8:	28 e5       	ldi	r18, 0x58	; 88
    27ba:	39 e3       	ldi	r19, 0x39	; 57
    27bc:	46 ef       	ldi	r20, 0xF6	; 246
    27be:	51 e4       	ldi	r21, 0x41	; 65
    27c0:	0e 94 4f 19 	call	0x329e	; 0x329e <__mulsf3>
    27c4:	2d ec       	ldi	r18, 0xCD	; 205
    27c6:	3c ec       	ldi	r19, 0xCC	; 204
    27c8:	4c e4       	ldi	r20, 0x4C	; 76
    27ca:	5d e3       	ldi	r21, 0x3D	; 61
    27cc:	0e 94 4f 19 	call	0x329e	; 0x329e <__mulsf3>
    27d0:	6b 01       	movw	r12, r22
    27d2:	7c 01       	movw	r14, r24
    27d4:	be 01       	movw	r22, r28
    27d6:	0d 2e       	mov	r0, r29
    27d8:	00 0c       	add	r0, r0
    27da:	88 0b       	sbc	r24, r24
    27dc:	99 0b       	sbc	r25, r25
    27de:	0e 94 c3 18 	call	0x3186	; 0x3186 <__floatsisf>
    27e2:	23 e8       	ldi	r18, 0x83	; 131
    27e4:	30 ec       	ldi	r19, 0xC0	; 192
    27e6:	48 e7       	ldi	r20, 0x78	; 120
    27e8:	51 e4       	ldi	r21, 0x41	; 65
    27ea:	0e 94 4f 19 	call	0x329e	; 0x329e <__mulsf3>
    27ee:	9b 01       	movw	r18, r22
    27f0:	ac 01       	movw	r20, r24
    27f2:	c7 01       	movw	r24, r14
    27f4:	b6 01       	movw	r22, r12
    27f6:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <__addsf3>
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	a9 01       	movw	r20, r18
    2800:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <__addsf3>
    2804:	0e 94 8b 18 	call	0x3116	; 0x3116 <__fixsfsi>
    2808:	c0 90 e1 06 	lds	r12, 0x06E1	; 0x8006e1 <Volt_Out>
    280c:	d0 90 e2 06 	lds	r13, 0x06E2	; 0x8006e2 <Volt_Out+0x1>
    2810:	e0 90 e3 06 	lds	r14, 0x06E3	; 0x8006e3 <Volt_Out+0x2>
    2814:	f0 90 e4 06 	lds	r15, 0x06E4	; 0x8006e4 <Volt_Out+0x3>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	8c 0d       	add	r24, r12
    281e:	9d 1d       	adc	r25, r13
    2820:	ae 1d       	adc	r26, r14
    2822:	bf 1d       	adc	r27, r15
    2824:	80 93 e1 06 	sts	0x06E1, r24	; 0x8006e1 <Volt_Out>
    2828:	90 93 e2 06 	sts	0x06E2, r25	; 0x8006e2 <Volt_Out+0x1>
    282c:	a0 93 e3 06 	sts	0x06E3, r26	; 0x8006e3 <Volt_Out+0x2>
    2830:	b0 93 e4 06 	sts	0x06E4, r27	; 0x8006e4 <Volt_Out+0x3>

	Last_Error = Error;
    2834:	d0 93 ec 06 	sts	0x06EC, r29	; 0x8006ec <Last_Error+0x1>
    2838:	c0 93 eb 06 	sts	0x06EB, r28	; 0x8006eb <Last_Error>

	if (Volt_Out >= Max_Volt_out)
    283c:	80 3e       	cpi	r24, 0xE0	; 224
    283e:	2e e2       	ldi	r18, 0x2E	; 46
    2840:	92 07       	cpc	r25, r18
    2842:	a1 05       	cpc	r26, r1
    2844:	b1 05       	cpc	r27, r1
    2846:	6c f0       	brlt	.+26     	; 0x2862 <_Z15Set_Motor_Speedjj+0xd4>
	{
		Volt_Out = Max_Volt_out ;
    2848:	80 ee       	ldi	r24, 0xE0	; 224
    284a:	9e e2       	ldi	r25, 0x2E	; 46
    284c:	a0 e0       	ldi	r26, 0x00	; 0
    284e:	b0 e0       	ldi	r27, 0x00	; 0
    2850:	80 93 e1 06 	sts	0x06E1, r24	; 0x8006e1 <Volt_Out>
    2854:	90 93 e2 06 	sts	0x06E2, r25	; 0x8006e2 <Volt_Out+0x1>
    2858:	a0 93 e3 06 	sts	0x06E3, r26	; 0x8006e3 <Volt_Out+0x2>
    285c:	b0 93 e4 06 	sts	0x06E4, r27	; 0x8006e4 <Volt_Out+0x3>
    2860:	0d c0       	rjmp	.+26     	; 0x287c <_Z15Set_Motor_Speedjj+0xee>
	}
	else if (Volt_Out <=0)
    2862:	18 16       	cp	r1, r24
    2864:	19 06       	cpc	r1, r25
    2866:	1a 06       	cpc	r1, r26
    2868:	1b 06       	cpc	r1, r27
    286a:	44 f0       	brlt	.+16     	; 0x287c <_Z15Set_Motor_Speedjj+0xee>
	{
		Volt_Out = 0;
    286c:	10 92 e1 06 	sts	0x06E1, r1	; 0x8006e1 <Volt_Out>
    2870:	10 92 e2 06 	sts	0x06E2, r1	; 0x8006e2 <Volt_Out+0x1>
    2874:	10 92 e3 06 	sts	0x06E3, r1	; 0x8006e3 <Volt_Out+0x2>
    2878:	10 92 e4 06 	sts	0x06E4, r1	; 0x8006e4 <Volt_Out+0x3>
		// apply break
	}
	
	PWM = Volt_Out * PWM_VOLT_RATIO;
	
	return PWM ;
    287c:	60 91 e1 06 	lds	r22, 0x06E1	; 0x8006e1 <Volt_Out>
    2880:	70 91 e2 06 	lds	r23, 0x06E2	; 0x8006e2 <Volt_Out+0x1>
    2884:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <Volt_Out+0x2>
    2888:	90 91 e4 06 	lds	r25, 0x06E4	; 0x8006e4 <Volt_Out+0x3>
    288c:	0e 94 c3 18 	call	0x3186	; 0x3186 <__floatsisf>
    2890:	2d e8       	ldi	r18, 0x8D	; 141
    2892:	37 e9       	ldi	r19, 0x97	; 151
    2894:	4e ea       	ldi	r20, 0xAE	; 174
    2896:	5d e3       	ldi	r21, 0x3D	; 61
    2898:	0e 94 4f 19 	call	0x329e	; 0x329e <__mulsf3>
    289c:	0e 94 92 18 	call	0x3124	; 0x3124 <__fixunssfsi>
}
    28a0:	cb 01       	movw	r24, r22
    28a2:	df 91       	pop	r29
    28a4:	cf 91       	pop	r28
    28a6:	ff 90       	pop	r15
    28a8:	ef 90       	pop	r14
    28aa:	df 90       	pop	r13
    28ac:	cf 90       	pop	r12
    28ae:	08 95       	ret

000028b0 <__vector_11>:
	pulse_count++;
}


ISR(TIMER0_OVF_vect)
{
    28b0:	1f 92       	push	r1
    28b2:	0f 92       	push	r0
    28b4:	0f b6       	in	r0, 0x3f	; 63
    28b6:	0f 92       	push	r0
    28b8:	11 24       	eor	r1, r1
    28ba:	2f 93       	push	r18
    28bc:	3f 93       	push	r19
    28be:	4f 93       	push	r20
    28c0:	5f 93       	push	r21
    28c2:	6f 93       	push	r22
    28c4:	7f 93       	push	r23
    28c6:	8f 93       	push	r24
    28c8:	9f 93       	push	r25
    28ca:	af 93       	push	r26
    28cc:	bf 93       	push	r27
    28ce:	ef 93       	push	r30
    28d0:	ff 93       	push	r31
	time_count++;
    28d2:	80 91 ed 06 	lds	r24, 0x06ED	; 0x8006ed <time_count>
    28d6:	90 91 ee 06 	lds	r25, 0x06EE	; 0x8006ee <time_count+0x1>
    28da:	01 96       	adiw	r24, 0x01	; 1
    28dc:	90 93 ee 06 	sts	0x06EE, r25	; 0x8006ee <time_count+0x1>
    28e0:	80 93 ed 06 	sts	0x06ED, r24	; 0x8006ed <time_count>
	
	if (time_count == NUMBER_OVF)
    28e4:	80 91 ed 06 	lds	r24, 0x06ED	; 0x8006ed <time_count>
    28e8:	90 91 ee 06 	lds	r25, 0x06EE	; 0x8006ee <time_count+0x1>
    28ec:	05 97       	sbiw	r24, 0x05	; 5
    28ee:	09 f0       	breq	.+2      	; 0x28f2 <__vector_11+0x42>
    28f0:	41 c0       	rjmp	.+130    	; 0x2974 <__vector_11+0xc4>
	{
		speed_rpm = ((pulse_count/Time_Interval)/PPR)*60.0;   // speed equation
    28f2:	60 91 ef 06 	lds	r22, 0x06EF	; 0x8006ef <pulse_count>
    28f6:	70 91 f0 06 	lds	r23, 0x06F0	; 0x8006f0 <pulse_count+0x1>
    28fa:	80 e0       	ldi	r24, 0x00	; 0
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	0e 94 c1 18 	call	0x3182	; 0x3182 <__floatunsisf>
    2902:	2d ec       	ldi	r18, 0xCD	; 205
    2904:	3c ec       	ldi	r19, 0xCC	; 204
    2906:	4c ec       	ldi	r20, 0xCC	; 204
    2908:	5d e3       	ldi	r21, 0x3D	; 61
    290a:	0e 94 19 18 	call	0x3032	; 0x3032 <__divsf3>
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	44 eb       	ldi	r20, 0xB4	; 180
    2914:	53 e4       	ldi	r21, 0x43	; 67
    2916:	0e 94 19 18 	call	0x3032	; 0x3032 <__divsf3>
    291a:	20 e0       	ldi	r18, 0x00	; 0
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	40 e7       	ldi	r20, 0x70	; 112
    2920:	52 e4       	ldi	r21, 0x42	; 66
    2922:	0e 94 4f 19 	call	0x329e	; 0x329e <__mulsf3>
    2926:	0e 94 92 18 	call	0x3124	; 0x3124 <__fixunssfsi>
    292a:	60 93 e7 06 	sts	0x06E7, r22	; 0x8006e7 <speed_rpm>
    292e:	70 93 e8 06 	sts	0x06E8, r23	; 0x8006e8 <speed_rpm+0x1>
    2932:	80 93 e9 06 	sts	0x06E9, r24	; 0x8006e9 <speed_rpm+0x2>
    2936:	90 93 ea 06 	sts	0x06EA, r25	; 0x8006ea <speed_rpm+0x3>
		TCNT0 = Init_ticks ;
    293a:	8c e6       	ldi	r24, 0x6C	; 108
    293c:	82 bf       	out	0x32, r24	; 50
		pulse_count = 0;
    293e:	10 92 f0 06 	sts	0x06F0, r1	; 0x8006f0 <pulse_count+0x1>
    2942:	10 92 ef 06 	sts	0x06EF, r1	; 0x8006ef <pulse_count>
		time_count = 0 ;
    2946:	10 92 ee 06 	sts	0x06EE, r1	; 0x8006ee <time_count+0x1>
    294a:	10 92 ed 06 	sts	0x06ED, r1	; 0x8006ed <time_count>

		PWM_Value = Set_Motor_Speed(GOAL,speed_rpm);
    294e:	60 91 e7 06 	lds	r22, 0x06E7	; 0x8006e7 <speed_rpm>
    2952:	70 91 e8 06 	lds	r23, 0x06E8	; 0x8006e8 <speed_rpm+0x1>
    2956:	80 91 df 06 	lds	r24, 0x06DF	; 0x8006df <GOAL>
    295a:	90 91 e0 06 	lds	r25, 0x06E0	; 0x8006e0 <GOAL+0x1>
    295e:	0e 94 c7 13 	call	0x278e	; 0x278e <_Z15Set_Motor_Speedjj>
    2962:	90 93 e6 06 	sts	0x06E6, r25	; 0x8006e6 <PWM_Value+0x1>
    2966:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <PWM_Value>
		Fast_PWM1_init(TIMER_PRESCALER_256, PWM_Value, OC1A);
    296a:	40 e0       	ldi	r20, 0x00	; 0
    296c:	bc 01       	movw	r22, r24
    296e:	84 e0       	ldi	r24, 0x04	; 4
    2970:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <Fast_PWM1_init>


	}
}
    2974:	ff 91       	pop	r31
    2976:	ef 91       	pop	r30
    2978:	bf 91       	pop	r27
    297a:	af 91       	pop	r26
    297c:	9f 91       	pop	r25
    297e:	8f 91       	pop	r24
    2980:	7f 91       	pop	r23
    2982:	6f 91       	pop	r22
    2984:	5f 91       	pop	r21
    2986:	4f 91       	pop	r20
    2988:	3f 91       	pop	r19
    298a:	2f 91       	pop	r18
    298c:	0f 90       	pop	r0
    298e:	0f be       	out	0x3f, r0	; 63
    2990:	0f 90       	pop	r0
    2992:	1f 90       	pop	r1
    2994:	18 95       	reti

00002996 <_GLOBAL__sub_I_pulse_count>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
    2996:	87 ee       	ldi	r24, 0xE7	; 231
    2998:	91 e0       	ldi	r25, 0x01	; 1
    299a:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <nh+0x1>
    299e:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <nh>
    29a2:	10 92 b3 06 	sts	0x06B3, r1	; 0x8006b3 <nh+0x481>
      _strings_type * strings;

    RequestParamResponse():
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
    29a6:	8f ec       	ldi	r24, 0xCF	; 207
    29a8:	91 e0       	ldi	r25, 0x01	; 1
    29aa:	90 93 c2 06 	sts	0x06C2, r25	; 0x8006c2 <nh+0x490>
    29ae:	80 93 c1 06 	sts	0x06C1, r24	; 0x8006c1 <nh+0x48f>
    29b2:	10 92 c3 06 	sts	0x06C3, r1	; 0x8006c3 <nh+0x491>
    29b6:	10 92 c4 06 	sts	0x06C4, r1	; 0x8006c4 <nh+0x492>
    29ba:	10 92 c5 06 	sts	0x06C5, r1	; 0x8006c5 <nh+0x493>
    29be:	10 92 c6 06 	sts	0x06C6, r1	; 0x8006c6 <nh+0x494>
    29c2:	10 92 cc 06 	sts	0x06CC, r1	; 0x8006cc <nh+0x49a>
    29c6:	10 92 cb 06 	sts	0x06CB, r1	; 0x8006cb <nh+0x499>
    29ca:	10 92 cd 06 	sts	0x06CD, r1	; 0x8006cd <nh+0x49b>
    29ce:	10 92 ce 06 	sts	0x06CE, r1	; 0x8006ce <nh+0x49c>
    29d2:	10 92 cf 06 	sts	0x06CF, r1	; 0x8006cf <nh+0x49d>
    29d6:	10 92 d0 06 	sts	0x06D0, r1	; 0x8006d0 <nh+0x49e>
    29da:	10 92 d6 06 	sts	0x06D6, r1	; 0x8006d6 <nh+0x4a4>
    29de:	10 92 d5 06 	sts	0x06D5, r1	; 0x8006d5 <nh+0x4a3>
    29e2:	10 92 d7 06 	sts	0x06D7, r1	; 0x8006d7 <nh+0x4a5>
    29e6:	10 92 d8 06 	sts	0x06D8, r1	; 0x8006d8 <nh+0x4a6>
    29ea:	10 92 d9 06 	sts	0x06D9, r1	; 0x8006d9 <nh+0x4a7>
    29ee:	10 92 da 06 	sts	0x06DA, r1	; 0x8006da <nh+0x4a8>
    29f2:	10 92 de 06 	sts	0x06DE, r1	; 0x8006de <nh+0x4ac>
    29f6:	10 92 dd 06 	sts	0x06DD, r1	; 0x8006dd <nh+0x4ab>
    29fa:	85 e4       	ldi	r24, 0x45	; 69
    29fc:	96 e0       	ldi	r25, 0x06	; 6
    29fe:	e7 e7       	ldi	r30, 0x77	; 119
    2a00:	f6 e0       	ldi	r31, 0x06	; 6
    2a02:	dc 01       	movw	r26, r24
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
      publishers[i] = 0;
    2a04:	1d 92       	st	X+, r1
    2a06:	1d 92       	st	X+, r1
   */
public:
  NodeHandle_() : configured_(false)
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
    2a08:	ea 17       	cp	r30, r26
    2a0a:	fb 07       	cpc	r31, r27
    2a0c:	d9 f7       	brne	.-10     	; 0x2a04 <_GLOBAL__sub_I_pulse_count+0x6e>
    2a0e:	29 ea       	ldi	r18, 0xA9	; 169
    2a10:	36 e0       	ldi	r19, 0x06	; 6
      publishers[i] = 0;

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
      subscribers[i] = 0;
    2a12:	11 92       	st	Z+, r1
    2a14:	11 92       	st	Z+, r1
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
      publishers[i] = 0;

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
    2a16:	2e 17       	cp	r18, r30
    2a18:	3f 07       	cpc	r19, r31
    2a1a:	d9 f7       	brne	.-10     	; 0x2a12 <_GLOBAL__sub_I_pulse_count+0x7c>
    2a1c:	a5 e4       	ldi	r26, 0x45	; 69
    2a1e:	b2 e0       	ldi	r27, 0x02	; 2
    2a20:	e5 e4       	ldi	r30, 0x45	; 69
    2a22:	f4 e0       	ldi	r31, 0x04	; 4
      subscribers[i] = 0;

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
      message_in[i] = 0;
    2a24:	1d 92       	st	X+, r1
      publishers[i] = 0;

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
      subscribers[i] = 0;

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
    2a26:	ea 17       	cp	r30, r26
    2a28:	fb 07       	cpc	r31, r27
    2a2a:	e1 f7       	brne	.-8      	; 0x2a24 <_GLOBAL__sub_I_pulse_count+0x8e>
      message_in[i] = 0;

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
      message_out[i] = 0;
    2a2c:	11 92       	st	Z+, r1
      subscribers[i] = 0;

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
      message_in[i] = 0;

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
    2a2e:	e8 17       	cp	r30, r24
    2a30:	f9 07       	cpc	r31, r25
    2a32:	e1 f7       	brne	.-8      	; 0x2a2c <_GLOBAL__sub_I_pulse_count+0x96>
    req_param_resp.floats_length = 0;
    req_param_resp.floats = NULL;
    req_param_resp.ints_length = 0;
    req_param_resp.ints = NULL;

    spin_timeout_ = 0;
    2a34:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <nh+0xf>
    2a38:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <nh+0x10>
    2a3c:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <nh+0x11>
    2a40:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <nh+0x12>
    public:
      typedef uint16_t _data_type;
      _data_type data;

    UInt16():
      data(0)
    2a44:	ae e2       	ldi	r26, 0x2E	; 46
    2a46:	b2 e0       	ldi	r27, 0x02	; 2
    2a48:	8b ed       	ldi	r24, 0xDB	; 219
    2a4a:	91 e0       	ldi	r25, 0x01	; 1
    2a4c:	11 96       	adiw	r26, 0x01	; 1
    2a4e:	9c 93       	st	X, r25
    2a50:	8e 93       	st	-X, r24
    2a52:	13 96       	adiw	r26, 0x03	; 3
    2a54:	1c 92       	st	X, r1
    2a56:	1e 92       	st	-X, r1
    2a58:	12 97       	sbiw	r26, 0x02	; 2
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
    2a5a:	e4 e2       	ldi	r30, 0x24	; 36
    2a5c:	f2 e0       	ldi	r31, 0x02	; 2
    2a5e:	2e e8       	ldi	r18, 0x8E	; 142
    2a60:	31 e0       	ldi	r19, 0x01	; 1
    2a62:	31 83       	std	Z+1, r19	; 0x01
    2a64:	20 83       	st	Z, r18
    2a66:	b3 83       	std	Z+3, r27	; 0x03
    2a68:	a2 83       	std	Z+2, r26	; 0x02
    2a6a:	11 86       	std	Z+9, r1	; 0x09
    2a6c:	10 86       	std	Z+8, r1	; 0x08
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
    cb_(cb),
    endpoint_(endpoint)
    2a6e:	e6 e1       	ldi	r30, 0x16	; 22
    2a70:	f2 e0       	ldi	r31, 0x02	; 2
    2a72:	21 ef       	ldi	r18, 0xF1	; 241
    2a74:	31 e0       	ldi	r19, 0x01	; 1
    2a76:	31 83       	std	Z+1, r19	; 0x01
    2a78:	20 83       	st	Z, r18
    2a7a:	97 83       	std	Z+7, r25	; 0x07
    2a7c:	86 83       	std	Z+6, r24	; 0x06
    2a7e:	11 86       	std	Z+9, r1	; 0x09
    2a80:	10 86       	std	Z+8, r1	; 0x08
    2a82:	8c e8       	ldi	r24, 0x8C	; 140
    2a84:	92 e0       	ldi	r25, 0x02	; 2
    2a86:	93 87       	std	Z+11, r25	; 0x0b
    2a88:	82 87       	std	Z+10, r24	; 0x0a
    2a8a:	81 e0       	ldi	r24, 0x01	; 1
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	95 87       	std	Z+13, r25	; 0x0d
    2a90:	84 87       	std	Z+12, r24	; 0x0c
  {
    topic_ = topic_name;
    2a92:	8a e9       	ldi	r24, 0x9A	; 154
    2a94:	91 e0       	ldi	r25, 0x01	; 1
    2a96:	95 83       	std	Z+5, r25	; 0x05
    2a98:	84 83       	std	Z+4, r24	; 0x04
    2a9a:	08 95       	ret

00002a9c <__vector_4>:

volatile static uint32_t overflow_ms = 0;

// The Timer2 CTC interrupt handler
ISR(TIMER2_COMP_vect)
{
    2a9c:	1f 92       	push	r1
    2a9e:	0f 92       	push	r0
    2aa0:	0f b6       	in	r0, 0x3f	; 63
    2aa2:	0f 92       	push	r0
    2aa4:	11 24       	eor	r1, r1
    2aa6:	8f 93       	push	r24
    2aa8:	9f 93       	push	r25
    2aaa:	af 93       	push	r26
    2aac:	bf 93       	push	r27
    overflow_ms++;
    2aae:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <overflow_ms>
    2ab2:	90 91 f2 06 	lds	r25, 0x06F2	; 0x8006f2 <overflow_ms+0x1>
    2ab6:	a0 91 f3 06 	lds	r26, 0x06F3	; 0x8006f3 <overflow_ms+0x2>
    2aba:	b0 91 f4 06 	lds	r27, 0x06F4	; 0x8006f4 <overflow_ms+0x3>
    2abe:	01 96       	adiw	r24, 0x01	; 1
    2ac0:	a1 1d       	adc	r26, r1
    2ac2:	b1 1d       	adc	r27, r1
    2ac4:	80 93 f1 06 	sts	0x06F1, r24	; 0x8006f1 <overflow_ms>
    2ac8:	90 93 f2 06 	sts	0x06F2, r25	; 0x8006f2 <overflow_ms+0x1>
    2acc:	a0 93 f3 06 	sts	0x06F3, r26	; 0x8006f3 <overflow_ms+0x2>
    2ad0:	b0 93 f4 06 	sts	0x06F4, r27	; 0x8006f4 <overflow_ms+0x3>
}
    2ad4:	bf 91       	pop	r27
    2ad6:	af 91       	pop	r26
    2ad8:	9f 91       	pop	r25
    2ada:	8f 91       	pop	r24
    2adc:	0f 90       	pop	r0
    2ade:	0f be       	out	0x3f, r0	; 63
    2ae0:	0f 90       	pop	r0
    2ae2:	1f 90       	pop	r1
    2ae4:	18 95       	reti

00002ae6 <avr_time_init>:

/* init timer 2 in ctc mode for work as millis function (ros need it )*/
void avr_time_init(void)
{
	/* set ctc mode */
	CLR_BIT(TCCR2,WGM20);
    2ae6:	85 b5       	in	r24, 0x25	; 37
    2ae8:	8f 7b       	andi	r24, 0xBF	; 191
    2aea:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,WGM21);
    2aec:	85 b5       	in	r24, 0x25	; 37
    2aee:	88 60       	ori	r24, 0x08	; 8
    2af0:	85 bd       	out	0x25, r24	; 37
	/* set timer count */
	OCR2 = ((F_CPU / PRESCALER) / 1000); ;
    2af2:	8b e0       	ldi	r24, 0x0B	; 11
    2af4:	83 bd       	out	0x23, r24	; 35
	/* set  pin OC0 mode */
	CLR_BIT(TCCR2,COM20);
    2af6:	85 b5       	in	r24, 0x25	; 37
    2af8:	8f 7e       	andi	r24, 0xEF	; 239
    2afa:	85 bd       	out	0x25, r24	; 37
	CLR_BIT(TCCR2,COM21);
    2afc:	85 b5       	in	r24, 0x25	; 37
    2afe:	8f 7d       	andi	r24, 0xDF	; 223
    2b00:	85 bd       	out	0x25, r24	; 37
	// Prescale Timer 0 to divide by 1024
	SET_BIT(TCCR2,CS20);
    2b02:	85 b5       	in	r24, 0x25	; 37
    2b04:	81 60       	ori	r24, 0x01	; 1
    2b06:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS21);
    2b08:	85 b5       	in	r24, 0x25	; 37
    2b0a:	82 60       	ori	r24, 0x02	; 2
    2b0c:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS22);
    2b0e:	85 b5       	in	r24, 0x25	; 37
    2b10:	84 60       	ori	r24, 0x04	; 4
    2b12:	85 bd       	out	0x25, r24	; 37
	// Enable Timer 0 overflow interrupt
	SET_BIT(TIMSK,OCIE2);
    2b14:	89 b7       	in	r24, 0x39	; 57
    2b16:	80 68       	ori	r24, 0x80	; 128
    2b18:	89 bf       	out	0x39, r24	; 57
    2b1a:	08 95       	ret

00002b1c <avr_time_now>:
// Get the current time in milliseconds
uint32_t avr_time_now(void)
{
  uint32_t now;
  // Disable interrupts 
  cli();
    2b1c:	f8 94       	cli
  now = overflow_ms;
    2b1e:	60 91 f1 06 	lds	r22, 0x06F1	; 0x8006f1 <overflow_ms>
    2b22:	70 91 f2 06 	lds	r23, 0x06F2	; 0x8006f2 <overflow_ms+0x1>
    2b26:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <overflow_ms+0x2>
    2b2a:	90 91 f4 06 	lds	r25, 0x06F4	; 0x8006f4 <overflow_ms+0x3>
  sei();
    2b2e:	78 94       	sei

  return now;
    2b30:	08 95       	ret

00002b32 <avr_uart_init>:
// Initialize the UART
void avr_uart_init(void)
{
	
	/* ENABLE RECEVIER */
	SET_BIT(UCSRB,RXEN);
    2b32:	54 9a       	sbi	0x0a, 4	; 10

	/* ENABLE TRANSMITER */
	SET_BIT(UCSRB,TXEN);
    2b34:	53 9a       	sbi	0x0a, 3	; 10

	/* CLEAR BIT UCSZ2 TO SET 8 BIT */
	CLR_BIT(UCSRB,UCSZ2);
    2b36:	52 98       	cbi	0x0a, 2	; 10

	/* Asynchronous MODE */
	CLR_BIT(UCSRC,UMSEL);
    2b38:	80 b5       	in	r24, 0x20	; 32
    2b3a:	8f 7b       	andi	r24, 0xBF	; 191
    2b3c:	80 bd       	out	0x20, r24	; 32

	/* Parity Disabled */
	CLR_BIT(UCSRC,UPM0);
    2b3e:	80 b5       	in	r24, 0x20	; 32
    2b40:	8f 7e       	andi	r24, 0xEF	; 239
    2b42:	80 bd       	out	0x20, r24	; 32
	CLR_BIT(UCSRC,UPM1);
    2b44:	80 b5       	in	r24, 0x20	; 32
    2b46:	8f 7d       	andi	r24, 0xDF	; 223
    2b48:	80 bd       	out	0x20, r24	; 32

	/* ONE BIT STOP */
	CLR_BIT(UCSRC,USBS);
    2b4a:	80 b5       	in	r24, 0x20	; 32
    2b4c:	87 7f       	andi	r24, 0xF7	; 247
    2b4e:	80 bd       	out	0x20, r24	; 32

	/* SET BIT UCSZ0 , UCSZ1  TO SET 8 BIT */
	SET_BIT(UCSRC,UCSZ0);
    2b50:	80 b5       	in	r24, 0x20	; 32
    2b52:	82 60       	ori	r24, 0x02	; 2
    2b54:	80 bd       	out	0x20, r24	; 32
	SET_BIT(UCSRC,UCSZ1);
    2b56:	80 b5       	in	r24, 0x20	; 32
    2b58:	84 60       	ori	r24, 0x04	; 4
    2b5a:	80 bd       	out	0x20, r24	; 32

	/* BUAD RATE SET*/
	UBRRH = (UBRR_VAL >> 8);
    2b5c:	10 bc       	out	0x20, r1	; 32
	UBRRL = UBRR_VAL;
    2b5e:	8c e0       	ldi	r24, 0x0C	; 12
    2b60:	89 b9       	out	0x09, r24	; 9
    2b62:	08 95       	ret

00002b64 <avr_uart_send_byte>:

// Send one char (blocking)
void avr_uart_send_byte(uint8_t tx_byte)
{
	/* WAIT TELL TX BUFFER IS EMPTY */
	while(READ_BIT(UCSRA,UDRE) == 0);
    2b64:	5d 9b       	sbis	0x0b, 5	; 11
    2b66:	fe cf       	rjmp	.-4      	; 0x2b64 <avr_uart_send_byte>

	/* SET DATA REGSITER WITH DATA TO SEND */
	UDR = tx_byte ;
    2b68:	8c b9       	out	0x0c, r24	; 12
    2b6a:	08 95       	ret

00002b6c <avr_uart_receive_byte>:

// Get one char if available, otherwise -1
int16_t avr_uart_receive_byte(void)
{
	/* WAIT TILL A VAILD BYTE AVALIBLE INSIDE RX BUFFER  */
	if(READ_BIT(UCSRA,RXC) != 0 )
    2b6c:	5f 9b       	sbis	0x0b, 7	; 11
    2b6e:	03 c0       	rjmp	.+6      	; 0x2b76 <avr_uart_receive_byte+0xa>
	{
		/* RETURN BYTE RECIVED */
		return UDR ;
    2b70:	8c b1       	in	r24, 0x0c	; 12
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	08 95       	ret
	}
	else
	{
		return -1 ;
    2b76:	8f ef       	ldi	r24, 0xFF	; 255
    2b78:	9f ef       	ldi	r25, 0xFF	; 255
	}
    2b7a:	08 95       	ret

00002b7c <DIO_VidSetPinDirection>:
	}
}

void DIO_VidSetPinDirection(uint8_t PortId , uint8_t Pin , uint8_t Value)
{
	switch(PortId)
    2b7c:	81 30       	cpi	r24, 0x01	; 1
    2b7e:	11 f1       	breq	.+68     	; 0x2bc4 <DIO_VidSetPinDirection+0x48>
    2b80:	30 f0       	brcs	.+12     	; 0x2b8e <DIO_VidSetPinDirection+0x12>
    2b82:	82 30       	cpi	r24, 0x02	; 2
    2b84:	d1 f1       	breq	.+116    	; 0x2bfa <DIO_VidSetPinDirection+0x7e>
    2b86:	83 30       	cpi	r24, 0x03	; 3
    2b88:	09 f4       	brne	.+2      	; 0x2b8c <DIO_VidSetPinDirection+0x10>
    2b8a:	52 c0       	rjmp	.+164    	; 0x2c30 <DIO_VidSetPinDirection+0xb4>
    2b8c:	08 95       	ret
	{
	case 0 :
		if(Value == 0xff)
    2b8e:	4f 3f       	cpi	r20, 0xFF	; 255
    2b90:	59 f4       	brne	.+22     	; 0x2ba8 <DIO_VidSetPinDirection+0x2c>
		{
			SET_BIT(DDRA_Reg,Pin);
    2b92:	2a b3       	in	r18, 0x1a	; 26
    2b94:	81 e0       	ldi	r24, 0x01	; 1
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	02 c0       	rjmp	.+4      	; 0x2b9e <DIO_VidSetPinDirection+0x22>
    2b9a:	88 0f       	add	r24, r24
    2b9c:	99 1f       	adc	r25, r25
    2b9e:	6a 95       	dec	r22
    2ba0:	e2 f7       	brpl	.-8      	; 0x2b9a <DIO_VidSetPinDirection+0x1e>
    2ba2:	82 2b       	or	r24, r18
    2ba4:	8a bb       	out	0x1a, r24	; 26
    2ba6:	08 95       	ret
		}
		else if(Value == 0)
    2ba8:	41 11       	cpse	r20, r1
    2baa:	5c c0       	rjmp	.+184    	; 0x2c64 <DIO_VidSetPinDirection+0xe8>
		{
			CLR_BIT(DDRA_Reg,Pin);
    2bac:	2a b3       	in	r18, 0x1a	; 26
    2bae:	81 e0       	ldi	r24, 0x01	; 1
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	02 c0       	rjmp	.+4      	; 0x2bb8 <DIO_VidSetPinDirection+0x3c>
    2bb4:	88 0f       	add	r24, r24
    2bb6:	99 1f       	adc	r25, r25
    2bb8:	6a 95       	dec	r22
    2bba:	e2 f7       	brpl	.-8      	; 0x2bb4 <DIO_VidSetPinDirection+0x38>
    2bbc:	80 95       	com	r24
    2bbe:	82 23       	and	r24, r18
    2bc0:	8a bb       	out	0x1a, r24	; 26
    2bc2:	08 95       	ret
		}
		break;
	case 1 :
		if(Value == 0xff)
    2bc4:	4f 3f       	cpi	r20, 0xFF	; 255
    2bc6:	59 f4       	brne	.+22     	; 0x2bde <DIO_VidSetPinDirection+0x62>
		{
			SET_BIT(DDRB_Reg,Pin);
    2bc8:	27 b3       	in	r18, 0x17	; 23
    2bca:	81 e0       	ldi	r24, 0x01	; 1
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	02 c0       	rjmp	.+4      	; 0x2bd4 <DIO_VidSetPinDirection+0x58>
    2bd0:	88 0f       	add	r24, r24
    2bd2:	99 1f       	adc	r25, r25
    2bd4:	6a 95       	dec	r22
    2bd6:	e2 f7       	brpl	.-8      	; 0x2bd0 <DIO_VidSetPinDirection+0x54>
    2bd8:	82 2b       	or	r24, r18
    2bda:	87 bb       	out	0x17, r24	; 23
    2bdc:	08 95       	ret
		}
		else if(Value == 0)
    2bde:	41 11       	cpse	r20, r1
    2be0:	41 c0       	rjmp	.+130    	; 0x2c64 <DIO_VidSetPinDirection+0xe8>
		{
			CLR_BIT(DDRB_Reg,Pin);
    2be2:	27 b3       	in	r18, 0x17	; 23
    2be4:	81 e0       	ldi	r24, 0x01	; 1
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	02 c0       	rjmp	.+4      	; 0x2bee <DIO_VidSetPinDirection+0x72>
    2bea:	88 0f       	add	r24, r24
    2bec:	99 1f       	adc	r25, r25
    2bee:	6a 95       	dec	r22
    2bf0:	e2 f7       	brpl	.-8      	; 0x2bea <DIO_VidSetPinDirection+0x6e>
    2bf2:	80 95       	com	r24
    2bf4:	82 23       	and	r24, r18
    2bf6:	87 bb       	out	0x17, r24	; 23
    2bf8:	08 95       	ret
		}
		break;
	case 2 :
		if(Value == 0xff)
    2bfa:	4f 3f       	cpi	r20, 0xFF	; 255
    2bfc:	59 f4       	brne	.+22     	; 0x2c14 <DIO_VidSetPinDirection+0x98>
		{
			SET_BIT(DDRC_Reg,Pin);
    2bfe:	24 b3       	in	r18, 0x14	; 20
    2c00:	81 e0       	ldi	r24, 0x01	; 1
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	02 c0       	rjmp	.+4      	; 0x2c0a <DIO_VidSetPinDirection+0x8e>
    2c06:	88 0f       	add	r24, r24
    2c08:	99 1f       	adc	r25, r25
    2c0a:	6a 95       	dec	r22
    2c0c:	e2 f7       	brpl	.-8      	; 0x2c06 <DIO_VidSetPinDirection+0x8a>
    2c0e:	82 2b       	or	r24, r18
    2c10:	84 bb       	out	0x14, r24	; 20
    2c12:	08 95       	ret
		}
		else if(Value == 0)
    2c14:	41 11       	cpse	r20, r1
    2c16:	26 c0       	rjmp	.+76     	; 0x2c64 <DIO_VidSetPinDirection+0xe8>
		{
			CLR_BIT(DDRC_Reg,Pin);
    2c18:	24 b3       	in	r18, 0x14	; 20
    2c1a:	81 e0       	ldi	r24, 0x01	; 1
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	02 c0       	rjmp	.+4      	; 0x2c24 <DIO_VidSetPinDirection+0xa8>
    2c20:	88 0f       	add	r24, r24
    2c22:	99 1f       	adc	r25, r25
    2c24:	6a 95       	dec	r22
    2c26:	e2 f7       	brpl	.-8      	; 0x2c20 <DIO_VidSetPinDirection+0xa4>
    2c28:	80 95       	com	r24
    2c2a:	82 23       	and	r24, r18
    2c2c:	84 bb       	out	0x14, r24	; 20
    2c2e:	08 95       	ret
		}
		break;
	case 3 :
		if(Value == 0xff)
    2c30:	4f 3f       	cpi	r20, 0xFF	; 255
    2c32:	59 f4       	brne	.+22     	; 0x2c4a <DIO_VidSetPinDirection+0xce>
		{
			SET_BIT(DDRD_Reg,Pin);
    2c34:	21 b3       	in	r18, 0x11	; 17
    2c36:	81 e0       	ldi	r24, 0x01	; 1
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	02 c0       	rjmp	.+4      	; 0x2c40 <DIO_VidSetPinDirection+0xc4>
    2c3c:	88 0f       	add	r24, r24
    2c3e:	99 1f       	adc	r25, r25
    2c40:	6a 95       	dec	r22
    2c42:	e2 f7       	brpl	.-8      	; 0x2c3c <DIO_VidSetPinDirection+0xc0>
    2c44:	82 2b       	or	r24, r18
    2c46:	81 bb       	out	0x11, r24	; 17
    2c48:	08 95       	ret
		}
		else if(Value == 0)
    2c4a:	41 11       	cpse	r20, r1
    2c4c:	0b c0       	rjmp	.+22     	; 0x2c64 <DIO_VidSetPinDirection+0xe8>
		{
			CLR_BIT(DDRD_Reg,Pin);
    2c4e:	21 b3       	in	r18, 0x11	; 17
    2c50:	81 e0       	ldi	r24, 0x01	; 1
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	02 c0       	rjmp	.+4      	; 0x2c5a <DIO_VidSetPinDirection+0xde>
    2c56:	88 0f       	add	r24, r24
    2c58:	99 1f       	adc	r25, r25
    2c5a:	6a 95       	dec	r22
    2c5c:	e2 f7       	brpl	.-8      	; 0x2c56 <DIO_VidSetPinDirection+0xda>
    2c5e:	80 95       	com	r24
    2c60:	82 23       	and	r24, r18
    2c62:	81 bb       	out	0x11, r24	; 17
    2c64:	08 95       	ret

00002c66 <DIO_VidSetPinValue>:
	}
}

void DIO_VidSetPinValue(uint8_t PortId , uint8_t Pin , uint8_t Value)
{
	switch(PortId)
    2c66:	81 30       	cpi	r24, 0x01	; 1
    2c68:	11 f1       	breq	.+68     	; 0x2cae <DIO_VidSetPinValue+0x48>
    2c6a:	30 f0       	brcs	.+12     	; 0x2c78 <DIO_VidSetPinValue+0x12>
    2c6c:	82 30       	cpi	r24, 0x02	; 2
    2c6e:	69 f1       	breq	.+90     	; 0x2cca <DIO_VidSetPinValue+0x64>
    2c70:	83 30       	cpi	r24, 0x03	; 3
    2c72:	09 f4       	brne	.+2      	; 0x2c76 <DIO_VidSetPinValue+0x10>
    2c74:	45 c0       	rjmp	.+138    	; 0x2d00 <DIO_VidSetPinValue+0x9a>
    2c76:	08 95       	ret
	{
	case 0 :
		if(Value == 0xff)
    2c78:	4f 3f       	cpi	r20, 0xFF	; 255
    2c7a:	59 f4       	brne	.+22     	; 0x2c92 <DIO_VidSetPinValue+0x2c>
		{
			SET_BIT(PORTA_Reg,Pin);
    2c7c:	2b b3       	in	r18, 0x1b	; 27
    2c7e:	81 e0       	ldi	r24, 0x01	; 1
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	02 c0       	rjmp	.+4      	; 0x2c88 <DIO_VidSetPinValue+0x22>
    2c84:	88 0f       	add	r24, r24
    2c86:	99 1f       	adc	r25, r25
    2c88:	6a 95       	dec	r22
    2c8a:	e2 f7       	brpl	.-8      	; 0x2c84 <DIO_VidSetPinValue+0x1e>
    2c8c:	82 2b       	or	r24, r18
    2c8e:	8b bb       	out	0x1b, r24	; 27
    2c90:	08 95       	ret
		}
		else if(Value == 0)
    2c92:	41 11       	cpse	r20, r1
    2c94:	4f c0       	rjmp	.+158    	; 0x2d34 <DIO_VidSetPinValue+0xce>
		{
			CLR_BIT(PORTA_Reg,Pin);
    2c96:	2b b3       	in	r18, 0x1b	; 27
    2c98:	81 e0       	ldi	r24, 0x01	; 1
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	02 c0       	rjmp	.+4      	; 0x2ca2 <DIO_VidSetPinValue+0x3c>
    2c9e:	88 0f       	add	r24, r24
    2ca0:	99 1f       	adc	r25, r25
    2ca2:	6a 95       	dec	r22
    2ca4:	e2 f7       	brpl	.-8      	; 0x2c9e <DIO_VidSetPinValue+0x38>
    2ca6:	80 95       	com	r24
    2ca8:	82 23       	and	r24, r18
    2caa:	8b bb       	out	0x1b, r24	; 27
    2cac:	08 95       	ret
		}
		break;
	case 1 :
		if(Value == 0xff)
    2cae:	4f 3f       	cpi	r20, 0xFF	; 255
    2cb0:	09 f0       	breq	.+2      	; 0x2cb4 <DIO_VidSetPinValue+0x4e>
    2cb2:	40 c0       	rjmp	.+128    	; 0x2d34 <DIO_VidSetPinValue+0xce>
		{
			SET_BIT(PORTB_Reg,Pin);
    2cb4:	28 b3       	in	r18, 0x18	; 24
    2cb6:	81 e0       	ldi	r24, 0x01	; 1
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	02 c0       	rjmp	.+4      	; 0x2cc0 <DIO_VidSetPinValue+0x5a>
    2cbc:	88 0f       	add	r24, r24
    2cbe:	99 1f       	adc	r25, r25
    2cc0:	6a 95       	dec	r22
    2cc2:	e2 f7       	brpl	.-8      	; 0x2cbc <DIO_VidSetPinValue+0x56>
    2cc4:	82 2b       	or	r24, r18
    2cc6:	88 bb       	out	0x18, r24	; 24
    2cc8:	08 95       	ret
		{
			CLR_BIT(PORTB_Reg,Pin);
		}
		break;
	case 2 :
		if(Value == 0xff)
    2cca:	4f 3f       	cpi	r20, 0xFF	; 255
    2ccc:	59 f4       	brne	.+22     	; 0x2ce4 <DIO_VidSetPinValue+0x7e>
		{
			SET_BIT(PORTC_Reg,Pin);
    2cce:	25 b3       	in	r18, 0x15	; 21
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	02 c0       	rjmp	.+4      	; 0x2cda <DIO_VidSetPinValue+0x74>
    2cd6:	88 0f       	add	r24, r24
    2cd8:	99 1f       	adc	r25, r25
    2cda:	6a 95       	dec	r22
    2cdc:	e2 f7       	brpl	.-8      	; 0x2cd6 <DIO_VidSetPinValue+0x70>
    2cde:	82 2b       	or	r24, r18
    2ce0:	85 bb       	out	0x15, r24	; 21
    2ce2:	08 95       	ret
		}
		else if(Value == 0)
    2ce4:	41 11       	cpse	r20, r1
    2ce6:	26 c0       	rjmp	.+76     	; 0x2d34 <DIO_VidSetPinValue+0xce>
		{
			CLR_BIT(PORTC_Reg,Pin);
    2ce8:	25 b3       	in	r18, 0x15	; 21
    2cea:	81 e0       	ldi	r24, 0x01	; 1
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	02 c0       	rjmp	.+4      	; 0x2cf4 <DIO_VidSetPinValue+0x8e>
    2cf0:	88 0f       	add	r24, r24
    2cf2:	99 1f       	adc	r25, r25
    2cf4:	6a 95       	dec	r22
    2cf6:	e2 f7       	brpl	.-8      	; 0x2cf0 <DIO_VidSetPinValue+0x8a>
    2cf8:	80 95       	com	r24
    2cfa:	82 23       	and	r24, r18
    2cfc:	85 bb       	out	0x15, r24	; 21
    2cfe:	08 95       	ret
		}
		break;
	case 3 :
		if(Value == 0xff)
    2d00:	4f 3f       	cpi	r20, 0xFF	; 255
    2d02:	59 f4       	brne	.+22     	; 0x2d1a <DIO_VidSetPinValue+0xb4>
		{
			SET_BIT(PORTD_Reg,Pin);
    2d04:	22 b3       	in	r18, 0x12	; 18
    2d06:	81 e0       	ldi	r24, 0x01	; 1
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	02 c0       	rjmp	.+4      	; 0x2d10 <DIO_VidSetPinValue+0xaa>
    2d0c:	88 0f       	add	r24, r24
    2d0e:	99 1f       	adc	r25, r25
    2d10:	6a 95       	dec	r22
    2d12:	e2 f7       	brpl	.-8      	; 0x2d0c <DIO_VidSetPinValue+0xa6>
    2d14:	82 2b       	or	r24, r18
    2d16:	82 bb       	out	0x12, r24	; 18
    2d18:	08 95       	ret
		}
		else if(Value == 0)
    2d1a:	41 11       	cpse	r20, r1
    2d1c:	0b c0       	rjmp	.+22     	; 0x2d34 <DIO_VidSetPinValue+0xce>
		{
			CLR_BIT(PORTD_Reg,Pin);
    2d1e:	22 b3       	in	r18, 0x12	; 18
    2d20:	81 e0       	ldi	r24, 0x01	; 1
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	02 c0       	rjmp	.+4      	; 0x2d2a <DIO_VidSetPinValue+0xc4>
    2d26:	88 0f       	add	r24, r24
    2d28:	99 1f       	adc	r25, r25
    2d2a:	6a 95       	dec	r22
    2d2c:	e2 f7       	brpl	.-8      	; 0x2d26 <DIO_VidSetPinValue+0xc0>
    2d2e:	80 95       	com	r24
    2d30:	82 23       	and	r24, r18
    2d32:	82 bb       	out	0x12, r24	; 18
    2d34:	08 95       	ret

00002d36 <INT0_Init>:


void INT0_Init(uint8_t INT_MODE )
{ 
	/* Set Global Interrupt Enable */
	sei();
    2d36:	78 94       	sei
	
	/* Enable INT0 */
    SET_BIT(GICR,6);  // 6 INT0
    2d38:	9b b7       	in	r25, 0x3b	; 59
    2d3a:	90 64       	ori	r25, 0x40	; 64
    2d3c:	9b bf       	out	0x3b, r25	; 59

	/* Choose Int Mode */
	if(INT_MODE == Low_Lvl)
    2d3e:	81 11       	cpse	r24, r1
    2d40:	07 c0       	rjmp	.+14     	; 0x2d50 <INT0_Init+0x1a>
	{
		CLR_BIT(MCUCR,0); // 0=ISC00
    2d42:	85 b7       	in	r24, 0x35	; 53
    2d44:	8e 7f       	andi	r24, 0xFE	; 254
    2d46:	85 bf       	out	0x35, r24	; 53
		CLR_BIT(MCUCR,1); // 1=ISC01
    2d48:	85 b7       	in	r24, 0x35	; 53
    2d4a:	8d 7f       	andi	r24, 0xFD	; 253
    2d4c:	85 bf       	out	0x35, r24	; 53
    2d4e:	08 95       	ret
	}
	else if(INT_MODE == Logical_Change)
    2d50:	81 30       	cpi	r24, 0x01	; 1
    2d52:	39 f4       	brne	.+14     	; 0x2d62 <INT0_Init+0x2c>
	{
		SET_BIT(MCUCR,0);
    2d54:	85 b7       	in	r24, 0x35	; 53
    2d56:	81 60       	ori	r24, 0x01	; 1
    2d58:	85 bf       	out	0x35, r24	; 53
		CLR_BIT(MCUCR,1);
    2d5a:	85 b7       	in	r24, 0x35	; 53
    2d5c:	8d 7f       	andi	r24, 0xFD	; 253
    2d5e:	85 bf       	out	0x35, r24	; 53
    2d60:	08 95       	ret
	}
	else if(INT_MODE == Falling_Edge)
    2d62:	82 30       	cpi	r24, 0x02	; 2
    2d64:	39 f4       	brne	.+14     	; 0x2d74 <INT0_Init+0x3e>
	{
		CLR_BIT(MCUCR,0);
    2d66:	85 b7       	in	r24, 0x35	; 53
    2d68:	8e 7f       	andi	r24, 0xFE	; 254
    2d6a:	85 bf       	out	0x35, r24	; 53
		SET_BIT(MCUCR,1);
    2d6c:	85 b7       	in	r24, 0x35	; 53
    2d6e:	82 60       	ori	r24, 0x02	; 2
    2d70:	85 bf       	out	0x35, r24	; 53
    2d72:	08 95       	ret
	}
	else if(INT_MODE == Rising_Edge)
    2d74:	83 30       	cpi	r24, 0x03	; 3
    2d76:	31 f4       	brne	.+12     	; 0x2d84 <INT0_Init+0x4e>
	{
		SET_BIT(MCUCR,0);
    2d78:	85 b7       	in	r24, 0x35	; 53
    2d7a:	81 60       	ori	r24, 0x01	; 1
    2d7c:	85 bf       	out	0x35, r24	; 53
		SET_BIT(MCUCR,1);
    2d7e:	85 b7       	in	r24, 0x35	; 53
    2d80:	82 60       	ori	r24, 0x02	; 2
    2d82:	85 bf       	out	0x35, r24	; 53
    2d84:	08 95       	ret

00002d86 <Fast_PWM1_init>:

void Fast_PWM1_init(uint8_t prescaler , uint16_t value , uint8_t pin)
{


	switch(pin)
    2d86:	44 23       	and	r20, r20
    2d88:	19 f0       	breq	.+6      	; 0x2d90 <Fast_PWM1_init+0xa>
    2d8a:	41 30       	cpi	r20, 0x01	; 1
    2d8c:	b1 f0       	breq	.+44     	; 0x2dba <Fast_PWM1_init+0x34>
    2d8e:	29 c0       	rjmp	.+82     	; 0x2de2 <Fast_PWM1_init+0x5c>
	{
	case OC1A :
		CLR_BIT(TCCR1A,WGM10);
    2d90:	9f b5       	in	r25, 0x2f	; 47
    2d92:	9e 7f       	andi	r25, 0xFE	; 254
    2d94:	9f bd       	out	0x2f, r25	; 47
		SET_BIT(TCCR1A,WGM11);
    2d96:	9f b5       	in	r25, 0x2f	; 47
    2d98:	92 60       	ori	r25, 0x02	; 2
    2d9a:	9f bd       	out	0x2f, r25	; 47

		SET_BIT(TCCR1B,WGM12);
    2d9c:	9e b5       	in	r25, 0x2e	; 46
    2d9e:	98 60       	ori	r25, 0x08	; 8
    2da0:	9e bd       	out	0x2e, r25	; 46
		SET_BIT(TCCR1B,WGM13);
    2da2:	9e b5       	in	r25, 0x2e	; 46
    2da4:	90 61       	ori	r25, 0x10	; 16
    2da6:	9e bd       	out	0x2e, r25	; 46

		CLR_BIT(TCCR1A,COM1A0);
    2da8:	9f b5       	in	r25, 0x2f	; 47
    2daa:	9f 7b       	andi	r25, 0xBF	; 191
    2dac:	9f bd       	out	0x2f, r25	; 47
		SET_BIT(TCCR1A,COM1A1);
    2dae:	9f b5       	in	r25, 0x2f	; 47
    2db0:	90 68       	ori	r25, 0x80	; 128
    2db2:	9f bd       	out	0x2f, r25	; 47

		OCR1A = value ;
    2db4:	7b bd       	out	0x2b, r23	; 43
    2db6:	6a bd       	out	0x2a, r22	; 42

		break;
    2db8:	14 c0       	rjmp	.+40     	; 0x2de2 <Fast_PWM1_init+0x5c>
	case OC1B :
		CLR_BIT(TCCR1A,WGM10);
    2dba:	9f b5       	in	r25, 0x2f	; 47
    2dbc:	9e 7f       	andi	r25, 0xFE	; 254
    2dbe:	9f bd       	out	0x2f, r25	; 47
		SET_BIT(TCCR1A,WGM11);
    2dc0:	9f b5       	in	r25, 0x2f	; 47
    2dc2:	92 60       	ori	r25, 0x02	; 2
    2dc4:	9f bd       	out	0x2f, r25	; 47

		SET_BIT(TCCR1B,WGM12);
    2dc6:	9e b5       	in	r25, 0x2e	; 46
    2dc8:	98 60       	ori	r25, 0x08	; 8
    2dca:	9e bd       	out	0x2e, r25	; 46
		SET_BIT(TCCR1B,WGM13);
    2dcc:	9e b5       	in	r25, 0x2e	; 46
    2dce:	90 61       	ori	r25, 0x10	; 16
    2dd0:	9e bd       	out	0x2e, r25	; 46

		OCR1B = value ;
    2dd2:	79 bd       	out	0x29, r23	; 41
    2dd4:	68 bd       	out	0x28, r22	; 40

		CLR_BIT(TCCR1A,COM1B0);
    2dd6:	9f b5       	in	r25, 0x2f	; 47
    2dd8:	9f 7e       	andi	r25, 0xEF	; 239
    2dda:	9f bd       	out	0x2f, r25	; 47
		SET_BIT(TCCR1A,COM1B1);
    2ddc:	9f b5       	in	r25, 0x2f	; 47
    2dde:	90 62       	ori	r25, 0x20	; 32
    2de0:	9f bd       	out	0x2f, r25	; 47
	}



	/* set prescaler */
	switch (prescaler)
    2de2:	83 30       	cpi	r24, 0x03	; 3
    2de4:	f9 f0       	breq	.+62     	; 0x2e24 <Fast_PWM1_init+0x9e>
    2de6:	28 f4       	brcc	.+10     	; 0x2df2 <Fast_PWM1_init+0x6c>
    2de8:	81 30       	cpi	r24, 0x01	; 1
    2dea:	41 f0       	breq	.+16     	; 0x2dfc <Fast_PWM1_init+0x76>
    2dec:	82 30       	cpi	r24, 0x02	; 2
    2dee:	81 f0       	breq	.+32     	; 0x2e10 <Fast_PWM1_init+0x8a>
    2df0:	36 c0       	rjmp	.+108    	; 0x2e5e <Fast_PWM1_init+0xd8>
    2df2:	84 30       	cpi	r24, 0x04	; 4
    2df4:	09 f1       	breq	.+66     	; 0x2e38 <Fast_PWM1_init+0xb2>
    2df6:	85 30       	cpi	r24, 0x05	; 5
    2df8:	49 f1       	breq	.+82     	; 0x2e4c <Fast_PWM1_init+0xc6>
    2dfa:	31 c0       	rjmp	.+98     	; 0x2e5e <Fast_PWM1_init+0xd8>
		{
		case 1 :
			SET_BIT(TCCR1B,CS10);
    2dfc:	8e b5       	in	r24, 0x2e	; 46
    2dfe:	81 60       	ori	r24, 0x01	; 1
    2e00:	8e bd       	out	0x2e, r24	; 46
			CLR_BIT(TCCR1B,CS11);
    2e02:	8e b5       	in	r24, 0x2e	; 46
    2e04:	8d 7f       	andi	r24, 0xFD	; 253
    2e06:	8e bd       	out	0x2e, r24	; 46
			CLR_BIT(TCCR1B,CS12);
    2e08:	8e b5       	in	r24, 0x2e	; 46
    2e0a:	8b 7f       	andi	r24, 0xFB	; 251
    2e0c:	8e bd       	out	0x2e, r24	; 46
			break;
    2e0e:	27 c0       	rjmp	.+78     	; 0x2e5e <Fast_PWM1_init+0xd8>
		case 2 :
			CLR_BIT(TCCR1B,CS00);
    2e10:	8e b5       	in	r24, 0x2e	; 46
    2e12:	8e 7f       	andi	r24, 0xFE	; 254
    2e14:	8e bd       	out	0x2e, r24	; 46
			SET_BIT(TCCR1B,CS11);
    2e16:	8e b5       	in	r24, 0x2e	; 46
    2e18:	82 60       	ori	r24, 0x02	; 2
    2e1a:	8e bd       	out	0x2e, r24	; 46
			CLR_BIT(TCCR1B,CS12);
    2e1c:	8e b5       	in	r24, 0x2e	; 46
    2e1e:	8b 7f       	andi	r24, 0xFB	; 251
    2e20:	8e bd       	out	0x2e, r24	; 46
			break;
    2e22:	1d c0       	rjmp	.+58     	; 0x2e5e <Fast_PWM1_init+0xd8>
		case 3 :
			SET_BIT(TCCR1B,CS00);
    2e24:	8e b5       	in	r24, 0x2e	; 46
    2e26:	81 60       	ori	r24, 0x01	; 1
    2e28:	8e bd       	out	0x2e, r24	; 46
			SET_BIT(TCCR1B,CS11);
    2e2a:	8e b5       	in	r24, 0x2e	; 46
    2e2c:	82 60       	ori	r24, 0x02	; 2
    2e2e:	8e bd       	out	0x2e, r24	; 46
			CLR_BIT(TCCR1B,CS12);
    2e30:	8e b5       	in	r24, 0x2e	; 46
    2e32:	8b 7f       	andi	r24, 0xFB	; 251
    2e34:	8e bd       	out	0x2e, r24	; 46
			break;
    2e36:	13 c0       	rjmp	.+38     	; 0x2e5e <Fast_PWM1_init+0xd8>

		case 4 :
			CLR_BIT(TCCR1B,CS00);
    2e38:	8e b5       	in	r24, 0x2e	; 46
    2e3a:	8e 7f       	andi	r24, 0xFE	; 254
    2e3c:	8e bd       	out	0x2e, r24	; 46
			CLR_BIT(TCCR1B,CS11);
    2e3e:	8e b5       	in	r24, 0x2e	; 46
    2e40:	8d 7f       	andi	r24, 0xFD	; 253
    2e42:	8e bd       	out	0x2e, r24	; 46
			SET_BIT(TCCR1B,CS12);
    2e44:	8e b5       	in	r24, 0x2e	; 46
    2e46:	84 60       	ori	r24, 0x04	; 4
    2e48:	8e bd       	out	0x2e, r24	; 46
			break;
    2e4a:	09 c0       	rjmp	.+18     	; 0x2e5e <Fast_PWM1_init+0xd8>

		case 5 :
			SET_BIT(TCCR1B,CS00);
    2e4c:	8e b5       	in	r24, 0x2e	; 46
    2e4e:	81 60       	ori	r24, 0x01	; 1
    2e50:	8e bd       	out	0x2e, r24	; 46
			CLR_BIT(TCCR1B,CS11);
    2e52:	8e b5       	in	r24, 0x2e	; 46
    2e54:	8d 7f       	andi	r24, 0xFD	; 253
    2e56:	8e bd       	out	0x2e, r24	; 46
			SET_BIT(TCCR1B,CS12);
    2e58:	8e b5       	in	r24, 0x2e	; 46
    2e5a:	84 60       	ori	r24, 0x04	; 4
    2e5c:	8e bd       	out	0x2e, r24	; 46
			break;
		}

	/* set top value*/
	ICR1 = 1023 ;
    2e5e:	8f ef       	ldi	r24, 0xFF	; 255
    2e60:	93 e0       	ldi	r25, 0x03	; 3
    2e62:	97 bd       	out	0x27, r25	; 39
    2e64:	86 bd       	out	0x26, r24	; 38
    2e66:	08 95       	ret

00002e68 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
    2e68:	cf 92       	push	r12
    2e6a:	df 92       	push	r13
    2e6c:	ef 92       	push	r14
    2e6e:	ff 92       	push	r15
    2e70:	0f 93       	push	r16
    2e72:	1f 93       	push	r17
    2e74:	cf 93       	push	r28
    2e76:	df 93       	push	r29
    2e78:	8c 01       	movw	r16, r24
    2e7a:	eb 01       	movw	r28, r22
  uint32_t nsec_part = nsec % 1000000000UL;
    2e7c:	68 81       	ld	r22, Y
    2e7e:	79 81       	ldd	r23, Y+1	; 0x01
    2e80:	8a 81       	ldd	r24, Y+2	; 0x02
    2e82:	9b 81       	ldd	r25, Y+3	; 0x03
  uint32_t sec_part = nsec / 1000000000UL;
  sec += sec_part;
    2e84:	20 e0       	ldi	r18, 0x00	; 0
    2e86:	3a ec       	ldi	r19, 0xCA	; 202
    2e88:	4a e9       	ldi	r20, 0x9A	; 154
    2e8a:	5b e3       	ldi	r21, 0x3B	; 59
    2e8c:	0e 94 cc 19 	call	0x3398	; 0x3398 <__udivmodsi4>
    2e90:	f8 01       	movw	r30, r16
    2e92:	c0 80       	ld	r12, Z
    2e94:	d1 80       	ldd	r13, Z+1	; 0x01
    2e96:	e2 80       	ldd	r14, Z+2	; 0x02
    2e98:	f3 80       	ldd	r15, Z+3	; 0x03
    2e9a:	c2 0e       	add	r12, r18
    2e9c:	d3 1e       	adc	r13, r19
    2e9e:	e4 1e       	adc	r14, r20
    2ea0:	f5 1e       	adc	r15, r21
    2ea2:	c0 82       	st	Z, r12
    2ea4:	d1 82       	std	Z+1, r13	; 0x01
    2ea6:	e2 82       	std	Z+2, r14	; 0x02
    2ea8:	f3 82       	std	Z+3, r15	; 0x03
  nsec = nsec_part;
    2eaa:	68 83       	st	Y, r22
    2eac:	79 83       	std	Y+1, r23	; 0x01
    2eae:	8a 83       	std	Y+2, r24	; 0x02
    2eb0:	9b 83       	std	Y+3, r25	; 0x03
}
    2eb2:	df 91       	pop	r29
    2eb4:	cf 91       	pop	r28
    2eb6:	1f 91       	pop	r17
    2eb8:	0f 91       	pop	r16
    2eba:	ff 90       	pop	r15
    2ebc:	ef 90       	pop	r14
    2ebe:	df 90       	pop	r13
    2ec0:	cf 90       	pop	r12
    2ec2:	08 95       	ret

00002ec4 <TIM0_OVF_Init>:

void TIM0_OVF_Init(uint8_t prescaler, uint8_t Init_Ticks)
{

	/* set normal mode */
	CLR_BIT(TCCR0,WGM00);
    2ec4:	93 b7       	in	r25, 0x33	; 51
    2ec6:	9f 7b       	andi	r25, 0xBF	; 191
    2ec8:	93 bf       	out	0x33, r25	; 51
	CLR_BIT(TCCR0,WGM01);
    2eca:	93 b7       	in	r25, 0x33	; 51
    2ecc:	97 7f       	andi	r25, 0xF7	; 247
    2ece:	93 bf       	out	0x33, r25	; 51

	/* set timer count */
	TCNT0 = Init_Ticks ;
    2ed0:	62 bf       	out	0x32, r22	; 50

	/* set prescaller */

	switch (prescaler)
    2ed2:	83 30       	cpi	r24, 0x03	; 3
    2ed4:	f9 f0       	breq	.+62     	; 0x2f14 <TIM0_OVF_Init+0x50>
    2ed6:	28 f4       	brcc	.+10     	; 0x2ee2 <TIM0_OVF_Init+0x1e>
    2ed8:	81 30       	cpi	r24, 0x01	; 1
    2eda:	41 f0       	breq	.+16     	; 0x2eec <TIM0_OVF_Init+0x28>
    2edc:	82 30       	cpi	r24, 0x02	; 2
    2ede:	81 f0       	breq	.+32     	; 0x2f00 <TIM0_OVF_Init+0x3c>
    2ee0:	36 c0       	rjmp	.+108    	; 0x2f4e <TIM0_OVF_Init+0x8a>
    2ee2:	84 30       	cpi	r24, 0x04	; 4
    2ee4:	09 f1       	breq	.+66     	; 0x2f28 <TIM0_OVF_Init+0x64>
    2ee6:	85 30       	cpi	r24, 0x05	; 5
    2ee8:	49 f1       	breq	.+82     	; 0x2f3c <TIM0_OVF_Init+0x78>
    2eea:	31 c0       	rjmp	.+98     	; 0x2f4e <TIM0_OVF_Init+0x8a>
	{
		case 1 :
		SET_BIT(TCCR0,CS00);
    2eec:	83 b7       	in	r24, 0x33	; 51
    2eee:	81 60       	ori	r24, 0x01	; 1
    2ef0:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,CS01);
    2ef2:	83 b7       	in	r24, 0x33	; 51
    2ef4:	8d 7f       	andi	r24, 0xFD	; 253
    2ef6:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,CS02);
    2ef8:	83 b7       	in	r24, 0x33	; 51
    2efa:	8b 7f       	andi	r24, 0xFB	; 251
    2efc:	83 bf       	out	0x33, r24	; 51
		break;
    2efe:	27 c0       	rjmp	.+78     	; 0x2f4e <TIM0_OVF_Init+0x8a>
		
		case 2 :
		CLR_BIT(TCCR0,CS00);
    2f00:	83 b7       	in	r24, 0x33	; 51
    2f02:	8e 7f       	andi	r24, 0xFE	; 254
    2f04:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS01);
    2f06:	83 b7       	in	r24, 0x33	; 51
    2f08:	82 60       	ori	r24, 0x02	; 2
    2f0a:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,CS02);
    2f0c:	83 b7       	in	r24, 0x33	; 51
    2f0e:	8b 7f       	andi	r24, 0xFB	; 251
    2f10:	83 bf       	out	0x33, r24	; 51
		break;
    2f12:	1d c0       	rjmp	.+58     	; 0x2f4e <TIM0_OVF_Init+0x8a>
		
		case 3 :
		SET_BIT(TCCR0,CS00);
    2f14:	83 b7       	in	r24, 0x33	; 51
    2f16:	81 60       	ori	r24, 0x01	; 1
    2f18:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS01);
    2f1a:	83 b7       	in	r24, 0x33	; 51
    2f1c:	82 60       	ori	r24, 0x02	; 2
    2f1e:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,CS02);
    2f20:	83 b7       	in	r24, 0x33	; 51
    2f22:	8b 7f       	andi	r24, 0xFB	; 251
    2f24:	83 bf       	out	0x33, r24	; 51
		break;
    2f26:	13 c0       	rjmp	.+38     	; 0x2f4e <TIM0_OVF_Init+0x8a>

		case 4 :
		CLR_BIT(TCCR0,CS00);
    2f28:	83 b7       	in	r24, 0x33	; 51
    2f2a:	8e 7f       	andi	r24, 0xFE	; 254
    2f2c:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,CS01);
    2f2e:	83 b7       	in	r24, 0x33	; 51
    2f30:	8d 7f       	andi	r24, 0xFD	; 253
    2f32:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS02);
    2f34:	83 b7       	in	r24, 0x33	; 51
    2f36:	84 60       	ori	r24, 0x04	; 4
    2f38:	83 bf       	out	0x33, r24	; 51
		break;
    2f3a:	09 c0       	rjmp	.+18     	; 0x2f4e <TIM0_OVF_Init+0x8a>

		case 5 :
		SET_BIT(TCCR0,CS00);
    2f3c:	83 b7       	in	r24, 0x33	; 51
    2f3e:	81 60       	ori	r24, 0x01	; 1
    2f40:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,CS01);
    2f42:	83 b7       	in	r24, 0x33	; 51
    2f44:	8d 7f       	andi	r24, 0xFD	; 253
    2f46:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS02);
    2f48:	83 b7       	in	r24, 0x33	; 51
    2f4a:	84 60       	ori	r24, 0x04	; 4
    2f4c:	83 bf       	out	0x33, r24	; 51
		break;
	}

	SET_BIT(TIMSK,TOIE0);
    2f4e:	89 b7       	in	r24, 0x39	; 57
    2f50:	81 60       	ori	r24, 0x01	; 1
    2f52:	89 bf       	out	0x39, r24	; 57
	sei();
    2f54:	78 94       	sei
    2f56:	08 95       	ret

00002f58 <__subsf3>:
    2f58:	50 58       	subi	r21, 0x80	; 128

00002f5a <__addsf3>:
    2f5a:	bb 27       	eor	r27, r27
    2f5c:	aa 27       	eor	r26, r26
    2f5e:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <__addsf3x>
    2f62:	0c 94 15 19 	jmp	0x322a	; 0x322a <__fp_round>
    2f66:	0e 94 07 19 	call	0x320e	; 0x320e <__fp_pscA>
    2f6a:	38 f0       	brcs	.+14     	; 0x2f7a <__addsf3+0x20>
    2f6c:	0e 94 0e 19 	call	0x321c	; 0x321c <__fp_pscB>
    2f70:	20 f0       	brcs	.+8      	; 0x2f7a <__addsf3+0x20>
    2f72:	39 f4       	brne	.+14     	; 0x2f82 <__addsf3+0x28>
    2f74:	9f 3f       	cpi	r25, 0xFF	; 255
    2f76:	19 f4       	brne	.+6      	; 0x2f7e <__addsf3+0x24>
    2f78:	26 f4       	brtc	.+8      	; 0x2f82 <__addsf3+0x28>
    2f7a:	0c 94 04 19 	jmp	0x3208	; 0x3208 <__fp_nan>
    2f7e:	0e f4       	brtc	.+2      	; 0x2f82 <__addsf3+0x28>
    2f80:	e0 95       	com	r30
    2f82:	e7 fb       	bst	r30, 7
    2f84:	0c 94 fe 18 	jmp	0x31fc	; 0x31fc <__fp_inf>

00002f88 <__addsf3x>:
    2f88:	e9 2f       	mov	r30, r25
    2f8a:	0e 94 26 19 	call	0x324c	; 0x324c <__fp_split3>
    2f8e:	58 f3       	brcs	.-42     	; 0x2f66 <__addsf3+0xc>
    2f90:	ba 17       	cp	r27, r26
    2f92:	62 07       	cpc	r22, r18
    2f94:	73 07       	cpc	r23, r19
    2f96:	84 07       	cpc	r24, r20
    2f98:	95 07       	cpc	r25, r21
    2f9a:	20 f0       	brcs	.+8      	; 0x2fa4 <__addsf3x+0x1c>
    2f9c:	79 f4       	brne	.+30     	; 0x2fbc <__addsf3x+0x34>
    2f9e:	a6 f5       	brtc	.+104    	; 0x3008 <__addsf3x+0x80>
    2fa0:	0c 94 48 19 	jmp	0x3290	; 0x3290 <__fp_zero>
    2fa4:	0e f4       	brtc	.+2      	; 0x2fa8 <__addsf3x+0x20>
    2fa6:	e0 95       	com	r30
    2fa8:	0b 2e       	mov	r0, r27
    2faa:	ba 2f       	mov	r27, r26
    2fac:	a0 2d       	mov	r26, r0
    2fae:	0b 01       	movw	r0, r22
    2fb0:	b9 01       	movw	r22, r18
    2fb2:	90 01       	movw	r18, r0
    2fb4:	0c 01       	movw	r0, r24
    2fb6:	ca 01       	movw	r24, r20
    2fb8:	a0 01       	movw	r20, r0
    2fba:	11 24       	eor	r1, r1
    2fbc:	ff 27       	eor	r31, r31
    2fbe:	59 1b       	sub	r21, r25
    2fc0:	99 f0       	breq	.+38     	; 0x2fe8 <__addsf3x+0x60>
    2fc2:	59 3f       	cpi	r21, 0xF9	; 249
    2fc4:	50 f4       	brcc	.+20     	; 0x2fda <__addsf3x+0x52>
    2fc6:	50 3e       	cpi	r21, 0xE0	; 224
    2fc8:	68 f1       	brcs	.+90     	; 0x3024 <__addsf3x+0x9c>
    2fca:	1a 16       	cp	r1, r26
    2fcc:	f0 40       	sbci	r31, 0x00	; 0
    2fce:	a2 2f       	mov	r26, r18
    2fd0:	23 2f       	mov	r18, r19
    2fd2:	34 2f       	mov	r19, r20
    2fd4:	44 27       	eor	r20, r20
    2fd6:	58 5f       	subi	r21, 0xF8	; 248
    2fd8:	f3 cf       	rjmp	.-26     	; 0x2fc0 <__addsf3x+0x38>
    2fda:	46 95       	lsr	r20
    2fdc:	37 95       	ror	r19
    2fde:	27 95       	ror	r18
    2fe0:	a7 95       	ror	r26
    2fe2:	f0 40       	sbci	r31, 0x00	; 0
    2fe4:	53 95       	inc	r21
    2fe6:	c9 f7       	brne	.-14     	; 0x2fda <__addsf3x+0x52>
    2fe8:	7e f4       	brtc	.+30     	; 0x3008 <__addsf3x+0x80>
    2fea:	1f 16       	cp	r1, r31
    2fec:	ba 0b       	sbc	r27, r26
    2fee:	62 0b       	sbc	r22, r18
    2ff0:	73 0b       	sbc	r23, r19
    2ff2:	84 0b       	sbc	r24, r20
    2ff4:	ba f0       	brmi	.+46     	; 0x3024 <__addsf3x+0x9c>
    2ff6:	91 50       	subi	r25, 0x01	; 1
    2ff8:	a1 f0       	breq	.+40     	; 0x3022 <__addsf3x+0x9a>
    2ffa:	ff 0f       	add	r31, r31
    2ffc:	bb 1f       	adc	r27, r27
    2ffe:	66 1f       	adc	r22, r22
    3000:	77 1f       	adc	r23, r23
    3002:	88 1f       	adc	r24, r24
    3004:	c2 f7       	brpl	.-16     	; 0x2ff6 <__addsf3x+0x6e>
    3006:	0e c0       	rjmp	.+28     	; 0x3024 <__addsf3x+0x9c>
    3008:	ba 0f       	add	r27, r26
    300a:	62 1f       	adc	r22, r18
    300c:	73 1f       	adc	r23, r19
    300e:	84 1f       	adc	r24, r20
    3010:	48 f4       	brcc	.+18     	; 0x3024 <__addsf3x+0x9c>
    3012:	87 95       	ror	r24
    3014:	77 95       	ror	r23
    3016:	67 95       	ror	r22
    3018:	b7 95       	ror	r27
    301a:	f7 95       	ror	r31
    301c:	9e 3f       	cpi	r25, 0xFE	; 254
    301e:	08 f0       	brcs	.+2      	; 0x3022 <__addsf3x+0x9a>
    3020:	b0 cf       	rjmp	.-160    	; 0x2f82 <__addsf3+0x28>
    3022:	93 95       	inc	r25
    3024:	88 0f       	add	r24, r24
    3026:	08 f0       	brcs	.+2      	; 0x302a <__addsf3x+0xa2>
    3028:	99 27       	eor	r25, r25
    302a:	ee 0f       	add	r30, r30
    302c:	97 95       	ror	r25
    302e:	87 95       	ror	r24
    3030:	08 95       	ret

00003032 <__divsf3>:
    3032:	0e 94 2d 18 	call	0x305a	; 0x305a <__divsf3x>
    3036:	0c 94 15 19 	jmp	0x322a	; 0x322a <__fp_round>
    303a:	0e 94 0e 19 	call	0x321c	; 0x321c <__fp_pscB>
    303e:	58 f0       	brcs	.+22     	; 0x3056 <__divsf3+0x24>
    3040:	0e 94 07 19 	call	0x320e	; 0x320e <__fp_pscA>
    3044:	40 f0       	brcs	.+16     	; 0x3056 <__divsf3+0x24>
    3046:	29 f4       	brne	.+10     	; 0x3052 <__divsf3+0x20>
    3048:	5f 3f       	cpi	r21, 0xFF	; 255
    304a:	29 f0       	breq	.+10     	; 0x3056 <__divsf3+0x24>
    304c:	0c 94 fe 18 	jmp	0x31fc	; 0x31fc <__fp_inf>
    3050:	51 11       	cpse	r21, r1
    3052:	0c 94 49 19 	jmp	0x3292	; 0x3292 <__fp_szero>
    3056:	0c 94 04 19 	jmp	0x3208	; 0x3208 <__fp_nan>

0000305a <__divsf3x>:
    305a:	0e 94 26 19 	call	0x324c	; 0x324c <__fp_split3>
    305e:	68 f3       	brcs	.-38     	; 0x303a <__divsf3+0x8>

00003060 <__divsf3_pse>:
    3060:	99 23       	and	r25, r25
    3062:	b1 f3       	breq	.-20     	; 0x3050 <__divsf3+0x1e>
    3064:	55 23       	and	r21, r21
    3066:	91 f3       	breq	.-28     	; 0x304c <__divsf3+0x1a>
    3068:	95 1b       	sub	r25, r21
    306a:	55 0b       	sbc	r21, r21
    306c:	bb 27       	eor	r27, r27
    306e:	aa 27       	eor	r26, r26
    3070:	62 17       	cp	r22, r18
    3072:	73 07       	cpc	r23, r19
    3074:	84 07       	cpc	r24, r20
    3076:	38 f0       	brcs	.+14     	; 0x3086 <__divsf3_pse+0x26>
    3078:	9f 5f       	subi	r25, 0xFF	; 255
    307a:	5f 4f       	sbci	r21, 0xFF	; 255
    307c:	22 0f       	add	r18, r18
    307e:	33 1f       	adc	r19, r19
    3080:	44 1f       	adc	r20, r20
    3082:	aa 1f       	adc	r26, r26
    3084:	a9 f3       	breq	.-22     	; 0x3070 <__divsf3_pse+0x10>
    3086:	35 d0       	rcall	.+106    	; 0x30f2 <__divsf3_pse+0x92>
    3088:	0e 2e       	mov	r0, r30
    308a:	3a f0       	brmi	.+14     	; 0x309a <__divsf3_pse+0x3a>
    308c:	e0 e8       	ldi	r30, 0x80	; 128
    308e:	32 d0       	rcall	.+100    	; 0x30f4 <__divsf3_pse+0x94>
    3090:	91 50       	subi	r25, 0x01	; 1
    3092:	50 40       	sbci	r21, 0x00	; 0
    3094:	e6 95       	lsr	r30
    3096:	00 1c       	adc	r0, r0
    3098:	ca f7       	brpl	.-14     	; 0x308c <__divsf3_pse+0x2c>
    309a:	2b d0       	rcall	.+86     	; 0x30f2 <__divsf3_pse+0x92>
    309c:	fe 2f       	mov	r31, r30
    309e:	29 d0       	rcall	.+82     	; 0x30f2 <__divsf3_pse+0x92>
    30a0:	66 0f       	add	r22, r22
    30a2:	77 1f       	adc	r23, r23
    30a4:	88 1f       	adc	r24, r24
    30a6:	bb 1f       	adc	r27, r27
    30a8:	26 17       	cp	r18, r22
    30aa:	37 07       	cpc	r19, r23
    30ac:	48 07       	cpc	r20, r24
    30ae:	ab 07       	cpc	r26, r27
    30b0:	b0 e8       	ldi	r27, 0x80	; 128
    30b2:	09 f0       	breq	.+2      	; 0x30b6 <__divsf3_pse+0x56>
    30b4:	bb 0b       	sbc	r27, r27
    30b6:	80 2d       	mov	r24, r0
    30b8:	bf 01       	movw	r22, r30
    30ba:	ff 27       	eor	r31, r31
    30bc:	93 58       	subi	r25, 0x83	; 131
    30be:	5f 4f       	sbci	r21, 0xFF	; 255
    30c0:	3a f0       	brmi	.+14     	; 0x30d0 <__divsf3_pse+0x70>
    30c2:	9e 3f       	cpi	r25, 0xFE	; 254
    30c4:	51 05       	cpc	r21, r1
    30c6:	78 f0       	brcs	.+30     	; 0x30e6 <__divsf3_pse+0x86>
    30c8:	0c 94 fe 18 	jmp	0x31fc	; 0x31fc <__fp_inf>
    30cc:	0c 94 49 19 	jmp	0x3292	; 0x3292 <__fp_szero>
    30d0:	5f 3f       	cpi	r21, 0xFF	; 255
    30d2:	e4 f3       	brlt	.-8      	; 0x30cc <__divsf3_pse+0x6c>
    30d4:	98 3e       	cpi	r25, 0xE8	; 232
    30d6:	d4 f3       	brlt	.-12     	; 0x30cc <__divsf3_pse+0x6c>
    30d8:	86 95       	lsr	r24
    30da:	77 95       	ror	r23
    30dc:	67 95       	ror	r22
    30de:	b7 95       	ror	r27
    30e0:	f7 95       	ror	r31
    30e2:	9f 5f       	subi	r25, 0xFF	; 255
    30e4:	c9 f7       	brne	.-14     	; 0x30d8 <__divsf3_pse+0x78>
    30e6:	88 0f       	add	r24, r24
    30e8:	91 1d       	adc	r25, r1
    30ea:	96 95       	lsr	r25
    30ec:	87 95       	ror	r24
    30ee:	97 f9       	bld	r25, 7
    30f0:	08 95       	ret
    30f2:	e1 e0       	ldi	r30, 0x01	; 1
    30f4:	66 0f       	add	r22, r22
    30f6:	77 1f       	adc	r23, r23
    30f8:	88 1f       	adc	r24, r24
    30fa:	bb 1f       	adc	r27, r27
    30fc:	62 17       	cp	r22, r18
    30fe:	73 07       	cpc	r23, r19
    3100:	84 07       	cpc	r24, r20
    3102:	ba 07       	cpc	r27, r26
    3104:	20 f0       	brcs	.+8      	; 0x310e <__divsf3_pse+0xae>
    3106:	62 1b       	sub	r22, r18
    3108:	73 0b       	sbc	r23, r19
    310a:	84 0b       	sbc	r24, r20
    310c:	ba 0b       	sbc	r27, r26
    310e:	ee 1f       	adc	r30, r30
    3110:	88 f7       	brcc	.-30     	; 0x30f4 <__divsf3_pse+0x94>
    3112:	e0 95       	com	r30
    3114:	08 95       	ret

00003116 <__fixsfsi>:
    3116:	0e 94 92 18 	call	0x3124	; 0x3124 <__fixunssfsi>
    311a:	68 94       	set
    311c:	b1 11       	cpse	r27, r1
    311e:	0c 94 49 19 	jmp	0x3292	; 0x3292 <__fp_szero>
    3122:	08 95       	ret

00003124 <__fixunssfsi>:
    3124:	0e 94 2e 19 	call	0x325c	; 0x325c <__fp_splitA>
    3128:	88 f0       	brcs	.+34     	; 0x314c <__fixunssfsi+0x28>
    312a:	9f 57       	subi	r25, 0x7F	; 127
    312c:	98 f0       	brcs	.+38     	; 0x3154 <__fixunssfsi+0x30>
    312e:	b9 2f       	mov	r27, r25
    3130:	99 27       	eor	r25, r25
    3132:	b7 51       	subi	r27, 0x17	; 23
    3134:	b0 f0       	brcs	.+44     	; 0x3162 <__fixunssfsi+0x3e>
    3136:	e1 f0       	breq	.+56     	; 0x3170 <__fixunssfsi+0x4c>
    3138:	66 0f       	add	r22, r22
    313a:	77 1f       	adc	r23, r23
    313c:	88 1f       	adc	r24, r24
    313e:	99 1f       	adc	r25, r25
    3140:	1a f0       	brmi	.+6      	; 0x3148 <__fixunssfsi+0x24>
    3142:	ba 95       	dec	r27
    3144:	c9 f7       	brne	.-14     	; 0x3138 <__fixunssfsi+0x14>
    3146:	14 c0       	rjmp	.+40     	; 0x3170 <__fixunssfsi+0x4c>
    3148:	b1 30       	cpi	r27, 0x01	; 1
    314a:	91 f0       	breq	.+36     	; 0x3170 <__fixunssfsi+0x4c>
    314c:	0e 94 48 19 	call	0x3290	; 0x3290 <__fp_zero>
    3150:	b1 e0       	ldi	r27, 0x01	; 1
    3152:	08 95       	ret
    3154:	0c 94 48 19 	jmp	0x3290	; 0x3290 <__fp_zero>
    3158:	67 2f       	mov	r22, r23
    315a:	78 2f       	mov	r23, r24
    315c:	88 27       	eor	r24, r24
    315e:	b8 5f       	subi	r27, 0xF8	; 248
    3160:	39 f0       	breq	.+14     	; 0x3170 <__fixunssfsi+0x4c>
    3162:	b9 3f       	cpi	r27, 0xF9	; 249
    3164:	cc f3       	brlt	.-14     	; 0x3158 <__fixunssfsi+0x34>
    3166:	86 95       	lsr	r24
    3168:	77 95       	ror	r23
    316a:	67 95       	ror	r22
    316c:	b3 95       	inc	r27
    316e:	d9 f7       	brne	.-10     	; 0x3166 <__fixunssfsi+0x42>
    3170:	3e f4       	brtc	.+14     	; 0x3180 <__fixunssfsi+0x5c>
    3172:	90 95       	com	r25
    3174:	80 95       	com	r24
    3176:	70 95       	com	r23
    3178:	61 95       	neg	r22
    317a:	7f 4f       	sbci	r23, 0xFF	; 255
    317c:	8f 4f       	sbci	r24, 0xFF	; 255
    317e:	9f 4f       	sbci	r25, 0xFF	; 255
    3180:	08 95       	ret

00003182 <__floatunsisf>:
    3182:	e8 94       	clt
    3184:	09 c0       	rjmp	.+18     	; 0x3198 <__floatsisf+0x12>

00003186 <__floatsisf>:
    3186:	97 fb       	bst	r25, 7
    3188:	3e f4       	brtc	.+14     	; 0x3198 <__floatsisf+0x12>
    318a:	90 95       	com	r25
    318c:	80 95       	com	r24
    318e:	70 95       	com	r23
    3190:	61 95       	neg	r22
    3192:	7f 4f       	sbci	r23, 0xFF	; 255
    3194:	8f 4f       	sbci	r24, 0xFF	; 255
    3196:	9f 4f       	sbci	r25, 0xFF	; 255
    3198:	99 23       	and	r25, r25
    319a:	a9 f0       	breq	.+42     	; 0x31c6 <__floatsisf+0x40>
    319c:	f9 2f       	mov	r31, r25
    319e:	96 e9       	ldi	r25, 0x96	; 150
    31a0:	bb 27       	eor	r27, r27
    31a2:	93 95       	inc	r25
    31a4:	f6 95       	lsr	r31
    31a6:	87 95       	ror	r24
    31a8:	77 95       	ror	r23
    31aa:	67 95       	ror	r22
    31ac:	b7 95       	ror	r27
    31ae:	f1 11       	cpse	r31, r1
    31b0:	f8 cf       	rjmp	.-16     	; 0x31a2 <__floatsisf+0x1c>
    31b2:	fa f4       	brpl	.+62     	; 0x31f2 <__floatsisf+0x6c>
    31b4:	bb 0f       	add	r27, r27
    31b6:	11 f4       	brne	.+4      	; 0x31bc <__floatsisf+0x36>
    31b8:	60 ff       	sbrs	r22, 0
    31ba:	1b c0       	rjmp	.+54     	; 0x31f2 <__floatsisf+0x6c>
    31bc:	6f 5f       	subi	r22, 0xFF	; 255
    31be:	7f 4f       	sbci	r23, 0xFF	; 255
    31c0:	8f 4f       	sbci	r24, 0xFF	; 255
    31c2:	9f 4f       	sbci	r25, 0xFF	; 255
    31c4:	16 c0       	rjmp	.+44     	; 0x31f2 <__floatsisf+0x6c>
    31c6:	88 23       	and	r24, r24
    31c8:	11 f0       	breq	.+4      	; 0x31ce <__floatsisf+0x48>
    31ca:	96 e9       	ldi	r25, 0x96	; 150
    31cc:	11 c0       	rjmp	.+34     	; 0x31f0 <__floatsisf+0x6a>
    31ce:	77 23       	and	r23, r23
    31d0:	21 f0       	breq	.+8      	; 0x31da <__floatsisf+0x54>
    31d2:	9e e8       	ldi	r25, 0x8E	; 142
    31d4:	87 2f       	mov	r24, r23
    31d6:	76 2f       	mov	r23, r22
    31d8:	05 c0       	rjmp	.+10     	; 0x31e4 <__floatsisf+0x5e>
    31da:	66 23       	and	r22, r22
    31dc:	71 f0       	breq	.+28     	; 0x31fa <__floatsisf+0x74>
    31de:	96 e8       	ldi	r25, 0x86	; 134
    31e0:	86 2f       	mov	r24, r22
    31e2:	70 e0       	ldi	r23, 0x00	; 0
    31e4:	60 e0       	ldi	r22, 0x00	; 0
    31e6:	2a f0       	brmi	.+10     	; 0x31f2 <__floatsisf+0x6c>
    31e8:	9a 95       	dec	r25
    31ea:	66 0f       	add	r22, r22
    31ec:	77 1f       	adc	r23, r23
    31ee:	88 1f       	adc	r24, r24
    31f0:	da f7       	brpl	.-10     	; 0x31e8 <__floatsisf+0x62>
    31f2:	88 0f       	add	r24, r24
    31f4:	96 95       	lsr	r25
    31f6:	87 95       	ror	r24
    31f8:	97 f9       	bld	r25, 7
    31fa:	08 95       	ret

000031fc <__fp_inf>:
    31fc:	97 f9       	bld	r25, 7
    31fe:	9f 67       	ori	r25, 0x7F	; 127
    3200:	80 e8       	ldi	r24, 0x80	; 128
    3202:	70 e0       	ldi	r23, 0x00	; 0
    3204:	60 e0       	ldi	r22, 0x00	; 0
    3206:	08 95       	ret

00003208 <__fp_nan>:
    3208:	9f ef       	ldi	r25, 0xFF	; 255
    320a:	80 ec       	ldi	r24, 0xC0	; 192
    320c:	08 95       	ret

0000320e <__fp_pscA>:
    320e:	00 24       	eor	r0, r0
    3210:	0a 94       	dec	r0
    3212:	16 16       	cp	r1, r22
    3214:	17 06       	cpc	r1, r23
    3216:	18 06       	cpc	r1, r24
    3218:	09 06       	cpc	r0, r25
    321a:	08 95       	ret

0000321c <__fp_pscB>:
    321c:	00 24       	eor	r0, r0
    321e:	0a 94       	dec	r0
    3220:	12 16       	cp	r1, r18
    3222:	13 06       	cpc	r1, r19
    3224:	14 06       	cpc	r1, r20
    3226:	05 06       	cpc	r0, r21
    3228:	08 95       	ret

0000322a <__fp_round>:
    322a:	09 2e       	mov	r0, r25
    322c:	03 94       	inc	r0
    322e:	00 0c       	add	r0, r0
    3230:	11 f4       	brne	.+4      	; 0x3236 <__fp_round+0xc>
    3232:	88 23       	and	r24, r24
    3234:	52 f0       	brmi	.+20     	; 0x324a <__fp_round+0x20>
    3236:	bb 0f       	add	r27, r27
    3238:	40 f4       	brcc	.+16     	; 0x324a <__fp_round+0x20>
    323a:	bf 2b       	or	r27, r31
    323c:	11 f4       	brne	.+4      	; 0x3242 <__fp_round+0x18>
    323e:	60 ff       	sbrs	r22, 0
    3240:	04 c0       	rjmp	.+8      	; 0x324a <__fp_round+0x20>
    3242:	6f 5f       	subi	r22, 0xFF	; 255
    3244:	7f 4f       	sbci	r23, 0xFF	; 255
    3246:	8f 4f       	sbci	r24, 0xFF	; 255
    3248:	9f 4f       	sbci	r25, 0xFF	; 255
    324a:	08 95       	ret

0000324c <__fp_split3>:
    324c:	57 fd       	sbrc	r21, 7
    324e:	90 58       	subi	r25, 0x80	; 128
    3250:	44 0f       	add	r20, r20
    3252:	55 1f       	adc	r21, r21
    3254:	59 f0       	breq	.+22     	; 0x326c <__fp_splitA+0x10>
    3256:	5f 3f       	cpi	r21, 0xFF	; 255
    3258:	71 f0       	breq	.+28     	; 0x3276 <__fp_splitA+0x1a>
    325a:	47 95       	ror	r20

0000325c <__fp_splitA>:
    325c:	88 0f       	add	r24, r24
    325e:	97 fb       	bst	r25, 7
    3260:	99 1f       	adc	r25, r25
    3262:	61 f0       	breq	.+24     	; 0x327c <__fp_splitA+0x20>
    3264:	9f 3f       	cpi	r25, 0xFF	; 255
    3266:	79 f0       	breq	.+30     	; 0x3286 <__fp_splitA+0x2a>
    3268:	87 95       	ror	r24
    326a:	08 95       	ret
    326c:	12 16       	cp	r1, r18
    326e:	13 06       	cpc	r1, r19
    3270:	14 06       	cpc	r1, r20
    3272:	55 1f       	adc	r21, r21
    3274:	f2 cf       	rjmp	.-28     	; 0x325a <__fp_split3+0xe>
    3276:	46 95       	lsr	r20
    3278:	f1 df       	rcall	.-30     	; 0x325c <__fp_splitA>
    327a:	08 c0       	rjmp	.+16     	; 0x328c <__fp_splitA+0x30>
    327c:	16 16       	cp	r1, r22
    327e:	17 06       	cpc	r1, r23
    3280:	18 06       	cpc	r1, r24
    3282:	99 1f       	adc	r25, r25
    3284:	f1 cf       	rjmp	.-30     	; 0x3268 <__fp_splitA+0xc>
    3286:	86 95       	lsr	r24
    3288:	71 05       	cpc	r23, r1
    328a:	61 05       	cpc	r22, r1
    328c:	08 94       	sec
    328e:	08 95       	ret

00003290 <__fp_zero>:
    3290:	e8 94       	clt

00003292 <__fp_szero>:
    3292:	bb 27       	eor	r27, r27
    3294:	66 27       	eor	r22, r22
    3296:	77 27       	eor	r23, r23
    3298:	cb 01       	movw	r24, r22
    329a:	97 f9       	bld	r25, 7
    329c:	08 95       	ret

0000329e <__mulsf3>:
    329e:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__mulsf3x>
    32a2:	0c 94 15 19 	jmp	0x322a	; 0x322a <__fp_round>
    32a6:	0e 94 07 19 	call	0x320e	; 0x320e <__fp_pscA>
    32aa:	38 f0       	brcs	.+14     	; 0x32ba <__mulsf3+0x1c>
    32ac:	0e 94 0e 19 	call	0x321c	; 0x321c <__fp_pscB>
    32b0:	20 f0       	brcs	.+8      	; 0x32ba <__mulsf3+0x1c>
    32b2:	95 23       	and	r25, r21
    32b4:	11 f0       	breq	.+4      	; 0x32ba <__mulsf3+0x1c>
    32b6:	0c 94 fe 18 	jmp	0x31fc	; 0x31fc <__fp_inf>
    32ba:	0c 94 04 19 	jmp	0x3208	; 0x3208 <__fp_nan>
    32be:	11 24       	eor	r1, r1
    32c0:	0c 94 49 19 	jmp	0x3292	; 0x3292 <__fp_szero>

000032c4 <__mulsf3x>:
    32c4:	0e 94 26 19 	call	0x324c	; 0x324c <__fp_split3>
    32c8:	70 f3       	brcs	.-36     	; 0x32a6 <__mulsf3+0x8>

000032ca <__mulsf3_pse>:
    32ca:	95 9f       	mul	r25, r21
    32cc:	c1 f3       	breq	.-16     	; 0x32be <__mulsf3+0x20>
    32ce:	95 0f       	add	r25, r21
    32d0:	50 e0       	ldi	r21, 0x00	; 0
    32d2:	55 1f       	adc	r21, r21
    32d4:	62 9f       	mul	r22, r18
    32d6:	f0 01       	movw	r30, r0
    32d8:	72 9f       	mul	r23, r18
    32da:	bb 27       	eor	r27, r27
    32dc:	f0 0d       	add	r31, r0
    32de:	b1 1d       	adc	r27, r1
    32e0:	63 9f       	mul	r22, r19
    32e2:	aa 27       	eor	r26, r26
    32e4:	f0 0d       	add	r31, r0
    32e6:	b1 1d       	adc	r27, r1
    32e8:	aa 1f       	adc	r26, r26
    32ea:	64 9f       	mul	r22, r20
    32ec:	66 27       	eor	r22, r22
    32ee:	b0 0d       	add	r27, r0
    32f0:	a1 1d       	adc	r26, r1
    32f2:	66 1f       	adc	r22, r22
    32f4:	82 9f       	mul	r24, r18
    32f6:	22 27       	eor	r18, r18
    32f8:	b0 0d       	add	r27, r0
    32fa:	a1 1d       	adc	r26, r1
    32fc:	62 1f       	adc	r22, r18
    32fe:	73 9f       	mul	r23, r19
    3300:	b0 0d       	add	r27, r0
    3302:	a1 1d       	adc	r26, r1
    3304:	62 1f       	adc	r22, r18
    3306:	83 9f       	mul	r24, r19
    3308:	a0 0d       	add	r26, r0
    330a:	61 1d       	adc	r22, r1
    330c:	22 1f       	adc	r18, r18
    330e:	74 9f       	mul	r23, r20
    3310:	33 27       	eor	r19, r19
    3312:	a0 0d       	add	r26, r0
    3314:	61 1d       	adc	r22, r1
    3316:	23 1f       	adc	r18, r19
    3318:	84 9f       	mul	r24, r20
    331a:	60 0d       	add	r22, r0
    331c:	21 1d       	adc	r18, r1
    331e:	82 2f       	mov	r24, r18
    3320:	76 2f       	mov	r23, r22
    3322:	6a 2f       	mov	r22, r26
    3324:	11 24       	eor	r1, r1
    3326:	9f 57       	subi	r25, 0x7F	; 127
    3328:	50 40       	sbci	r21, 0x00	; 0
    332a:	9a f0       	brmi	.+38     	; 0x3352 <__mulsf3_pse+0x88>
    332c:	f1 f0       	breq	.+60     	; 0x336a <__mulsf3_pse+0xa0>
    332e:	88 23       	and	r24, r24
    3330:	4a f0       	brmi	.+18     	; 0x3344 <__mulsf3_pse+0x7a>
    3332:	ee 0f       	add	r30, r30
    3334:	ff 1f       	adc	r31, r31
    3336:	bb 1f       	adc	r27, r27
    3338:	66 1f       	adc	r22, r22
    333a:	77 1f       	adc	r23, r23
    333c:	88 1f       	adc	r24, r24
    333e:	91 50       	subi	r25, 0x01	; 1
    3340:	50 40       	sbci	r21, 0x00	; 0
    3342:	a9 f7       	brne	.-22     	; 0x332e <__mulsf3_pse+0x64>
    3344:	9e 3f       	cpi	r25, 0xFE	; 254
    3346:	51 05       	cpc	r21, r1
    3348:	80 f0       	brcs	.+32     	; 0x336a <__mulsf3_pse+0xa0>
    334a:	0c 94 fe 18 	jmp	0x31fc	; 0x31fc <__fp_inf>
    334e:	0c 94 49 19 	jmp	0x3292	; 0x3292 <__fp_szero>
    3352:	5f 3f       	cpi	r21, 0xFF	; 255
    3354:	e4 f3       	brlt	.-8      	; 0x334e <__mulsf3_pse+0x84>
    3356:	98 3e       	cpi	r25, 0xE8	; 232
    3358:	d4 f3       	brlt	.-12     	; 0x334e <__mulsf3_pse+0x84>
    335a:	86 95       	lsr	r24
    335c:	77 95       	ror	r23
    335e:	67 95       	ror	r22
    3360:	b7 95       	ror	r27
    3362:	f7 95       	ror	r31
    3364:	e7 95       	ror	r30
    3366:	9f 5f       	subi	r25, 0xFF	; 255
    3368:	c1 f7       	brne	.-16     	; 0x335a <__mulsf3_pse+0x90>
    336a:	fe 2b       	or	r31, r30
    336c:	88 0f       	add	r24, r24
    336e:	91 1d       	adc	r25, r1
    3370:	96 95       	lsr	r25
    3372:	87 95       	ror	r24
    3374:	97 f9       	bld	r25, 7
    3376:	08 95       	ret

00003378 <__mulsi3>:
    3378:	db 01       	movw	r26, r22
    337a:	8f 93       	push	r24
    337c:	9f 93       	push	r25
    337e:	0e 94 ee 19 	call	0x33dc	; 0x33dc <__muluhisi3>
    3382:	bf 91       	pop	r27
    3384:	af 91       	pop	r26
    3386:	a2 9f       	mul	r26, r18
    3388:	80 0d       	add	r24, r0
    338a:	91 1d       	adc	r25, r1
    338c:	a3 9f       	mul	r26, r19
    338e:	90 0d       	add	r25, r0
    3390:	b2 9f       	mul	r27, r18
    3392:	90 0d       	add	r25, r0
    3394:	11 24       	eor	r1, r1
    3396:	08 95       	ret

00003398 <__udivmodsi4>:
    3398:	a1 e2       	ldi	r26, 0x21	; 33
    339a:	1a 2e       	mov	r1, r26
    339c:	aa 1b       	sub	r26, r26
    339e:	bb 1b       	sub	r27, r27
    33a0:	fd 01       	movw	r30, r26
    33a2:	0d c0       	rjmp	.+26     	; 0x33be <__udivmodsi4_ep>

000033a4 <__udivmodsi4_loop>:
    33a4:	aa 1f       	adc	r26, r26
    33a6:	bb 1f       	adc	r27, r27
    33a8:	ee 1f       	adc	r30, r30
    33aa:	ff 1f       	adc	r31, r31
    33ac:	a2 17       	cp	r26, r18
    33ae:	b3 07       	cpc	r27, r19
    33b0:	e4 07       	cpc	r30, r20
    33b2:	f5 07       	cpc	r31, r21
    33b4:	20 f0       	brcs	.+8      	; 0x33be <__udivmodsi4_ep>
    33b6:	a2 1b       	sub	r26, r18
    33b8:	b3 0b       	sbc	r27, r19
    33ba:	e4 0b       	sbc	r30, r20
    33bc:	f5 0b       	sbc	r31, r21

000033be <__udivmodsi4_ep>:
    33be:	66 1f       	adc	r22, r22
    33c0:	77 1f       	adc	r23, r23
    33c2:	88 1f       	adc	r24, r24
    33c4:	99 1f       	adc	r25, r25
    33c6:	1a 94       	dec	r1
    33c8:	69 f7       	brne	.-38     	; 0x33a4 <__udivmodsi4_loop>
    33ca:	60 95       	com	r22
    33cc:	70 95       	com	r23
    33ce:	80 95       	com	r24
    33d0:	90 95       	com	r25
    33d2:	9b 01       	movw	r18, r22
    33d4:	ac 01       	movw	r20, r24
    33d6:	bd 01       	movw	r22, r26
    33d8:	cf 01       	movw	r24, r30
    33da:	08 95       	ret

000033dc <__muluhisi3>:
    33dc:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__umulhisi3>
    33e0:	a5 9f       	mul	r26, r21
    33e2:	90 0d       	add	r25, r0
    33e4:	b4 9f       	mul	r27, r20
    33e6:	90 0d       	add	r25, r0
    33e8:	a4 9f       	mul	r26, r20
    33ea:	80 0d       	add	r24, r0
    33ec:	91 1d       	adc	r25, r1
    33ee:	11 24       	eor	r1, r1
    33f0:	08 95       	ret

000033f2 <__tablejump2__>:
    33f2:	ee 0f       	add	r30, r30
    33f4:	ff 1f       	adc	r31, r31
    33f6:	05 90       	lpm	r0, Z+
    33f8:	f4 91       	lpm	r31, Z
    33fa:	e0 2d       	mov	r30, r0
    33fc:	09 94       	ijmp

000033fe <__umulhisi3>:
    33fe:	a2 9f       	mul	r26, r18
    3400:	b0 01       	movw	r22, r0
    3402:	b3 9f       	mul	r27, r19
    3404:	c0 01       	movw	r24, r0
    3406:	a3 9f       	mul	r26, r19
    3408:	70 0d       	add	r23, r0
    340a:	81 1d       	adc	r24, r1
    340c:	11 24       	eor	r1, r1
    340e:	91 1d       	adc	r25, r1
    3410:	b2 9f       	mul	r27, r18
    3412:	70 0d       	add	r23, r0
    3414:	81 1d       	adc	r24, r1
    3416:	11 24       	eor	r1, r1
    3418:	91 1d       	adc	r25, r1
    341a:	08 95       	ret

0000341c <realloc>:
    341c:	a0 e0       	ldi	r26, 0x00	; 0
    341e:	b0 e0       	ldi	r27, 0x00	; 0
    3420:	e4 e1       	ldi	r30, 0x14	; 20
    3422:	fa e1       	ldi	r31, 0x1A	; 26
    3424:	0c 94 02 1c 	jmp	0x3804	; 0x3804 <__prologue_saves__+0x8>
    3428:	ec 01       	movw	r28, r24
    342a:	00 97       	sbiw	r24, 0x00	; 0
    342c:	21 f4       	brne	.+8      	; 0x3436 <realloc+0x1a>
    342e:	cb 01       	movw	r24, r22
    3430:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <malloc>
    3434:	b4 c0       	rjmp	.+360    	; 0x359e <realloc+0x182>
    3436:	fc 01       	movw	r30, r24
    3438:	e6 0f       	add	r30, r22
    343a:	f7 1f       	adc	r31, r23
    343c:	9c 01       	movw	r18, r24
    343e:	22 50       	subi	r18, 0x02	; 2
    3440:	31 09       	sbc	r19, r1
    3442:	e2 17       	cp	r30, r18
    3444:	f3 07       	cpc	r31, r19
    3446:	08 f4       	brcc	.+2      	; 0x344a <realloc+0x2e>
    3448:	a8 c0       	rjmp	.+336    	; 0x359a <realloc+0x17e>
    344a:	d9 01       	movw	r26, r18
    344c:	0d 91       	ld	r16, X+
    344e:	1c 91       	ld	r17, X
    3450:	11 97       	sbiw	r26, 0x01	; 1
    3452:	06 17       	cp	r16, r22
    3454:	17 07       	cpc	r17, r23
    3456:	b0 f0       	brcs	.+44     	; 0x3484 <realloc+0x68>
    3458:	05 30       	cpi	r16, 0x05	; 5
    345a:	11 05       	cpc	r17, r1
    345c:	08 f4       	brcc	.+2      	; 0x3460 <realloc+0x44>
    345e:	9b c0       	rjmp	.+310    	; 0x3596 <realloc+0x17a>
    3460:	c8 01       	movw	r24, r16
    3462:	04 97       	sbiw	r24, 0x04	; 4
    3464:	86 17       	cp	r24, r22
    3466:	97 07       	cpc	r25, r23
    3468:	08 f4       	brcc	.+2      	; 0x346c <realloc+0x50>
    346a:	95 c0       	rjmp	.+298    	; 0x3596 <realloc+0x17a>
    346c:	02 50       	subi	r16, 0x02	; 2
    346e:	11 09       	sbc	r17, r1
    3470:	06 1b       	sub	r16, r22
    3472:	17 0b       	sbc	r17, r23
    3474:	01 93       	st	Z+, r16
    3476:	11 93       	st	Z+, r17
    3478:	6d 93       	st	X+, r22
    347a:	7c 93       	st	X, r23
    347c:	cf 01       	movw	r24, r30
    347e:	0e 94 75 1b 	call	0x36ea	; 0x36ea <free>
    3482:	89 c0       	rjmp	.+274    	; 0x3596 <realloc+0x17a>
    3484:	5b 01       	movw	r10, r22
    3486:	a0 1a       	sub	r10, r16
    3488:	b1 0a       	sbc	r11, r17
    348a:	4c 01       	movw	r8, r24
    348c:	80 0e       	add	r8, r16
    348e:	91 1e       	adc	r9, r17
    3490:	a0 91 f7 06 	lds	r26, 0x06F7	; 0x8006f7 <__flp>
    3494:	b0 91 f8 06 	lds	r27, 0x06F8	; 0x8006f8 <__flp+0x1>
    3498:	61 2c       	mov	r6, r1
    349a:	71 2c       	mov	r7, r1
    349c:	e1 2c       	mov	r14, r1
    349e:	f1 2c       	mov	r15, r1
    34a0:	10 97       	sbiw	r26, 0x00	; 0
    34a2:	09 f4       	brne	.+2      	; 0x34a6 <realloc+0x8a>
    34a4:	46 c0       	rjmp	.+140    	; 0x3532 <realloc+0x116>
    34a6:	8d 91       	ld	r24, X+
    34a8:	9c 91       	ld	r25, X
    34aa:	11 97       	sbiw	r26, 0x01	; 1
    34ac:	a8 15       	cp	r26, r8
    34ae:	b9 05       	cpc	r27, r9
    34b0:	b1 f5       	brne	.+108    	; 0x351e <realloc+0x102>
    34b2:	6c 01       	movw	r12, r24
    34b4:	42 e0       	ldi	r20, 0x02	; 2
    34b6:	c4 0e       	add	r12, r20
    34b8:	d1 1c       	adc	r13, r1
    34ba:	ca 14       	cp	r12, r10
    34bc:	db 04       	cpc	r13, r11
    34be:	78 f1       	brcs	.+94     	; 0x351e <realloc+0x102>
    34c0:	4c 01       	movw	r8, r24
    34c2:	8a 18       	sub	r8, r10
    34c4:	9b 08       	sbc	r9, r11
    34c6:	64 01       	movw	r12, r8
    34c8:	42 e0       	ldi	r20, 0x02	; 2
    34ca:	c4 0e       	add	r12, r20
    34cc:	d1 1c       	adc	r13, r1
    34ce:	12 96       	adiw	r26, 0x02	; 2
    34d0:	bc 90       	ld	r11, X
    34d2:	12 97       	sbiw	r26, 0x02	; 2
    34d4:	13 96       	adiw	r26, 0x03	; 3
    34d6:	ac 91       	ld	r26, X
    34d8:	b5 e0       	ldi	r27, 0x05	; 5
    34da:	cb 16       	cp	r12, r27
    34dc:	d1 04       	cpc	r13, r1
    34de:	40 f0       	brcs	.+16     	; 0x34f0 <realloc+0xd4>
    34e0:	b2 82       	std	Z+2, r11	; 0x02
    34e2:	a3 83       	std	Z+3, r26	; 0x03
    34e4:	91 82       	std	Z+1, r9	; 0x01
    34e6:	80 82       	st	Z, r8
    34e8:	d9 01       	movw	r26, r18
    34ea:	6d 93       	st	X+, r22
    34ec:	7c 93       	st	X, r23
    34ee:	09 c0       	rjmp	.+18     	; 0x3502 <realloc+0xe6>
    34f0:	0e 5f       	subi	r16, 0xFE	; 254
    34f2:	1f 4f       	sbci	r17, 0xFF	; 255
    34f4:	80 0f       	add	r24, r16
    34f6:	91 1f       	adc	r25, r17
    34f8:	f9 01       	movw	r30, r18
    34fa:	91 83       	std	Z+1, r25	; 0x01
    34fc:	80 83       	st	Z, r24
    34fe:	eb 2d       	mov	r30, r11
    3500:	fa 2f       	mov	r31, r26
    3502:	e1 14       	cp	r14, r1
    3504:	f1 04       	cpc	r15, r1
    3506:	31 f0       	breq	.+12     	; 0x3514 <realloc+0xf8>
    3508:	d7 01       	movw	r26, r14
    350a:	13 96       	adiw	r26, 0x03	; 3
    350c:	fc 93       	st	X, r31
    350e:	ee 93       	st	-X, r30
    3510:	12 97       	sbiw	r26, 0x02	; 2
    3512:	41 c0       	rjmp	.+130    	; 0x3596 <realloc+0x17a>
    3514:	f0 93 f8 06 	sts	0x06F8, r31	; 0x8006f8 <__flp+0x1>
    3518:	e0 93 f7 06 	sts	0x06F7, r30	; 0x8006f7 <__flp>
    351c:	3c c0       	rjmp	.+120    	; 0x3596 <realloc+0x17a>
    351e:	68 16       	cp	r6, r24
    3520:	79 06       	cpc	r7, r25
    3522:	08 f4       	brcc	.+2      	; 0x3526 <realloc+0x10a>
    3524:	3c 01       	movw	r6, r24
    3526:	7d 01       	movw	r14, r26
    3528:	12 96       	adiw	r26, 0x02	; 2
    352a:	0d 90       	ld	r0, X+
    352c:	bc 91       	ld	r27, X
    352e:	a0 2d       	mov	r26, r0
    3530:	b7 cf       	rjmp	.-146    	; 0x34a0 <realloc+0x84>
    3532:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <__brkval>
    3536:	90 91 f6 06 	lds	r25, 0x06F6	; 0x8006f6 <__brkval+0x1>
    353a:	88 16       	cp	r8, r24
    353c:	99 06       	cpc	r9, r25
    353e:	e1 f4       	brne	.+56     	; 0x3578 <realloc+0x15c>
    3540:	66 16       	cp	r6, r22
    3542:	77 06       	cpc	r7, r23
    3544:	c8 f4       	brcc	.+50     	; 0x3578 <realloc+0x15c>
    3546:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    354a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    354e:	00 97       	sbiw	r24, 0x00	; 0
    3550:	41 f4       	brne	.+16     	; 0x3562 <realloc+0x146>
    3552:	8d b7       	in	r24, 0x3d	; 61
    3554:	9e b7       	in	r25, 0x3e	; 62
    3556:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    355a:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    355e:	84 1b       	sub	r24, r20
    3560:	95 0b       	sbc	r25, r21
    3562:	e8 17       	cp	r30, r24
    3564:	f9 07       	cpc	r31, r25
    3566:	c8 f4       	brcc	.+50     	; 0x359a <realloc+0x17e>
    3568:	f0 93 f6 06 	sts	0x06F6, r31	; 0x8006f6 <__brkval+0x1>
    356c:	e0 93 f5 06 	sts	0x06F5, r30	; 0x8006f5 <__brkval>
    3570:	f9 01       	movw	r30, r18
    3572:	71 83       	std	Z+1, r23	; 0x01
    3574:	60 83       	st	Z, r22
    3576:	0f c0       	rjmp	.+30     	; 0x3596 <realloc+0x17a>
    3578:	cb 01       	movw	r24, r22
    357a:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <malloc>
    357e:	7c 01       	movw	r14, r24
    3580:	00 97       	sbiw	r24, 0x00	; 0
    3582:	59 f0       	breq	.+22     	; 0x359a <realloc+0x17e>
    3584:	a8 01       	movw	r20, r16
    3586:	be 01       	movw	r22, r28
    3588:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <memcpy>
    358c:	ce 01       	movw	r24, r28
    358e:	0e 94 75 1b 	call	0x36ea	; 0x36ea <free>
    3592:	c7 01       	movw	r24, r14
    3594:	04 c0       	rjmp	.+8      	; 0x359e <realloc+0x182>
    3596:	ce 01       	movw	r24, r28
    3598:	02 c0       	rjmp	.+4      	; 0x359e <realloc+0x182>
    359a:	80 e0       	ldi	r24, 0x00	; 0
    359c:	90 e0       	ldi	r25, 0x00	; 0
    359e:	cd b7       	in	r28, 0x3d	; 61
    35a0:	de b7       	in	r29, 0x3e	; 62
    35a2:	ee e0       	ldi	r30, 0x0E	; 14
    35a4:	0c 94 1e 1c 	jmp	0x383c	; 0x383c <__epilogue_restores__+0x8>

000035a8 <memcpy>:
    35a8:	fb 01       	movw	r30, r22
    35aa:	dc 01       	movw	r26, r24
    35ac:	02 c0       	rjmp	.+4      	; 0x35b2 <memcpy+0xa>
    35ae:	01 90       	ld	r0, Z+
    35b0:	0d 92       	st	X+, r0
    35b2:	41 50       	subi	r20, 0x01	; 1
    35b4:	50 40       	sbci	r21, 0x00	; 0
    35b6:	d8 f7       	brcc	.-10     	; 0x35ae <memcpy+0x6>
    35b8:	08 95       	ret

000035ba <malloc>:
    35ba:	0f 93       	push	r16
    35bc:	1f 93       	push	r17
    35be:	cf 93       	push	r28
    35c0:	df 93       	push	r29
    35c2:	82 30       	cpi	r24, 0x02	; 2
    35c4:	91 05       	cpc	r25, r1
    35c6:	10 f4       	brcc	.+4      	; 0x35cc <malloc+0x12>
    35c8:	82 e0       	ldi	r24, 0x02	; 2
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	e0 91 f7 06 	lds	r30, 0x06F7	; 0x8006f7 <__flp>
    35d0:	f0 91 f8 06 	lds	r31, 0x06F8	; 0x8006f8 <__flp+0x1>
    35d4:	20 e0       	ldi	r18, 0x00	; 0
    35d6:	30 e0       	ldi	r19, 0x00	; 0
    35d8:	a0 e0       	ldi	r26, 0x00	; 0
    35da:	b0 e0       	ldi	r27, 0x00	; 0
    35dc:	30 97       	sbiw	r30, 0x00	; 0
    35de:	19 f1       	breq	.+70     	; 0x3626 <malloc+0x6c>
    35e0:	40 81       	ld	r20, Z
    35e2:	51 81       	ldd	r21, Z+1	; 0x01
    35e4:	02 81       	ldd	r16, Z+2	; 0x02
    35e6:	13 81       	ldd	r17, Z+3	; 0x03
    35e8:	48 17       	cp	r20, r24
    35ea:	59 07       	cpc	r21, r25
    35ec:	c8 f0       	brcs	.+50     	; 0x3620 <malloc+0x66>
    35ee:	84 17       	cp	r24, r20
    35f0:	95 07       	cpc	r25, r21
    35f2:	69 f4       	brne	.+26     	; 0x360e <malloc+0x54>
    35f4:	10 97       	sbiw	r26, 0x00	; 0
    35f6:	31 f0       	breq	.+12     	; 0x3604 <malloc+0x4a>
    35f8:	12 96       	adiw	r26, 0x02	; 2
    35fa:	0c 93       	st	X, r16
    35fc:	12 97       	sbiw	r26, 0x02	; 2
    35fe:	13 96       	adiw	r26, 0x03	; 3
    3600:	1c 93       	st	X, r17
    3602:	27 c0       	rjmp	.+78     	; 0x3652 <malloc+0x98>
    3604:	00 93 f7 06 	sts	0x06F7, r16	; 0x8006f7 <__flp>
    3608:	10 93 f8 06 	sts	0x06F8, r17	; 0x8006f8 <__flp+0x1>
    360c:	22 c0       	rjmp	.+68     	; 0x3652 <malloc+0x98>
    360e:	21 15       	cp	r18, r1
    3610:	31 05       	cpc	r19, r1
    3612:	19 f0       	breq	.+6      	; 0x361a <malloc+0x60>
    3614:	42 17       	cp	r20, r18
    3616:	53 07       	cpc	r21, r19
    3618:	18 f4       	brcc	.+6      	; 0x3620 <malloc+0x66>
    361a:	9a 01       	movw	r18, r20
    361c:	bd 01       	movw	r22, r26
    361e:	ef 01       	movw	r28, r30
    3620:	df 01       	movw	r26, r30
    3622:	f8 01       	movw	r30, r16
    3624:	db cf       	rjmp	.-74     	; 0x35dc <malloc+0x22>
    3626:	21 15       	cp	r18, r1
    3628:	31 05       	cpc	r19, r1
    362a:	f9 f0       	breq	.+62     	; 0x366a <malloc+0xb0>
    362c:	28 1b       	sub	r18, r24
    362e:	39 0b       	sbc	r19, r25
    3630:	24 30       	cpi	r18, 0x04	; 4
    3632:	31 05       	cpc	r19, r1
    3634:	80 f4       	brcc	.+32     	; 0x3656 <malloc+0x9c>
    3636:	8a 81       	ldd	r24, Y+2	; 0x02
    3638:	9b 81       	ldd	r25, Y+3	; 0x03
    363a:	61 15       	cp	r22, r1
    363c:	71 05       	cpc	r23, r1
    363e:	21 f0       	breq	.+8      	; 0x3648 <malloc+0x8e>
    3640:	fb 01       	movw	r30, r22
    3642:	93 83       	std	Z+3, r25	; 0x03
    3644:	82 83       	std	Z+2, r24	; 0x02
    3646:	04 c0       	rjmp	.+8      	; 0x3650 <malloc+0x96>
    3648:	90 93 f8 06 	sts	0x06F8, r25	; 0x8006f8 <__flp+0x1>
    364c:	80 93 f7 06 	sts	0x06F7, r24	; 0x8006f7 <__flp>
    3650:	fe 01       	movw	r30, r28
    3652:	32 96       	adiw	r30, 0x02	; 2
    3654:	44 c0       	rjmp	.+136    	; 0x36de <malloc+0x124>
    3656:	fe 01       	movw	r30, r28
    3658:	e2 0f       	add	r30, r18
    365a:	f3 1f       	adc	r31, r19
    365c:	81 93       	st	Z+, r24
    365e:	91 93       	st	Z+, r25
    3660:	22 50       	subi	r18, 0x02	; 2
    3662:	31 09       	sbc	r19, r1
    3664:	39 83       	std	Y+1, r19	; 0x01
    3666:	28 83       	st	Y, r18
    3668:	3a c0       	rjmp	.+116    	; 0x36de <malloc+0x124>
    366a:	20 91 f5 06 	lds	r18, 0x06F5	; 0x8006f5 <__brkval>
    366e:	30 91 f6 06 	lds	r19, 0x06F6	; 0x8006f6 <__brkval+0x1>
    3672:	23 2b       	or	r18, r19
    3674:	41 f4       	brne	.+16     	; 0x3686 <malloc+0xcc>
    3676:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    367a:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    367e:	30 93 f6 06 	sts	0x06F6, r19	; 0x8006f6 <__brkval+0x1>
    3682:	20 93 f5 06 	sts	0x06F5, r18	; 0x8006f5 <__brkval>
    3686:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    368a:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    368e:	21 15       	cp	r18, r1
    3690:	31 05       	cpc	r19, r1
    3692:	41 f4       	brne	.+16     	; 0x36a4 <malloc+0xea>
    3694:	2d b7       	in	r18, 0x3d	; 61
    3696:	3e b7       	in	r19, 0x3e	; 62
    3698:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    369c:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    36a0:	24 1b       	sub	r18, r20
    36a2:	35 0b       	sbc	r19, r21
    36a4:	e0 91 f5 06 	lds	r30, 0x06F5	; 0x8006f5 <__brkval>
    36a8:	f0 91 f6 06 	lds	r31, 0x06F6	; 0x8006f6 <__brkval+0x1>
    36ac:	e2 17       	cp	r30, r18
    36ae:	f3 07       	cpc	r31, r19
    36b0:	a0 f4       	brcc	.+40     	; 0x36da <malloc+0x120>
    36b2:	2e 1b       	sub	r18, r30
    36b4:	3f 0b       	sbc	r19, r31
    36b6:	28 17       	cp	r18, r24
    36b8:	39 07       	cpc	r19, r25
    36ba:	78 f0       	brcs	.+30     	; 0x36da <malloc+0x120>
    36bc:	ac 01       	movw	r20, r24
    36be:	4e 5f       	subi	r20, 0xFE	; 254
    36c0:	5f 4f       	sbci	r21, 0xFF	; 255
    36c2:	24 17       	cp	r18, r20
    36c4:	35 07       	cpc	r19, r21
    36c6:	48 f0       	brcs	.+18     	; 0x36da <malloc+0x120>
    36c8:	4e 0f       	add	r20, r30
    36ca:	5f 1f       	adc	r21, r31
    36cc:	50 93 f6 06 	sts	0x06F6, r21	; 0x8006f6 <__brkval+0x1>
    36d0:	40 93 f5 06 	sts	0x06F5, r20	; 0x8006f5 <__brkval>
    36d4:	81 93       	st	Z+, r24
    36d6:	91 93       	st	Z+, r25
    36d8:	02 c0       	rjmp	.+4      	; 0x36de <malloc+0x124>
    36da:	e0 e0       	ldi	r30, 0x00	; 0
    36dc:	f0 e0       	ldi	r31, 0x00	; 0
    36de:	cf 01       	movw	r24, r30
    36e0:	df 91       	pop	r29
    36e2:	cf 91       	pop	r28
    36e4:	1f 91       	pop	r17
    36e6:	0f 91       	pop	r16
    36e8:	08 95       	ret

000036ea <free>:
    36ea:	cf 93       	push	r28
    36ec:	df 93       	push	r29
    36ee:	00 97       	sbiw	r24, 0x00	; 0
    36f0:	09 f4       	brne	.+2      	; 0x36f4 <free+0xa>
    36f2:	81 c0       	rjmp	.+258    	; 0x37f6 <free+0x10c>
    36f4:	fc 01       	movw	r30, r24
    36f6:	32 97       	sbiw	r30, 0x02	; 2
    36f8:	13 82       	std	Z+3, r1	; 0x03
    36fa:	12 82       	std	Z+2, r1	; 0x02
    36fc:	a0 91 f7 06 	lds	r26, 0x06F7	; 0x8006f7 <__flp>
    3700:	b0 91 f8 06 	lds	r27, 0x06F8	; 0x8006f8 <__flp+0x1>
    3704:	10 97       	sbiw	r26, 0x00	; 0
    3706:	81 f4       	brne	.+32     	; 0x3728 <free+0x3e>
    3708:	20 81       	ld	r18, Z
    370a:	31 81       	ldd	r19, Z+1	; 0x01
    370c:	82 0f       	add	r24, r18
    370e:	93 1f       	adc	r25, r19
    3710:	20 91 f5 06 	lds	r18, 0x06F5	; 0x8006f5 <__brkval>
    3714:	30 91 f6 06 	lds	r19, 0x06F6	; 0x8006f6 <__brkval+0x1>
    3718:	28 17       	cp	r18, r24
    371a:	39 07       	cpc	r19, r25
    371c:	51 f5       	brne	.+84     	; 0x3772 <free+0x88>
    371e:	f0 93 f6 06 	sts	0x06F6, r31	; 0x8006f6 <__brkval+0x1>
    3722:	e0 93 f5 06 	sts	0x06F5, r30	; 0x8006f5 <__brkval>
    3726:	67 c0       	rjmp	.+206    	; 0x37f6 <free+0x10c>
    3728:	ed 01       	movw	r28, r26
    372a:	20 e0       	ldi	r18, 0x00	; 0
    372c:	30 e0       	ldi	r19, 0x00	; 0
    372e:	ce 17       	cp	r28, r30
    3730:	df 07       	cpc	r29, r31
    3732:	40 f4       	brcc	.+16     	; 0x3744 <free+0x5a>
    3734:	4a 81       	ldd	r20, Y+2	; 0x02
    3736:	5b 81       	ldd	r21, Y+3	; 0x03
    3738:	9e 01       	movw	r18, r28
    373a:	41 15       	cp	r20, r1
    373c:	51 05       	cpc	r21, r1
    373e:	f1 f0       	breq	.+60     	; 0x377c <free+0x92>
    3740:	ea 01       	movw	r28, r20
    3742:	f5 cf       	rjmp	.-22     	; 0x372e <free+0x44>
    3744:	d3 83       	std	Z+3, r29	; 0x03
    3746:	c2 83       	std	Z+2, r28	; 0x02
    3748:	40 81       	ld	r20, Z
    374a:	51 81       	ldd	r21, Z+1	; 0x01
    374c:	84 0f       	add	r24, r20
    374e:	95 1f       	adc	r25, r21
    3750:	c8 17       	cp	r28, r24
    3752:	d9 07       	cpc	r29, r25
    3754:	59 f4       	brne	.+22     	; 0x376c <free+0x82>
    3756:	88 81       	ld	r24, Y
    3758:	99 81       	ldd	r25, Y+1	; 0x01
    375a:	84 0f       	add	r24, r20
    375c:	95 1f       	adc	r25, r21
    375e:	02 96       	adiw	r24, 0x02	; 2
    3760:	91 83       	std	Z+1, r25	; 0x01
    3762:	80 83       	st	Z, r24
    3764:	8a 81       	ldd	r24, Y+2	; 0x02
    3766:	9b 81       	ldd	r25, Y+3	; 0x03
    3768:	93 83       	std	Z+3, r25	; 0x03
    376a:	82 83       	std	Z+2, r24	; 0x02
    376c:	21 15       	cp	r18, r1
    376e:	31 05       	cpc	r19, r1
    3770:	29 f4       	brne	.+10     	; 0x377c <free+0x92>
    3772:	f0 93 f8 06 	sts	0x06F8, r31	; 0x8006f8 <__flp+0x1>
    3776:	e0 93 f7 06 	sts	0x06F7, r30	; 0x8006f7 <__flp>
    377a:	3d c0       	rjmp	.+122    	; 0x37f6 <free+0x10c>
    377c:	e9 01       	movw	r28, r18
    377e:	fb 83       	std	Y+3, r31	; 0x03
    3780:	ea 83       	std	Y+2, r30	; 0x02
    3782:	49 91       	ld	r20, Y+
    3784:	59 91       	ld	r21, Y+
    3786:	c4 0f       	add	r28, r20
    3788:	d5 1f       	adc	r29, r21
    378a:	ec 17       	cp	r30, r28
    378c:	fd 07       	cpc	r31, r29
    378e:	61 f4       	brne	.+24     	; 0x37a8 <free+0xbe>
    3790:	80 81       	ld	r24, Z
    3792:	91 81       	ldd	r25, Z+1	; 0x01
    3794:	84 0f       	add	r24, r20
    3796:	95 1f       	adc	r25, r21
    3798:	02 96       	adiw	r24, 0x02	; 2
    379a:	e9 01       	movw	r28, r18
    379c:	99 83       	std	Y+1, r25	; 0x01
    379e:	88 83       	st	Y, r24
    37a0:	82 81       	ldd	r24, Z+2	; 0x02
    37a2:	93 81       	ldd	r25, Z+3	; 0x03
    37a4:	9b 83       	std	Y+3, r25	; 0x03
    37a6:	8a 83       	std	Y+2, r24	; 0x02
    37a8:	e0 e0       	ldi	r30, 0x00	; 0
    37aa:	f0 e0       	ldi	r31, 0x00	; 0
    37ac:	12 96       	adiw	r26, 0x02	; 2
    37ae:	8d 91       	ld	r24, X+
    37b0:	9c 91       	ld	r25, X
    37b2:	13 97       	sbiw	r26, 0x03	; 3
    37b4:	00 97       	sbiw	r24, 0x00	; 0
    37b6:	19 f0       	breq	.+6      	; 0x37be <free+0xd4>
    37b8:	fd 01       	movw	r30, r26
    37ba:	dc 01       	movw	r26, r24
    37bc:	f7 cf       	rjmp	.-18     	; 0x37ac <free+0xc2>
    37be:	8d 91       	ld	r24, X+
    37c0:	9c 91       	ld	r25, X
    37c2:	11 97       	sbiw	r26, 0x01	; 1
    37c4:	9d 01       	movw	r18, r26
    37c6:	2e 5f       	subi	r18, 0xFE	; 254
    37c8:	3f 4f       	sbci	r19, 0xFF	; 255
    37ca:	82 0f       	add	r24, r18
    37cc:	93 1f       	adc	r25, r19
    37ce:	20 91 f5 06 	lds	r18, 0x06F5	; 0x8006f5 <__brkval>
    37d2:	30 91 f6 06 	lds	r19, 0x06F6	; 0x8006f6 <__brkval+0x1>
    37d6:	28 17       	cp	r18, r24
    37d8:	39 07       	cpc	r19, r25
    37da:	69 f4       	brne	.+26     	; 0x37f6 <free+0x10c>
    37dc:	30 97       	sbiw	r30, 0x00	; 0
    37de:	29 f4       	brne	.+10     	; 0x37ea <free+0x100>
    37e0:	10 92 f8 06 	sts	0x06F8, r1	; 0x8006f8 <__flp+0x1>
    37e4:	10 92 f7 06 	sts	0x06F7, r1	; 0x8006f7 <__flp>
    37e8:	02 c0       	rjmp	.+4      	; 0x37ee <free+0x104>
    37ea:	13 82       	std	Z+3, r1	; 0x03
    37ec:	12 82       	std	Z+2, r1	; 0x02
    37ee:	b0 93 f6 06 	sts	0x06F6, r27	; 0x8006f6 <__brkval+0x1>
    37f2:	a0 93 f5 06 	sts	0x06F5, r26	; 0x8006f5 <__brkval>
    37f6:	df 91       	pop	r29
    37f8:	cf 91       	pop	r28
    37fa:	08 95       	ret

000037fc <__prologue_saves__>:
    37fc:	2f 92       	push	r2
    37fe:	3f 92       	push	r3
    3800:	4f 92       	push	r4
    3802:	5f 92       	push	r5
    3804:	6f 92       	push	r6
    3806:	7f 92       	push	r7
    3808:	8f 92       	push	r8
    380a:	9f 92       	push	r9
    380c:	af 92       	push	r10
    380e:	bf 92       	push	r11
    3810:	cf 92       	push	r12
    3812:	df 92       	push	r13
    3814:	ef 92       	push	r14
    3816:	ff 92       	push	r15
    3818:	0f 93       	push	r16
    381a:	1f 93       	push	r17
    381c:	cf 93       	push	r28
    381e:	df 93       	push	r29
    3820:	cd b7       	in	r28, 0x3d	; 61
    3822:	de b7       	in	r29, 0x3e	; 62
    3824:	ca 1b       	sub	r28, r26
    3826:	db 0b       	sbc	r29, r27
    3828:	0f b6       	in	r0, 0x3f	; 63
    382a:	f8 94       	cli
    382c:	de bf       	out	0x3e, r29	; 62
    382e:	0f be       	out	0x3f, r0	; 63
    3830:	cd bf       	out	0x3d, r28	; 61
    3832:	09 94       	ijmp

00003834 <__epilogue_restores__>:
    3834:	2a 88       	ldd	r2, Y+18	; 0x12
    3836:	39 88       	ldd	r3, Y+17	; 0x11
    3838:	48 88       	ldd	r4, Y+16	; 0x10
    383a:	5f 84       	ldd	r5, Y+15	; 0x0f
    383c:	6e 84       	ldd	r6, Y+14	; 0x0e
    383e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3840:	8c 84       	ldd	r8, Y+12	; 0x0c
    3842:	9b 84       	ldd	r9, Y+11	; 0x0b
    3844:	aa 84       	ldd	r10, Y+10	; 0x0a
    3846:	b9 84       	ldd	r11, Y+9	; 0x09
    3848:	c8 84       	ldd	r12, Y+8	; 0x08
    384a:	df 80       	ldd	r13, Y+7	; 0x07
    384c:	ee 80       	ldd	r14, Y+6	; 0x06
    384e:	fd 80       	ldd	r15, Y+5	; 0x05
    3850:	0c 81       	ldd	r16, Y+4	; 0x04
    3852:	1b 81       	ldd	r17, Y+3	; 0x03
    3854:	aa 81       	ldd	r26, Y+2	; 0x02
    3856:	b9 81       	ldd	r27, Y+1	; 0x01
    3858:	ce 0f       	add	r28, r30
    385a:	d1 1d       	adc	r29, r1
    385c:	0f b6       	in	r0, 0x3f	; 63
    385e:	f8 94       	cli
    3860:	de bf       	out	0x3e, r29	; 62
    3862:	0f be       	out	0x3f, r0	; 63
    3864:	cd bf       	out	0x3d, r28	; 61
    3866:	ed 01       	movw	r28, r26
    3868:	08 95       	ret

0000386a <_exit>:
    386a:	f8 94       	cli

0000386c <__stop_program>:
    386c:	ff cf       	rjmp	.-2      	; 0x386c <__stop_program>
