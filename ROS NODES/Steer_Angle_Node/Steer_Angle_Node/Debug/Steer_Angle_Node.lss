
Steer_Angle_Node.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001b6  00800060  00003c32  00003cc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004e5  00800216  00800216  00003e7c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003e7c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003eac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f8  00000000  00000000  00003ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000549d  00000000  00000000  000041e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012bb  00000000  00000000  0000967d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000027e4  00000000  00000000  0000a938  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000085c  00000000  00000000  0000d11c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002356  00000000  00000000  0000d978  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003e8b  00000000  00000000  0000fcce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000398  00000000  00000000  00013b59  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4b 00 	jmp	0x96	; 0x96 <__ctors_end>
       4:	0c 94 1d 14 	jmp	0x283a	; 0x283a <__vector_1>
       8:	0c 94 a3 14 	jmp	0x2946	; 0x2946 <__vector_2>
       c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      10:	0c 94 d5 16 	jmp	0x2daa	; 0x2daa <__vector_4>
      14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      2c:	0c 94 29 15 	jmp	0x2a52	; 0x2a52 <__vector_11>
      30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      54:	8f 14       	cp	r8, r15
      56:	3c 14       	cp	r3, r12
      58:	51 14       	cp	r5, r1
      5a:	66 14       	cp	r6, r6
      5c:	51 14       	cp	r5, r1
      5e:	8f 14       	cp	r8, r15
      60:	7b 14       	cp	r7, r11
      62:	3c 14       	cp	r3, r12
      64:	3c 14       	cp	r3, r12
      66:	7b 14       	cp	r7, r11
      68:	8f 14       	cp	r8, r15
      6a:	51 14       	cp	r5, r1
      6c:	66 14       	cp	r6, r6
      6e:	51 14       	cp	r5, r1
      70:	3c 14       	cp	r3, r12
      72:	8f 14       	cp	r8, r15
      74:	15 15       	cp	r17, r5
      76:	c2 14       	cp	r12, r2
      78:	d7 14       	cp	r13, r7
      7a:	ec 14       	cp	r14, r12
      7c:	d7 14       	cp	r13, r7
      7e:	15 15       	cp	r17, r5
      80:	01 15       	cp	r16, r1
      82:	c2 14       	cp	r12, r2
      84:	c2 14       	cp	r12, r2
      86:	01 15       	cp	r16, r1
      88:	15 15       	cp	r17, r5
      8a:	d7 14       	cp	r13, r7
      8c:	ec 14       	cp	r14, r12
      8e:	d7 14       	cp	r13, r7
      90:	c2 14       	cp	r12, r2
      92:	15 15       	cp	r17, r5

00000094 <__ctors_start>:
      94:	4e 16       	cp	r4, r30

00000096 <__ctors_end>:
      96:	11 24       	eor	r1, r1
      98:	1f be       	out	0x3f, r1	; 63
      9a:	cf e5       	ldi	r28, 0x5F	; 95
      9c:	d8 e0       	ldi	r29, 0x08	; 8
      9e:	de bf       	out	0x3e, r29	; 62
      a0:	cd bf       	out	0x3d, r28	; 61

000000a2 <__do_copy_data>:
      a2:	12 e0       	ldi	r17, 0x02	; 2
      a4:	a0 e6       	ldi	r26, 0x60	; 96
      a6:	b0 e0       	ldi	r27, 0x00	; 0
      a8:	e2 e3       	ldi	r30, 0x32	; 50
      aa:	fc e3       	ldi	r31, 0x3C	; 60
      ac:	02 c0       	rjmp	.+4      	; 0xb2 <__do_copy_data+0x10>
      ae:	05 90       	lpm	r0, Z+
      b0:	0d 92       	st	X+, r0
      b2:	a6 31       	cpi	r26, 0x16	; 22
      b4:	b1 07       	cpc	r27, r17
      b6:	d9 f7       	brne	.-10     	; 0xae <__do_copy_data+0xc>

000000b8 <__do_clear_bss>:
      b8:	26 e0       	ldi	r18, 0x06	; 6
      ba:	a6 e1       	ldi	r26, 0x16	; 22
      bc:	b2 e0       	ldi	r27, 0x02	; 2
      be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
      c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
      c2:	ab 3f       	cpi	r26, 0xFB	; 251
      c4:	b2 07       	cpc	r27, r18
      c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>

000000c8 <__do_global_ctors>:
      c8:	10 e0       	ldi	r17, 0x00	; 0
      ca:	cb e4       	ldi	r28, 0x4B	; 75
      cc:	d0 e0       	ldi	r29, 0x00	; 0
      ce:	04 c0       	rjmp	.+8      	; 0xd8 <__do_global_ctors+0x10>
      d0:	21 97       	sbiw	r28, 0x01	; 1
      d2:	fe 01       	movw	r30, r28
      d4:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <__tablejump2__>
      d8:	ca 34       	cpi	r28, 0x4A	; 74
      da:	d1 07       	cpc	r29, r17
      dc:	c9 f7       	brne	.-14     	; 0xd0 <__do_global_ctors+0x8>
      de:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <main>
      e2:	0c 94 17 1e 	jmp	0x3c2e	; 0x3c2e <_exit>

000000e6 <__bad_interrupt>:
      e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <_ZNK8std_msgs4Time9serializeEPh>:
uint8_t state = 0;


// Needed for AVR to use virtual functions
extern "C" void __cxa_pure_virtual(void);
void __cxa_pure_virtual(void) {}
      ea:	dc 01       	movw	r26, r24
      ec:	fb 01       	movw	r30, r22
      ee:	12 96       	adiw	r26, 0x02	; 2
      f0:	8c 91       	ld	r24, X
      f2:	12 97       	sbiw	r26, 0x02	; 2
      f4:	80 83       	st	Z, r24
      f6:	13 96       	adiw	r26, 0x03	; 3
      f8:	8c 91       	ld	r24, X
      fa:	13 97       	sbiw	r26, 0x03	; 3
      fc:	81 83       	std	Z+1, r24	; 0x01
      fe:	14 96       	adiw	r26, 0x04	; 4
     100:	8c 91       	ld	r24, X
     102:	14 97       	sbiw	r26, 0x04	; 4
     104:	82 83       	std	Z+2, r24	; 0x02
     106:	15 96       	adiw	r26, 0x05	; 5
     108:	8c 91       	ld	r24, X
     10a:	15 97       	sbiw	r26, 0x05	; 5
     10c:	83 83       	std	Z+3, r24	; 0x03
     10e:	16 96       	adiw	r26, 0x06	; 6
     110:	8c 91       	ld	r24, X
     112:	16 97       	sbiw	r26, 0x06	; 6
     114:	84 83       	std	Z+4, r24	; 0x04
     116:	17 96       	adiw	r26, 0x07	; 7
     118:	8c 91       	ld	r24, X
     11a:	17 97       	sbiw	r26, 0x07	; 7
     11c:	85 83       	std	Z+5, r24	; 0x05
     11e:	18 96       	adiw	r26, 0x08	; 8
     120:	8c 91       	ld	r24, X
     122:	18 97       	sbiw	r26, 0x08	; 8
     124:	86 83       	std	Z+6, r24	; 0x06
     126:	19 96       	adiw	r26, 0x09	; 9
     128:	8c 91       	ld	r24, X
     12a:	87 83       	std	Z+7, r24	; 0x07
     12c:	88 e0       	ldi	r24, 0x08	; 8
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	08 95       	ret

00000132 <_ZN8std_msgs4Time11deserializeEPh>:
     132:	fc 01       	movw	r30, r24
     134:	db 01       	movw	r26, r22
     136:	4c 91       	ld	r20, X
     138:	50 e0       	ldi	r21, 0x00	; 0
     13a:	60 e0       	ldi	r22, 0x00	; 0
     13c:	70 e0       	ldi	r23, 0x00	; 0
     13e:	42 83       	std	Z+2, r20	; 0x02
     140:	53 83       	std	Z+3, r21	; 0x03
     142:	64 83       	std	Z+4, r22	; 0x04
     144:	75 83       	std	Z+5, r23	; 0x05
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	8c 91       	ld	r24, X
     14a:	11 97       	sbiw	r26, 0x01	; 1
     14c:	58 2b       	or	r21, r24
     14e:	42 83       	std	Z+2, r20	; 0x02
     150:	53 83       	std	Z+3, r21	; 0x03
     152:	64 83       	std	Z+4, r22	; 0x04
     154:	75 83       	std	Z+5, r23	; 0x05
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	8c 91       	ld	r24, X
     15a:	12 97       	sbiw	r26, 0x02	; 2
     15c:	68 2b       	or	r22, r24
     15e:	42 83       	std	Z+2, r20	; 0x02
     160:	53 83       	std	Z+3, r21	; 0x03
     162:	64 83       	std	Z+4, r22	; 0x04
     164:	75 83       	std	Z+5, r23	; 0x05
     166:	13 96       	adiw	r26, 0x03	; 3
     168:	8c 91       	ld	r24, X
     16a:	13 97       	sbiw	r26, 0x03	; 3
     16c:	78 2b       	or	r23, r24
     16e:	42 83       	std	Z+2, r20	; 0x02
     170:	53 83       	std	Z+3, r21	; 0x03
     172:	64 83       	std	Z+4, r22	; 0x04
     174:	75 83       	std	Z+5, r23	; 0x05
     176:	14 96       	adiw	r26, 0x04	; 4
     178:	4c 91       	ld	r20, X
     17a:	14 97       	sbiw	r26, 0x04	; 4
     17c:	50 e0       	ldi	r21, 0x00	; 0
     17e:	60 e0       	ldi	r22, 0x00	; 0
     180:	70 e0       	ldi	r23, 0x00	; 0
     182:	46 83       	std	Z+6, r20	; 0x06
     184:	57 83       	std	Z+7, r21	; 0x07
     186:	60 87       	std	Z+8, r22	; 0x08
     188:	71 87       	std	Z+9, r23	; 0x09
     18a:	15 96       	adiw	r26, 0x05	; 5
     18c:	8c 91       	ld	r24, X
     18e:	15 97       	sbiw	r26, 0x05	; 5
     190:	58 2b       	or	r21, r24
     192:	46 83       	std	Z+6, r20	; 0x06
     194:	57 83       	std	Z+7, r21	; 0x07
     196:	60 87       	std	Z+8, r22	; 0x08
     198:	71 87       	std	Z+9, r23	; 0x09
     19a:	16 96       	adiw	r26, 0x06	; 6
     19c:	8c 91       	ld	r24, X
     19e:	16 97       	sbiw	r26, 0x06	; 6
     1a0:	68 2b       	or	r22, r24
     1a2:	46 83       	std	Z+6, r20	; 0x06
     1a4:	57 83       	std	Z+7, r21	; 0x07
     1a6:	60 87       	std	Z+8, r22	; 0x08
     1a8:	71 87       	std	Z+9, r23	; 0x09
     1aa:	17 96       	adiw	r26, 0x07	; 7
     1ac:	8c 91       	ld	r24, X
     1ae:	78 2b       	or	r23, r24
     1b0:	46 83       	std	Z+6, r20	; 0x06
     1b2:	57 83       	std	Z+7, r21	; 0x07
     1b4:	60 87       	std	Z+8, r22	; 0x08
     1b6:	71 87       	std	Z+9, r23	; 0x09
     1b8:	88 e0       	ldi	r24, 0x08	; 8
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	08 95       	ret

000001be <_ZN8std_msgs4Time7getTypeEv>:
     1be:	86 e6       	ldi	r24, 0x66	; 102
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	08 95       	ret

000001c4 <_ZN8std_msgs4Time6getMD5Ev>:
     1c4:	84 e7       	ldi	r24, 0x74	; 116
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	08 95       	ret

000001ca <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:
     1ca:	4f 92       	push	r4
     1cc:	5f 92       	push	r5
     1ce:	6f 92       	push	r6
     1d0:	7f 92       	push	r7
     1d2:	8f 92       	push	r8
     1d4:	9f 92       	push	r9
     1d6:	af 92       	push	r10
     1d8:	bf 92       	push	r11
     1da:	cf 92       	push	r12
     1dc:	df 92       	push	r13
     1de:	ef 92       	push	r14
     1e0:	ff 92       	push	r15
     1e2:	0f 93       	push	r16
     1e4:	1f 93       	push	r17
     1e6:	cf 93       	push	r28
     1e8:	df 93       	push	r29
     1ea:	eb 01       	movw	r28, r22
     1ec:	28 81       	ld	r18, Y
     1ee:	30 e0       	ldi	r19, 0x00	; 0
     1f0:	dc 01       	movw	r26, r24
     1f2:	13 96       	adiw	r26, 0x03	; 3
     1f4:	3c 93       	st	X, r19
     1f6:	2e 93       	st	-X, r18
     1f8:	12 97       	sbiw	r26, 0x02	; 2
     1fa:	49 81       	ldd	r20, Y+1	; 0x01
     1fc:	34 2b       	or	r19, r20
     1fe:	13 96       	adiw	r26, 0x03	; 3
     200:	3c 93       	st	X, r19
     202:	2e 93       	st	-X, r18
     204:	12 97       	sbiw	r26, 0x02	; 2
     206:	fb 01       	movw	r30, r22
     208:	32 96       	adiw	r30, 0x02	; 2
     20a:	20 e0       	ldi	r18, 0x00	; 0
     20c:	30 e0       	ldi	r19, 0x00	; 0
     20e:	c1 2c       	mov	r12, r1
     210:	d1 2c       	mov	r13, r1
     212:	76 01       	movw	r14, r12
     214:	0e c0       	rjmp	.+28     	; 0x232 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x68>
     216:	46 01       	movw	r8, r12
     218:	57 01       	movw	r10, r14
     21a:	b6 e0       	ldi	r27, 0x06	; 6
     21c:	8b 0e       	add	r8, r27
     21e:	91 1c       	adc	r9, r1
     220:	a1 1c       	adc	r10, r1
     222:	b1 1c       	adc	r11, r1
     224:	e7 e0       	ldi	r30, 0x07	; 7
     226:	8e 16       	cp	r8, r30
     228:	91 04       	cpc	r9, r1
     22a:	a1 04       	cpc	r10, r1
     22c:	b1 04       	cpc	r11, r1
     22e:	b8 f4       	brcc	.+46     	; 0x25e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x94>
     230:	26 c0       	rjmp	.+76     	; 0x27e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xb4>
     232:	41 91       	ld	r20, Z+
     234:	50 e0       	ldi	r21, 0x00	; 0
     236:	02 2e       	mov	r0, r18
     238:	02 c0       	rjmp	.+4      	; 0x23e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x74>
     23a:	44 0f       	add	r20, r20
     23c:	55 1f       	adc	r21, r21
     23e:	0a 94       	dec	r0
     240:	e2 f7       	brpl	.-8      	; 0x23a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x70>
     242:	05 2e       	mov	r0, r21
     244:	00 0c       	add	r0, r0
     246:	66 0b       	sbc	r22, r22
     248:	77 0b       	sbc	r23, r23
     24a:	c4 2a       	or	r12, r20
     24c:	d5 2a       	or	r13, r21
     24e:	e6 2a       	or	r14, r22
     250:	f7 2a       	or	r15, r23
     252:	28 5f       	subi	r18, 0xF8	; 248
     254:	3f 4f       	sbci	r19, 0xFF	; 255
     256:	20 32       	cpi	r18, 0x20	; 32
     258:	31 05       	cpc	r19, r1
     25a:	59 f7       	brne	.-42     	; 0x232 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x68>
     25c:	dc cf       	rjmp	.-72     	; 0x216 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x4c>
     25e:	fe 01       	movw	r30, r28
     260:	35 96       	adiw	r30, 0x05	; 5
     262:	26 e0       	ldi	r18, 0x06	; 6
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	41 81       	ldd	r20, Z+1	; 0x01
     268:	41 93       	st	Z+, r20
     26a:	2f 5f       	subi	r18, 0xFF	; 255
     26c:	3f 4f       	sbci	r19, 0xFF	; 255
     26e:	a9 01       	movw	r20, r18
     270:	60 e0       	ldi	r22, 0x00	; 0
     272:	70 e0       	ldi	r23, 0x00	; 0
     274:	48 15       	cp	r20, r8
     276:	59 05       	cpc	r21, r9
     278:	6a 05       	cpc	r22, r10
     27a:	7b 05       	cpc	r23, r11
     27c:	a0 f3       	brcs	.-24     	; 0x266 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x9c>
     27e:	86 01       	movw	r16, r12
     280:	fe 01       	movw	r30, r28
     282:	ec 0d       	add	r30, r12
     284:	fd 1d       	adc	r31, r13
     286:	15 82       	std	Z+5, r1	; 0x05
     288:	9e 01       	movw	r18, r28
     28a:	2b 5f       	subi	r18, 0xFB	; 251
     28c:	3f 4f       	sbci	r19, 0xFF	; 255
     28e:	dc 01       	movw	r26, r24
     290:	15 96       	adiw	r26, 0x05	; 5
     292:	3c 93       	st	X, r19
     294:	2e 93       	st	-X, r18
     296:	14 97       	sbiw	r26, 0x04	; 4
     298:	d6 01       	movw	r26, r12
     29a:	16 96       	adiw	r26, 0x06	; 6
     29c:	fe 01       	movw	r30, r28
     29e:	ea 0f       	add	r30, r26
     2a0:	fb 1f       	adc	r31, r27
     2a2:	20 e0       	ldi	r18, 0x00	; 0
     2a4:	30 e0       	ldi	r19, 0x00	; 0
     2a6:	40 e0       	ldi	r20, 0x00	; 0
     2a8:	50 e0       	ldi	r21, 0x00	; 0
     2aa:	ba 01       	movw	r22, r20
     2ac:	c1 90       	ld	r12, Z+
     2ae:	d1 2c       	mov	r13, r1
     2b0:	02 2e       	mov	r0, r18
     2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xee>
     2b4:	cc 0c       	add	r12, r12
     2b6:	dd 1c       	adc	r13, r13
     2b8:	0a 94       	dec	r0
     2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xea>
     2bc:	0d 2c       	mov	r0, r13
     2be:	00 0c       	add	r0, r0
     2c0:	ee 08       	sbc	r14, r14
     2c2:	ff 08       	sbc	r15, r15
     2c4:	4c 29       	or	r20, r12
     2c6:	5d 29       	or	r21, r13
     2c8:	6e 29       	or	r22, r14
     2ca:	7f 29       	or	r23, r15
     2cc:	28 5f       	subi	r18, 0xF8	; 248
     2ce:	3f 4f       	sbci	r19, 0xFF	; 255
     2d0:	20 32       	cpi	r18, 0x20	; 32
     2d2:	31 05       	cpc	r19, r1
     2d4:	59 f7       	brne	.-42     	; 0x2ac <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe2>
     2d6:	14 96       	adiw	r26, 0x04	; 4
     2d8:	4d 01       	movw	r8, r26
     2da:	0b 2e       	mov	r0, r27
     2dc:	00 0c       	add	r0, r0
     2de:	aa 08       	sbc	r10, r10
     2e0:	bb 08       	sbc	r11, r11
     2e2:	84 0e       	add	r8, r20
     2e4:	95 1e       	adc	r9, r21
     2e6:	a6 1e       	adc	r10, r22
     2e8:	b7 1e       	adc	r11, r23
     2ea:	6d 01       	movw	r12, r26
     2ec:	e1 2c       	mov	r14, r1
     2ee:	f1 2c       	mov	r15, r1
     2f0:	c8 14       	cp	r12, r8
     2f2:	d9 04       	cpc	r13, r9
     2f4:	ea 04       	cpc	r14, r10
     2f6:	fb 04       	cpc	r15, r11
     2f8:	a8 f4       	brcc	.+42     	; 0x324 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x15a>
     2fa:	f8 01       	movw	r30, r16
     2fc:	39 96       	adiw	r30, 0x09	; 9
     2fe:	ec 0f       	add	r30, r28
     300:	fd 1f       	adc	r31, r29
     302:	21 e0       	ldi	r18, 0x01	; 1
     304:	30 e0       	ldi	r19, 0x00	; 0
     306:	79 01       	movw	r14, r18
     308:	ec 1a       	sub	r14, r28
     30a:	fd 0a       	sbc	r15, r29
     30c:	21 81       	ldd	r18, Z+1	; 0x01
     30e:	21 93       	st	Z+, r18
     310:	87 01       	movw	r16, r14
     312:	0e 0f       	add	r16, r30
     314:	1f 1f       	adc	r17, r31
     316:	20 e0       	ldi	r18, 0x00	; 0
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	08 15       	cp	r16, r8
     31c:	19 05       	cpc	r17, r9
     31e:	2a 05       	cpc	r18, r10
     320:	3b 05       	cpc	r19, r11
     322:	a0 f3       	brcs	.-24     	; 0x30c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
     324:	4a 0f       	add	r20, r26
     326:	5b 1f       	adc	r21, r27
     328:	be 01       	movw	r22, r28
     32a:	64 0f       	add	r22, r20
     32c:	75 1f       	adc	r23, r21
     32e:	9b 01       	movw	r18, r22
     330:	21 50       	subi	r18, 0x01	; 1
     332:	31 09       	sbc	r19, r1
     334:	f9 01       	movw	r30, r18
     336:	10 82       	st	Z, r1
     338:	11 97       	sbiw	r26, 0x01	; 1
     33a:	ac 0f       	add	r26, r28
     33c:	bd 1f       	adc	r27, r29
     33e:	fc 01       	movw	r30, r24
     340:	b7 83       	std	Z+7, r27	; 0x07
     342:	a6 83       	std	Z+6, r26	; 0x06
     344:	fb 01       	movw	r30, r22
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	70 e0       	ldi	r23, 0x00	; 0
     34a:	c1 2c       	mov	r12, r1
     34c:	d1 2c       	mov	r13, r1
     34e:	76 01       	movw	r14, r12
     350:	01 91       	ld	r16, Z+
     352:	10 e0       	ldi	r17, 0x00	; 0
     354:	06 2e       	mov	r0, r22
     356:	02 c0       	rjmp	.+4      	; 0x35c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x192>
     358:	00 0f       	add	r16, r16
     35a:	11 1f       	adc	r17, r17
     35c:	0a 94       	dec	r0
     35e:	e2 f7       	brpl	.-8      	; 0x358 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x18e>
     360:	01 2e       	mov	r0, r17
     362:	00 0c       	add	r0, r0
     364:	22 0b       	sbc	r18, r18
     366:	33 0b       	sbc	r19, r19
     368:	c0 2a       	or	r12, r16
     36a:	d1 2a       	or	r13, r17
     36c:	e2 2a       	or	r14, r18
     36e:	f3 2a       	or	r15, r19
     370:	68 5f       	subi	r22, 0xF8	; 248
     372:	7f 4f       	sbci	r23, 0xFF	; 255
     374:	60 32       	cpi	r22, 0x20	; 32
     376:	71 05       	cpc	r23, r1
     378:	59 f7       	brne	.-42     	; 0x350 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x186>
     37a:	ba 01       	movw	r22, r20
     37c:	6c 5f       	subi	r22, 0xFC	; 252
     37e:	7f 4f       	sbci	r23, 0xFF	; 255
     380:	2b 01       	movw	r4, r22
     382:	07 2e       	mov	r0, r23
     384:	00 0c       	add	r0, r0
     386:	66 08       	sbc	r6, r6
     388:	77 08       	sbc	r7, r7
     38a:	4c 0c       	add	r4, r12
     38c:	5d 1c       	adc	r5, r13
     38e:	6e 1c       	adc	r6, r14
     390:	7f 1c       	adc	r7, r15
     392:	8b 01       	movw	r16, r22
     394:	20 e0       	ldi	r18, 0x00	; 0
     396:	30 e0       	ldi	r19, 0x00	; 0
     398:	04 15       	cp	r16, r4
     39a:	15 05       	cpc	r17, r5
     39c:	26 05       	cpc	r18, r6
     39e:	37 05       	cpc	r19, r7
     3a0:	90 f4       	brcc	.+36     	; 0x3c6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x1fc>
     3a2:	4d 5f       	subi	r20, 0xFD	; 253
     3a4:	5f 4f       	sbci	r21, 0xFF	; 255
     3a6:	fe 01       	movw	r30, r28
     3a8:	e4 0f       	add	r30, r20
     3aa:	f5 1f       	adc	r31, r21
     3ac:	9b 01       	movw	r18, r22
     3ae:	41 81       	ldd	r20, Z+1	; 0x01
     3b0:	41 93       	st	Z+, r20
     3b2:	2f 5f       	subi	r18, 0xFF	; 255
     3b4:	3f 4f       	sbci	r19, 0xFF	; 255
     3b6:	49 01       	movw	r8, r18
     3b8:	a1 2c       	mov	r10, r1
     3ba:	b1 2c       	mov	r11, r1
     3bc:	84 14       	cp	r8, r4
     3be:	95 04       	cpc	r9, r5
     3c0:	a6 04       	cpc	r10, r6
     3c2:	b7 04       	cpc	r11, r7
     3c4:	a0 f3       	brcs	.-24     	; 0x3ae <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x1e4>
     3c6:	c6 0e       	add	r12, r22
     3c8:	d7 1e       	adc	r13, r23
     3ca:	fe 01       	movw	r30, r28
     3cc:	ec 0d       	add	r30, r12
     3ce:	fd 1d       	adc	r31, r13
     3d0:	df 01       	movw	r26, r30
     3d2:	11 97       	sbiw	r26, 0x01	; 1
     3d4:	1c 92       	st	X, r1
     3d6:	61 50       	subi	r22, 0x01	; 1
     3d8:	71 09       	sbc	r23, r1
     3da:	c6 0f       	add	r28, r22
     3dc:	d7 1f       	adc	r29, r23
     3de:	dc 01       	movw	r26, r24
     3e0:	19 96       	adiw	r26, 0x09	; 9
     3e2:	dc 93       	st	X, r29
     3e4:	ce 93       	st	-X, r28
     3e6:	18 97       	sbiw	r26, 0x08	; 8
     3e8:	21 81       	ldd	r18, Z+1	; 0x01
     3ea:	42 81       	ldd	r20, Z+2	; 0x02
     3ec:	50 e0       	ldi	r21, 0x00	; 0
     3ee:	60 e0       	ldi	r22, 0x00	; 0
     3f0:	70 e0       	ldi	r23, 0x00	; 0
     3f2:	ba 01       	movw	r22, r20
     3f4:	55 27       	eor	r21, r21
     3f6:	44 27       	eor	r20, r20
     3f8:	52 2b       	or	r21, r18
     3fa:	20 81       	ld	r18, Z
     3fc:	42 2b       	or	r20, r18
     3fe:	23 81       	ldd	r18, Z+3	; 0x03
     400:	72 2b       	or	r23, r18
     402:	fc 01       	movw	r30, r24
     404:	42 87       	std	Z+10, r20	; 0x0a
     406:	53 87       	std	Z+11, r21	; 0x0b
     408:	64 87       	std	Z+12, r22	; 0x0c
     40a:	75 87       	std	Z+13, r23	; 0x0d
     40c:	c6 01       	movw	r24, r12
     40e:	04 96       	adiw	r24, 0x04	; 4
     410:	df 91       	pop	r29
     412:	cf 91       	pop	r28
     414:	1f 91       	pop	r17
     416:	0f 91       	pop	r16
     418:	ff 90       	pop	r15
     41a:	ef 90       	pop	r14
     41c:	df 90       	pop	r13
     41e:	cf 90       	pop	r12
     420:	bf 90       	pop	r11
     422:	af 90       	pop	r10
     424:	9f 90       	pop	r9
     426:	8f 90       	pop	r8
     428:	7f 90       	pop	r7
     42a:	6f 90       	pop	r6
     42c:	5f 90       	pop	r5
     42e:	4f 90       	pop	r4
     430:	08 95       	ret

00000432 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:
     432:	85 e9       	ldi	r24, 0x95	; 149
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	08 95       	ret

00000438 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
     438:	8e ea       	ldi	r24, 0xAE	; 174
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	08 95       	ret

0000043e <_ZN14rosserial_msgs3Log11deserializeEPh>:
     43e:	8f 92       	push	r8
     440:	9f 92       	push	r9
     442:	af 92       	push	r10
     444:	bf 92       	push	r11
     446:	cf 92       	push	r12
     448:	df 92       	push	r13
     44a:	ef 92       	push	r14
     44c:	ff 92       	push	r15
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
     452:	dc 01       	movw	r26, r24
     454:	eb 01       	movw	r28, r22
     456:	fb 01       	movw	r30, r22
     458:	81 91       	ld	r24, Z+
     45a:	12 96       	adiw	r26, 0x02	; 2
     45c:	8c 93       	st	X, r24
     45e:	12 97       	sbiw	r26, 0x02	; 2
     460:	20 e0       	ldi	r18, 0x00	; 0
     462:	30 e0       	ldi	r19, 0x00	; 0
     464:	c1 2c       	mov	r12, r1
     466:	d1 2c       	mov	r13, r1
     468:	76 01       	movw	r14, r12
     46a:	0e c0       	rjmp	.+28     	; 0x488 <_ZN14rosserial_msgs3Log11deserializeEPh+0x4a>
     46c:	46 01       	movw	r8, r12
     46e:	57 01       	movw	r10, r14
     470:	85 e0       	ldi	r24, 0x05	; 5
     472:	88 0e       	add	r8, r24
     474:	91 1c       	adc	r9, r1
     476:	a1 1c       	adc	r10, r1
     478:	b1 1c       	adc	r11, r1
     47a:	86 e0       	ldi	r24, 0x06	; 6
     47c:	88 16       	cp	r8, r24
     47e:	91 04       	cpc	r9, r1
     480:	a1 04       	cpc	r10, r1
     482:	b1 04       	cpc	r11, r1
     484:	b8 f4       	brcc	.+46     	; 0x4b4 <_ZN14rosserial_msgs3Log11deserializeEPh+0x76>
     486:	26 c0       	rjmp	.+76     	; 0x4d4 <_ZN14rosserial_msgs3Log11deserializeEPh+0x96>
     488:	41 91       	ld	r20, Z+
     48a:	50 e0       	ldi	r21, 0x00	; 0
     48c:	02 2e       	mov	r0, r18
     48e:	02 c0       	rjmp	.+4      	; 0x494 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
     490:	44 0f       	add	r20, r20
     492:	55 1f       	adc	r21, r21
     494:	0a 94       	dec	r0
     496:	e2 f7       	brpl	.-8      	; 0x490 <_ZN14rosserial_msgs3Log11deserializeEPh+0x52>
     498:	05 2e       	mov	r0, r21
     49a:	00 0c       	add	r0, r0
     49c:	66 0b       	sbc	r22, r22
     49e:	77 0b       	sbc	r23, r23
     4a0:	c4 2a       	or	r12, r20
     4a2:	d5 2a       	or	r13, r21
     4a4:	e6 2a       	or	r14, r22
     4a6:	f7 2a       	or	r15, r23
     4a8:	28 5f       	subi	r18, 0xF8	; 248
     4aa:	3f 4f       	sbci	r19, 0xFF	; 255
     4ac:	20 32       	cpi	r18, 0x20	; 32
     4ae:	31 05       	cpc	r19, r1
     4b0:	59 f7       	brne	.-42     	; 0x488 <_ZN14rosserial_msgs3Log11deserializeEPh+0x4a>
     4b2:	dc cf       	rjmp	.-72     	; 0x46c <_ZN14rosserial_msgs3Log11deserializeEPh+0x2e>
     4b4:	fe 01       	movw	r30, r28
     4b6:	34 96       	adiw	r30, 0x04	; 4
     4b8:	25 e0       	ldi	r18, 0x05	; 5
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	81 81       	ldd	r24, Z+1	; 0x01
     4be:	81 93       	st	Z+, r24
     4c0:	2f 5f       	subi	r18, 0xFF	; 255
     4c2:	3f 4f       	sbci	r19, 0xFF	; 255
     4c4:	a9 01       	movw	r20, r18
     4c6:	60 e0       	ldi	r22, 0x00	; 0
     4c8:	70 e0       	ldi	r23, 0x00	; 0
     4ca:	48 15       	cp	r20, r8
     4cc:	59 05       	cpc	r21, r9
     4ce:	6a 05       	cpc	r22, r10
     4d0:	7b 05       	cpc	r23, r11
     4d2:	a0 f3       	brcs	.-24     	; 0x4bc <_ZN14rosserial_msgs3Log11deserializeEPh+0x7e>
     4d4:	fe 01       	movw	r30, r28
     4d6:	ec 0d       	add	r30, r12
     4d8:	fd 1d       	adc	r31, r13
     4da:	14 82       	std	Z+4, r1	; 0x04
     4dc:	24 96       	adiw	r28, 0x04	; 4
     4de:	14 96       	adiw	r26, 0x04	; 4
     4e0:	dc 93       	st	X, r29
     4e2:	ce 93       	st	-X, r28
     4e4:	13 97       	sbiw	r26, 0x03	; 3
     4e6:	c6 01       	movw	r24, r12
     4e8:	05 96       	adiw	r24, 0x05	; 5
     4ea:	df 91       	pop	r29
     4ec:	cf 91       	pop	r28
     4ee:	ff 90       	pop	r15
     4f0:	ef 90       	pop	r14
     4f2:	df 90       	pop	r13
     4f4:	cf 90       	pop	r12
     4f6:	bf 90       	pop	r11
     4f8:	af 90       	pop	r10
     4fa:	9f 90       	pop	r9
     4fc:	8f 90       	pop	r8
     4fe:	08 95       	ret

00000500 <_ZN14rosserial_msgs3Log7getTypeEv>:
     500:	8f ec       	ldi	r24, 0xCF	; 207
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	08 95       	ret

00000506 <_ZN14rosserial_msgs3Log6getMD5Ev>:
     506:	82 ee       	ldi	r24, 0xE2	; 226
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	08 95       	ret

0000050c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:
     50c:	8a ef       	ldi	r24, 0xFA	; 250
     50e:	91 e0       	ldi	r25, 0x01	; 1
     510:	08 95       	ret

00000512 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
     512:	83 e0       	ldi	r24, 0x03	; 3
     514:	91 e0       	ldi	r25, 0x01	; 1
     516:	08 95       	ret

00000518 <_ZNK8std_msgs5Int329serializeEPh>:
     518:	dc 01       	movw	r26, r24
     51a:	fb 01       	movw	r30, r22
     51c:	12 96       	adiw	r26, 0x02	; 2
     51e:	3c 91       	ld	r19, X
     520:	12 97       	sbiw	r26, 0x02	; 2
     522:	13 96       	adiw	r26, 0x03	; 3
     524:	2c 91       	ld	r18, X
     526:	13 97       	sbiw	r26, 0x03	; 3
     528:	14 96       	adiw	r26, 0x04	; 4
     52a:	9c 91       	ld	r25, X
     52c:	14 97       	sbiw	r26, 0x04	; 4
     52e:	15 96       	adiw	r26, 0x05	; 5
     530:	8c 91       	ld	r24, X
     532:	30 83       	st	Z, r19
     534:	21 83       	std	Z+1, r18	; 0x01
     536:	92 83       	std	Z+2, r25	; 0x02
     538:	83 83       	std	Z+3, r24	; 0x03
     53a:	84 e0       	ldi	r24, 0x04	; 4
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	08 95       	ret

00000540 <_ZN8std_msgs5Int3211deserializeEPh>:
     540:	fb 01       	movw	r30, r22
     542:	21 81       	ldd	r18, Z+1	; 0x01
     544:	42 81       	ldd	r20, Z+2	; 0x02
     546:	50 e0       	ldi	r21, 0x00	; 0
     548:	60 e0       	ldi	r22, 0x00	; 0
     54a:	70 e0       	ldi	r23, 0x00	; 0
     54c:	ba 01       	movw	r22, r20
     54e:	55 27       	eor	r21, r21
     550:	44 27       	eor	r20, r20
     552:	52 2b       	or	r21, r18
     554:	20 81       	ld	r18, Z
     556:	42 2b       	or	r20, r18
     558:	23 81       	ldd	r18, Z+3	; 0x03
     55a:	72 2b       	or	r23, r18
     55c:	fc 01       	movw	r30, r24
     55e:	42 83       	std	Z+2, r20	; 0x02
     560:	53 83       	std	Z+3, r21	; 0x03
     562:	64 83       	std	Z+4, r22	; 0x04
     564:	75 83       	std	Z+5, r23	; 0x05
     566:	84 e0       	ldi	r24, 0x04	; 4
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	08 95       	ret

0000056c <_ZN8std_msgs5Int327getTypeEv>:
     56c:	84 e2       	ldi	r24, 0x24	; 36
     56e:	91 e0       	ldi	r25, 0x01	; 1
     570:	08 95       	ret

00000572 <_ZN8std_msgs5Int326getMD5Ev>:
     572:	83 e3       	ldi	r24, 0x33	; 51
     574:	91 e0       	ldi	r25, 0x01	; 1
     576:	08 95       	ret

00000578 <_Z13AngleCallbackRKN8std_msgs5Int32E>:
     578:	fc 01       	movw	r30, r24
     57a:	82 81       	ldd	r24, Z+2	; 0x02
     57c:	80 93 e4 06 	sts	0x06E4, r24	; 0x8006e4 <GOAL>
     580:	08 95       	ret

00000582 <_ZN3ros10SubscriberIN8std_msgs5Int32EvE8callbackEPh>:
     582:	fb 01       	movw	r30, r22
     584:	21 81       	ldd	r18, Z+1	; 0x01
     586:	42 81       	ldd	r20, Z+2	; 0x02
     588:	50 e0       	ldi	r21, 0x00	; 0
     58a:	60 e0       	ldi	r22, 0x00	; 0
     58c:	70 e0       	ldi	r23, 0x00	; 0
     58e:	ba 01       	movw	r22, r20
     590:	55 27       	eor	r21, r21
     592:	44 27       	eor	r20, r20
     594:	52 2b       	or	r21, r18
     596:	20 81       	ld	r18, Z
     598:	42 2b       	or	r20, r18
     59a:	23 81       	ldd	r18, Z+3	; 0x03
     59c:	72 2b       	or	r23, r18
     59e:	dc 01       	movw	r26, r24
     5a0:	18 96       	adiw	r26, 0x08	; 8
     5a2:	4d 93       	st	X+, r20
     5a4:	5d 93       	st	X+, r21
     5a6:	6d 93       	st	X+, r22
     5a8:	7c 93       	st	X, r23
     5aa:	1b 97       	sbiw	r26, 0x0b	; 11
     5ac:	1c 96       	adiw	r26, 0x0c	; 12
     5ae:	ed 91       	ld	r30, X+
     5b0:	fc 91       	ld	r31, X
     5b2:	1d 97       	sbiw	r26, 0x0d	; 13
     5b4:	06 96       	adiw	r24, 0x06	; 6
     5b6:	09 95       	icall
     5b8:	08 95       	ret

000005ba <_ZN3ros10SubscriberIN8std_msgs5Int32EvE15getEndpointTypeEv>:
     5ba:	fc 01       	movw	r30, r24
     5bc:	86 85       	ldd	r24, Z+14	; 0x0e
     5be:	97 85       	ldd	r25, Z+15	; 0x0f
     5c0:	08 95       	ret

000005c2 <_ZN3ros10SubscriberIN8std_msgs5Int32EvE10getMsgTypeEv>:
     5c2:	84 e2       	ldi	r24, 0x24	; 36
     5c4:	91 e0       	ldi	r25, 0x01	; 1
     5c6:	08 95       	ret

000005c8 <_ZN3ros10SubscriberIN8std_msgs5Int32EvE9getMsgMD5Ev>:
     5c8:	83 e3       	ldi	r24, 0x33	; 51
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	08 95       	ret

000005ce <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
     5ce:	8f 57       	subi	r24, 0x7F	; 127
     5d0:	9b 4f       	sbci	r25, 0xFB	; 251
     5d2:	fc 01       	movw	r30, r24
     5d4:	80 81       	ld	r24, Z
     5d6:	08 95       	ret

000005d8 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:
     5d8:	8f 92       	push	r8
     5da:	9f 92       	push	r9
     5dc:	af 92       	push	r10
     5de:	bf 92       	push	r11
     5e0:	cf 92       	push	r12
     5e2:	df 92       	push	r13
     5e4:	ef 92       	push	r14
     5e6:	ff 92       	push	r15
     5e8:	0f 93       	push	r16
     5ea:	1f 93       	push	r17
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	7c 01       	movw	r14, r24
     5f2:	8b 01       	movw	r16, r22
     5f4:	dc 01       	movw	r26, r24
     5f6:	12 96       	adiw	r26, 0x02	; 2
     5f8:	8c 91       	ld	r24, X
     5fa:	12 97       	sbiw	r26, 0x02	; 2
     5fc:	fb 01       	movw	r30, r22
     5fe:	80 83       	st	Z, r24
     600:	13 96       	adiw	r26, 0x03	; 3
     602:	8c 91       	ld	r24, X
     604:	13 97       	sbiw	r26, 0x03	; 3
     606:	81 83       	std	Z+1, r24	; 0x01
     608:	14 96       	adiw	r26, 0x04	; 4
     60a:	ed 91       	ld	r30, X+
     60c:	fc 91       	ld	r31, X
     60e:	15 97       	sbiw	r26, 0x05	; 5
     610:	ef 01       	movw	r28, r30
     612:	09 90       	ld	r0, Y+
     614:	00 20       	and	r0, r0
     616:	e9 f7       	brne	.-6      	; 0x612 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x3a>
     618:	21 97       	sbiw	r28, 0x01	; 1
     61a:	ce 1b       	sub	r28, r30
     61c:	df 0b       	sbc	r29, r31
     61e:	ce 01       	movw	r24, r28
     620:	a0 e0       	ldi	r26, 0x00	; 0
     622:	b0 e0       	ldi	r27, 0x00	; 0
     624:	fb 01       	movw	r30, r22
     626:	c2 83       	std	Z+2, r28	; 0x02
     628:	93 83       	std	Z+3, r25	; 0x03
     62a:	a4 83       	std	Z+4, r26	; 0x04
     62c:	b5 83       	std	Z+5, r27	; 0x05
     62e:	d7 01       	movw	r26, r14
     630:	14 96       	adiw	r26, 0x04	; 4
     632:	6d 91       	ld	r22, X+
     634:	7c 91       	ld	r23, X
     636:	15 97       	sbiw	r26, 0x05	; 5
     638:	ae 01       	movw	r20, r28
     63a:	c8 01       	movw	r24, r16
     63c:	06 96       	adiw	r24, 0x06	; 6
     63e:	0e 94 b6 1c 	call	0x396c	; 0x396c <memcpy>
     642:	26 96       	adiw	r28, 0x06	; 6
     644:	f7 01       	movw	r30, r14
     646:	a6 81       	ldd	r26, Z+6	; 0x06
     648:	b7 81       	ldd	r27, Z+7	; 0x07
     64a:	fd 01       	movw	r30, r26
     64c:	01 90       	ld	r0, Z+
     64e:	00 20       	and	r0, r0
     650:	e9 f7       	brne	.-6      	; 0x64c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x74>
     652:	31 97       	sbiw	r30, 0x01	; 1
     654:	6f 01       	movw	r12, r30
     656:	ca 1a       	sub	r12, r26
     658:	db 0a       	sbc	r13, r27
     65a:	c6 01       	movw	r24, r12
     65c:	a0 e0       	ldi	r26, 0x00	; 0
     65e:	b0 e0       	ldi	r27, 0x00	; 0
     660:	f8 01       	movw	r30, r16
     662:	ec 0f       	add	r30, r28
     664:	fd 1f       	adc	r31, r29
     666:	20 e0       	ldi	r18, 0x00	; 0
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	ac 01       	movw	r20, r24
     66c:	bd 01       	movw	r22, r26
     66e:	02 2e       	mov	r0, r18
     670:	04 c0       	rjmp	.+8      	; 0x67a <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0xa2>
     672:	76 95       	lsr	r23
     674:	67 95       	ror	r22
     676:	57 95       	ror	r21
     678:	47 95       	ror	r20
     67a:	0a 94       	dec	r0
     67c:	d2 f7       	brpl	.-12     	; 0x672 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x9a>
     67e:	41 93       	st	Z+, r20
     680:	28 5f       	subi	r18, 0xF8	; 248
     682:	3f 4f       	sbci	r19, 0xFF	; 255
     684:	20 32       	cpi	r18, 0x20	; 32
     686:	31 05       	cpc	r19, r1
     688:	81 f7       	brne	.-32     	; 0x66a <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x92>
     68a:	24 96       	adiw	r28, 0x04	; 4
     68c:	d7 01       	movw	r26, r14
     68e:	16 96       	adiw	r26, 0x06	; 6
     690:	6d 91       	ld	r22, X+
     692:	7c 91       	ld	r23, X
     694:	17 97       	sbiw	r26, 0x07	; 7
     696:	a6 01       	movw	r20, r12
     698:	c8 01       	movw	r24, r16
     69a:	8c 0f       	add	r24, r28
     69c:	9d 1f       	adc	r25, r29
     69e:	0e 94 b6 1c 	call	0x396c	; 0x396c <memcpy>
     6a2:	cc 0d       	add	r28, r12
     6a4:	dd 1d       	adc	r29, r13
     6a6:	d7 01       	movw	r26, r14
     6a8:	18 96       	adiw	r26, 0x08	; 8
     6aa:	ed 91       	ld	r30, X+
     6ac:	fc 91       	ld	r31, X
     6ae:	19 97       	sbiw	r26, 0x09	; 9
     6b0:	df 01       	movw	r26, r30
     6b2:	0d 90       	ld	r0, X+
     6b4:	00 20       	and	r0, r0
     6b6:	e9 f7       	brne	.-6      	; 0x6b2 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0xda>
     6b8:	11 97       	sbiw	r26, 0x01	; 1
     6ba:	6d 01       	movw	r12, r26
     6bc:	ce 1a       	sub	r12, r30
     6be:	df 0a       	sbc	r13, r31
     6c0:	46 01       	movw	r8, r12
     6c2:	a1 2c       	mov	r10, r1
     6c4:	b1 2c       	mov	r11, r1
     6c6:	f8 01       	movw	r30, r16
     6c8:	ec 0f       	add	r30, r28
     6ca:	fd 1f       	adc	r31, r29
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	b5 01       	movw	r22, r10
     6d2:	a4 01       	movw	r20, r8
     6d4:	08 2e       	mov	r0, r24
     6d6:	04 c0       	rjmp	.+8      	; 0x6e0 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x108>
     6d8:	76 95       	lsr	r23
     6da:	67 95       	ror	r22
     6dc:	57 95       	ror	r21
     6de:	47 95       	ror	r20
     6e0:	0a 94       	dec	r0
     6e2:	d2 f7       	brpl	.-12     	; 0x6d8 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x100>
     6e4:	41 93       	st	Z+, r20
     6e6:	08 96       	adiw	r24, 0x08	; 8
     6e8:	80 32       	cpi	r24, 0x20	; 32
     6ea:	91 05       	cpc	r25, r1
     6ec:	89 f7       	brne	.-30     	; 0x6d0 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0xf8>
     6ee:	24 96       	adiw	r28, 0x04	; 4
     6f0:	f7 01       	movw	r30, r14
     6f2:	60 85       	ldd	r22, Z+8	; 0x08
     6f4:	71 85       	ldd	r23, Z+9	; 0x09
     6f6:	a6 01       	movw	r20, r12
     6f8:	c8 01       	movw	r24, r16
     6fa:	8c 0f       	add	r24, r28
     6fc:	9d 1f       	adc	r25, r29
     6fe:	0e 94 b6 1c 	call	0x396c	; 0x396c <memcpy>
     702:	c6 01       	movw	r24, r12
     704:	8c 0f       	add	r24, r28
     706:	9d 1f       	adc	r25, r29
     708:	d7 01       	movw	r26, r14
     70a:	1a 96       	adiw	r26, 0x0a	; 10
     70c:	5c 91       	ld	r21, X
     70e:	1a 97       	sbiw	r26, 0x0a	; 10
     710:	1b 96       	adiw	r26, 0x0b	; 11
     712:	4c 91       	ld	r20, X
     714:	1b 97       	sbiw	r26, 0x0b	; 11
     716:	1c 96       	adiw	r26, 0x0c	; 12
     718:	3c 91       	ld	r19, X
     71a:	1c 97       	sbiw	r26, 0x0c	; 12
     71c:	1d 96       	adiw	r26, 0x0d	; 13
     71e:	2c 91       	ld	r18, X
     720:	f8 01       	movw	r30, r16
     722:	e8 0f       	add	r30, r24
     724:	f9 1f       	adc	r31, r25
     726:	50 83       	st	Z, r21
     728:	41 83       	std	Z+1, r20	; 0x01
     72a:	32 83       	std	Z+2, r19	; 0x02
     72c:	23 83       	std	Z+3, r18	; 0x03
     72e:	04 96       	adiw	r24, 0x04	; 4
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	0f 91       	pop	r16
     738:	ff 90       	pop	r15
     73a:	ef 90       	pop	r14
     73c:	df 90       	pop	r13
     73e:	cf 90       	pop	r12
     740:	bf 90       	pop	r11
     742:	af 90       	pop	r10
     744:	9f 90       	pop	r9
     746:	8f 90       	pop	r8
     748:	08 95       	ret

0000074a <_ZNK14rosserial_msgs3Log9serializeEPh>:
     74a:	cf 92       	push	r12
     74c:	df 92       	push	r13
     74e:	ef 92       	push	r14
     750:	ff 92       	push	r15
     752:	cf 93       	push	r28
     754:	df 93       	push	r29
     756:	dc 01       	movw	r26, r24
     758:	cb 01       	movw	r24, r22
     75a:	12 96       	adiw	r26, 0x02	; 2
     75c:	2c 91       	ld	r18, X
     75e:	12 97       	sbiw	r26, 0x02	; 2
     760:	fb 01       	movw	r30, r22
     762:	21 93       	st	Z+, r18
     764:	13 96       	adiw	r26, 0x03	; 3
     766:	2d 91       	ld	r18, X+
     768:	3c 91       	ld	r19, X
     76a:	14 97       	sbiw	r26, 0x04	; 4
     76c:	e9 01       	movw	r28, r18
     76e:	09 90       	ld	r0, Y+
     770:	00 20       	and	r0, r0
     772:	e9 f7       	brne	.-6      	; 0x76e <_ZNK14rosserial_msgs3Log9serializeEPh+0x24>
     774:	21 97       	sbiw	r28, 0x01	; 1
     776:	c2 1b       	sub	r28, r18
     778:	d3 0b       	sbc	r29, r19
     77a:	6e 01       	movw	r12, r28
     77c:	e1 2c       	mov	r14, r1
     77e:	f1 2c       	mov	r15, r1
     780:	20 e0       	ldi	r18, 0x00	; 0
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	b7 01       	movw	r22, r14
     786:	a6 01       	movw	r20, r12
     788:	02 2e       	mov	r0, r18
     78a:	04 c0       	rjmp	.+8      	; 0x794 <_ZNK14rosserial_msgs3Log9serializeEPh+0x4a>
     78c:	76 95       	lsr	r23
     78e:	67 95       	ror	r22
     790:	57 95       	ror	r21
     792:	47 95       	ror	r20
     794:	0a 94       	dec	r0
     796:	d2 f7       	brpl	.-12     	; 0x78c <_ZNK14rosserial_msgs3Log9serializeEPh+0x42>
     798:	41 93       	st	Z+, r20
     79a:	28 5f       	subi	r18, 0xF8	; 248
     79c:	3f 4f       	sbci	r19, 0xFF	; 255
     79e:	20 32       	cpi	r18, 0x20	; 32
     7a0:	31 05       	cpc	r19, r1
     7a2:	81 f7       	brne	.-32     	; 0x784 <_ZNK14rosserial_msgs3Log9serializeEPh+0x3a>
     7a4:	13 96       	adiw	r26, 0x03	; 3
     7a6:	6d 91       	ld	r22, X+
     7a8:	7c 91       	ld	r23, X
     7aa:	14 97       	sbiw	r26, 0x04	; 4
     7ac:	ae 01       	movw	r20, r28
     7ae:	05 96       	adiw	r24, 0x05	; 5
     7b0:	0e 94 b6 1c 	call	0x396c	; 0x396c <memcpy>
     7b4:	ce 01       	movw	r24, r28
     7b6:	05 96       	adiw	r24, 0x05	; 5
     7b8:	df 91       	pop	r29
     7ba:	cf 91       	pop	r28
     7bc:	ff 90       	pop	r15
     7be:	ef 90       	pop	r14
     7c0:	df 90       	pop	r13
     7c2:	cf 90       	pop	r12
     7c4:	08 95       	ret

000007c6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:
     7c6:	4f 92       	push	r4
     7c8:	5f 92       	push	r5
     7ca:	6f 92       	push	r6
     7cc:	7f 92       	push	r7
     7ce:	af 92       	push	r10
     7d0:	bf 92       	push	r11
     7d2:	cf 92       	push	r12
     7d4:	df 92       	push	r13
     7d6:	ef 92       	push	r14
     7d8:	ff 92       	push	r15
     7da:	0f 93       	push	r16
     7dc:	1f 93       	push	r17
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
     7e2:	dc 01       	movw	r26, r24
     7e4:	12 96       	adiw	r26, 0x02	; 2
     7e6:	2c 91       	ld	r18, X
     7e8:	12 97       	sbiw	r26, 0x02	; 2
     7ea:	fb 01       	movw	r30, r22
     7ec:	20 83       	st	Z, r18
     7ee:	13 96       	adiw	r26, 0x03	; 3
     7f0:	2c 91       	ld	r18, X
     7f2:	13 97       	sbiw	r26, 0x03	; 3
     7f4:	21 83       	std	Z+1, r18	; 0x01
     7f6:	14 96       	adiw	r26, 0x04	; 4
     7f8:	2c 91       	ld	r18, X
     7fa:	14 97       	sbiw	r26, 0x04	; 4
     7fc:	22 83       	std	Z+2, r18	; 0x02
     7fe:	15 96       	adiw	r26, 0x05	; 5
     800:	2c 91       	ld	r18, X
     802:	15 97       	sbiw	r26, 0x05	; 5
     804:	23 83       	std	Z+3, r18	; 0x03
     806:	12 96       	adiw	r26, 0x02	; 2
     808:	0d 91       	ld	r16, X+
     80a:	1d 91       	ld	r17, X+
     80c:	2d 91       	ld	r18, X+
     80e:	3c 91       	ld	r19, X
     810:	15 97       	sbiw	r26, 0x05	; 5
     812:	01 2b       	or	r16, r17
     814:	02 2b       	or	r16, r18
     816:	03 2b       	or	r16, r19
     818:	71 f1       	breq	.+92     	; 0x876 <__stack+0x17>
     81a:	db 01       	movw	r26, r22
     81c:	00 e0       	ldi	r16, 0x00	; 0
     81e:	10 e0       	ldi	r17, 0x00	; 0
     820:	98 01       	movw	r18, r16
     822:	c4 e0       	ldi	r28, 0x04	; 4
     824:	d0 e0       	ldi	r29, 0x00	; 0
     826:	fc 01       	movw	r30, r24
     828:	42 85       	ldd	r20, Z+10	; 0x0a
     82a:	53 85       	ldd	r21, Z+11	; 0x0b
     82c:	fa 01       	movw	r30, r20
     82e:	ec 0f       	add	r30, r28
     830:	fd 1f       	adc	r31, r29
     832:	34 97       	sbiw	r30, 0x04	; 4
     834:	e0 80       	ld	r14, Z
     836:	f1 80       	ldd	r15, Z+1	; 0x01
     838:	52 81       	ldd	r21, Z+2	; 0x02
     83a:	43 81       	ldd	r20, Z+3	; 0x03
     83c:	14 96       	adiw	r26, 0x04	; 4
     83e:	ec 92       	st	X, r14
     840:	14 97       	sbiw	r26, 0x04	; 4
     842:	15 96       	adiw	r26, 0x05	; 5
     844:	fc 92       	st	X, r15
     846:	15 97       	sbiw	r26, 0x05	; 5
     848:	16 96       	adiw	r26, 0x06	; 6
     84a:	5c 93       	st	X, r21
     84c:	16 97       	sbiw	r26, 0x06	; 6
     84e:	17 96       	adiw	r26, 0x07	; 7
     850:	4c 93       	st	X, r20
     852:	17 97       	sbiw	r26, 0x07	; 7
     854:	24 96       	adiw	r28, 0x04	; 4
     856:	0f 5f       	subi	r16, 0xFF	; 255
     858:	1f 4f       	sbci	r17, 0xFF	; 255
     85a:	2f 4f       	sbci	r18, 0xFF	; 255
     85c:	3f 4f       	sbci	r19, 0xFF	; 255
     85e:	14 96       	adiw	r26, 0x04	; 4
     860:	fc 01       	movw	r30, r24
     862:	c2 80       	ldd	r12, Z+2	; 0x02
     864:	d3 80       	ldd	r13, Z+3	; 0x03
     866:	e4 80       	ldd	r14, Z+4	; 0x04
     868:	f5 80       	ldd	r15, Z+5	; 0x05
     86a:	0c 15       	cp	r16, r12
     86c:	1d 05       	cpc	r17, r13
     86e:	2e 05       	cpc	r18, r14
     870:	3f 05       	cpc	r19, r15
     872:	c8 f2       	brcs	.-78     	; 0x826 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x60>
     874:	02 c0       	rjmp	.+4      	; 0x87a <__stack+0x1b>
     876:	c4 e0       	ldi	r28, 0x04	; 4
     878:	d0 e0       	ldi	r29, 0x00	; 0
     87a:	db 01       	movw	r26, r22
     87c:	ac 0f       	add	r26, r28
     87e:	bd 1f       	adc	r27, r29
     880:	fc 01       	movw	r30, r24
     882:	24 85       	ldd	r18, Z+12	; 0x0c
     884:	2c 93       	st	X, r18
     886:	25 85       	ldd	r18, Z+13	; 0x0d
     888:	11 96       	adiw	r26, 0x01	; 1
     88a:	2c 93       	st	X, r18
     88c:	11 97       	sbiw	r26, 0x01	; 1
     88e:	26 85       	ldd	r18, Z+14	; 0x0e
     890:	12 96       	adiw	r26, 0x02	; 2
     892:	2c 93       	st	X, r18
     894:	12 97       	sbiw	r26, 0x02	; 2
     896:	27 85       	ldd	r18, Z+15	; 0x0f
     898:	13 96       	adiw	r26, 0x03	; 3
     89a:	2c 93       	st	X, r18
     89c:	13 97       	sbiw	r26, 0x03	; 3
     89e:	24 96       	adiw	r28, 0x04	; 4
     8a0:	04 85       	ldd	r16, Z+12	; 0x0c
     8a2:	15 85       	ldd	r17, Z+13	; 0x0d
     8a4:	26 85       	ldd	r18, Z+14	; 0x0e
     8a6:	37 85       	ldd	r19, Z+15	; 0x0f
     8a8:	01 2b       	or	r16, r17
     8aa:	02 2b       	or	r16, r18
     8ac:	03 2b       	or	r16, r19
     8ae:	69 f1       	breq	.+90     	; 0x90a <__stack+0xab>
     8b0:	40 e0       	ldi	r20, 0x00	; 0
     8b2:	50 e0       	ldi	r21, 0x00	; 0
     8b4:	00 e0       	ldi	r16, 0x00	; 0
     8b6:	10 e0       	ldi	r17, 0x00	; 0
     8b8:	98 01       	movw	r18, r16
     8ba:	fc 01       	movw	r30, r24
     8bc:	e4 88       	ldd	r14, Z+20	; 0x14
     8be:	f5 88       	ldd	r15, Z+21	; 0x15
     8c0:	f7 01       	movw	r30, r14
     8c2:	e4 0f       	add	r30, r20
     8c4:	f5 1f       	adc	r31, r21
     8c6:	d0 80       	ld	r13, Z
     8c8:	e1 80       	ldd	r14, Z+1	; 0x01
     8ca:	f2 80       	ldd	r15, Z+2	; 0x02
     8cc:	e3 81       	ldd	r30, Z+3	; 0x03
     8ce:	14 96       	adiw	r26, 0x04	; 4
     8d0:	dc 92       	st	X, r13
     8d2:	14 97       	sbiw	r26, 0x04	; 4
     8d4:	15 96       	adiw	r26, 0x05	; 5
     8d6:	ec 92       	st	X, r14
     8d8:	15 97       	sbiw	r26, 0x05	; 5
     8da:	16 96       	adiw	r26, 0x06	; 6
     8dc:	fc 92       	st	X, r15
     8de:	16 97       	sbiw	r26, 0x06	; 6
     8e0:	17 96       	adiw	r26, 0x07	; 7
     8e2:	ec 93       	st	X, r30
     8e4:	17 97       	sbiw	r26, 0x07	; 7
     8e6:	24 96       	adiw	r28, 0x04	; 4
     8e8:	0f 5f       	subi	r16, 0xFF	; 255
     8ea:	1f 4f       	sbci	r17, 0xFF	; 255
     8ec:	2f 4f       	sbci	r18, 0xFF	; 255
     8ee:	3f 4f       	sbci	r19, 0xFF	; 255
     8f0:	4c 5f       	subi	r20, 0xFC	; 252
     8f2:	5f 4f       	sbci	r21, 0xFF	; 255
     8f4:	14 96       	adiw	r26, 0x04	; 4
     8f6:	fc 01       	movw	r30, r24
     8f8:	c4 84       	ldd	r12, Z+12	; 0x0c
     8fa:	d5 84       	ldd	r13, Z+13	; 0x0d
     8fc:	e6 84       	ldd	r14, Z+14	; 0x0e
     8fe:	f7 84       	ldd	r15, Z+15	; 0x0f
     900:	0c 15       	cp	r16, r12
     902:	1d 05       	cpc	r17, r13
     904:	2e 05       	cpc	r18, r14
     906:	3f 05       	cpc	r19, r15
     908:	c0 f2       	brcs	.-80     	; 0x8ba <__stack+0x5b>
     90a:	fb 01       	movw	r30, r22
     90c:	ec 0f       	add	r30, r28
     90e:	fd 1f       	adc	r31, r29
     910:	dc 01       	movw	r26, r24
     912:	56 96       	adiw	r26, 0x16	; 22
     914:	2c 91       	ld	r18, X
     916:	56 97       	sbiw	r26, 0x16	; 22
     918:	20 83       	st	Z, r18
     91a:	57 96       	adiw	r26, 0x17	; 23
     91c:	2c 91       	ld	r18, X
     91e:	57 97       	sbiw	r26, 0x17	; 23
     920:	21 83       	std	Z+1, r18	; 0x01
     922:	58 96       	adiw	r26, 0x18	; 24
     924:	2c 91       	ld	r18, X
     926:	58 97       	sbiw	r26, 0x18	; 24
     928:	22 83       	std	Z+2, r18	; 0x02
     92a:	59 96       	adiw	r26, 0x19	; 25
     92c:	2c 91       	ld	r18, X
     92e:	59 97       	sbiw	r26, 0x19	; 25
     930:	23 83       	std	Z+3, r18	; 0x03
     932:	24 96       	adiw	r28, 0x04	; 4
     934:	56 96       	adiw	r26, 0x16	; 22
     936:	0d 91       	ld	r16, X+
     938:	1d 91       	ld	r17, X+
     93a:	2d 91       	ld	r18, X+
     93c:	3c 91       	ld	r19, X
     93e:	59 97       	sbiw	r26, 0x19	; 25
     940:	01 2b       	or	r16, r17
     942:	02 2b       	or	r16, r18
     944:	03 2b       	or	r16, r19
     946:	09 f4       	brne	.+2      	; 0x94a <__stack+0xeb>
     948:	55 c0       	rjmp	.+170    	; 0x9f4 <__stack+0x195>
     94a:	5b 01       	movw	r10, r22
     94c:	8c 01       	movw	r16, r24
     94e:	c1 2c       	mov	r12, r1
     950:	d1 2c       	mov	r13, r1
     952:	41 2c       	mov	r4, r1
     954:	51 2c       	mov	r5, r1
     956:	32 01       	movw	r6, r4
     958:	d8 01       	movw	r26, r16
     95a:	5c 96       	adiw	r26, 0x1c	; 28
     95c:	ed 91       	ld	r30, X+
     95e:	fc 91       	ld	r31, X
     960:	5d 97       	sbiw	r26, 0x1d	; 29
     962:	ec 0d       	add	r30, r12
     964:	fd 1d       	adc	r31, r13
     966:	a0 81       	ld	r26, Z
     968:	b1 81       	ldd	r27, Z+1	; 0x01
     96a:	fd 01       	movw	r30, r26
     96c:	01 90       	ld	r0, Z+
     96e:	00 20       	and	r0, r0
     970:	e9 f7       	brne	.-6      	; 0x96c <__stack+0x10d>
     972:	31 97       	sbiw	r30, 0x01	; 1
     974:	7f 01       	movw	r14, r30
     976:	ea 1a       	sub	r14, r26
     978:	fb 0a       	sbc	r15, r27
     97a:	a7 01       	movw	r20, r14
     97c:	60 e0       	ldi	r22, 0x00	; 0
     97e:	70 e0       	ldi	r23, 0x00	; 0
     980:	f5 01       	movw	r30, r10
     982:	ec 0f       	add	r30, r28
     984:	fd 1f       	adc	r31, r29
     986:	20 e0       	ldi	r18, 0x00	; 0
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	db 01       	movw	r26, r22
     98c:	ca 01       	movw	r24, r20
     98e:	02 2e       	mov	r0, r18
     990:	04 c0       	rjmp	.+8      	; 0x99a <__stack+0x13b>
     992:	b6 95       	lsr	r27
     994:	a7 95       	ror	r26
     996:	97 95       	ror	r25
     998:	87 95       	ror	r24
     99a:	0a 94       	dec	r0
     99c:	d2 f7       	brpl	.-12     	; 0x992 <__stack+0x133>
     99e:	81 93       	st	Z+, r24
     9a0:	28 5f       	subi	r18, 0xF8	; 248
     9a2:	3f 4f       	sbci	r19, 0xFF	; 255
     9a4:	20 32       	cpi	r18, 0x20	; 32
     9a6:	31 05       	cpc	r19, r1
     9a8:	81 f7       	brne	.-32     	; 0x98a <__stack+0x12b>
     9aa:	24 96       	adiw	r28, 0x04	; 4
     9ac:	d8 01       	movw	r26, r16
     9ae:	5c 96       	adiw	r26, 0x1c	; 28
     9b0:	ed 91       	ld	r30, X+
     9b2:	fc 91       	ld	r31, X
     9b4:	5d 97       	sbiw	r26, 0x1d	; 29
     9b6:	ec 0d       	add	r30, r12
     9b8:	fd 1d       	adc	r31, r13
     9ba:	60 81       	ld	r22, Z
     9bc:	71 81       	ldd	r23, Z+1	; 0x01
     9be:	a7 01       	movw	r20, r14
     9c0:	c5 01       	movw	r24, r10
     9c2:	8c 0f       	add	r24, r28
     9c4:	9d 1f       	adc	r25, r29
     9c6:	0e 94 b6 1c 	call	0x396c	; 0x396c <memcpy>
     9ca:	ce 0d       	add	r28, r14
     9cc:	df 1d       	adc	r29, r15
     9ce:	bf ef       	ldi	r27, 0xFF	; 255
     9d0:	4b 1a       	sub	r4, r27
     9d2:	5b 0a       	sbc	r5, r27
     9d4:	6b 0a       	sbc	r6, r27
     9d6:	7b 0a       	sbc	r7, r27
     9d8:	e2 e0       	ldi	r30, 0x02	; 2
     9da:	ce 0e       	add	r12, r30
     9dc:	d1 1c       	adc	r13, r1
     9de:	f8 01       	movw	r30, r16
     9e0:	86 89       	ldd	r24, Z+22	; 0x16
     9e2:	97 89       	ldd	r25, Z+23	; 0x17
     9e4:	a0 8d       	ldd	r26, Z+24	; 0x18
     9e6:	b1 8d       	ldd	r27, Z+25	; 0x19
     9e8:	48 16       	cp	r4, r24
     9ea:	59 06       	cpc	r5, r25
     9ec:	6a 06       	cpc	r6, r26
     9ee:	7b 06       	cpc	r7, r27
     9f0:	08 f4       	brcc	.+2      	; 0x9f4 <__stack+0x195>
     9f2:	b2 cf       	rjmp	.-156    	; 0x958 <__stack+0xf9>
     9f4:	ce 01       	movw	r24, r28
     9f6:	df 91       	pop	r29
     9f8:	cf 91       	pop	r28
     9fa:	1f 91       	pop	r17
     9fc:	0f 91       	pop	r16
     9fe:	ff 90       	pop	r15
     a00:	ef 90       	pop	r14
     a02:	df 90       	pop	r13
     a04:	cf 90       	pop	r12
     a06:	bf 90       	pop	r11
     a08:	af 90       	pop	r10
     a0a:	7f 90       	pop	r7
     a0c:	6f 90       	pop	r6
     a0e:	5f 90       	pop	r5
     a10:	4f 90       	pop	r4
     a12:	08 95       	ret

00000a14 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:
     a14:	2f 92       	push	r2
     a16:	3f 92       	push	r3
     a18:	4f 92       	push	r4
     a1a:	5f 92       	push	r5
     a1c:	6f 92       	push	r6
     a1e:	7f 92       	push	r7
     a20:	8f 92       	push	r8
     a22:	9f 92       	push	r9
     a24:	af 92       	push	r10
     a26:	bf 92       	push	r11
     a28:	cf 92       	push	r12
     a2a:	df 92       	push	r13
     a2c:	ef 92       	push	r14
     a2e:	ff 92       	push	r15
     a30:	0f 93       	push	r16
     a32:	1f 93       	push	r17
     a34:	cf 93       	push	r28
     a36:	df 93       	push	r29
     a38:	00 d0       	rcall	.+0      	; 0xa3a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26>
     a3a:	00 d0       	rcall	.+0      	; 0xa3c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x28>
     a3c:	00 d0       	rcall	.+0      	; 0xa3e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2a>
     a3e:	cd b7       	in	r28, 0x3d	; 61
     a40:	de b7       	in	r29, 0x3e	; 62
     a42:	9e 83       	std	Y+6, r25	; 0x06
     a44:	8d 83       	std	Y+5, r24	; 0x05
     a46:	8b 01       	movw	r16, r22
     a48:	db 01       	movw	r26, r22
     a4a:	8c 91       	ld	r24, X
     a4c:	11 96       	adiw	r26, 0x01	; 1
     a4e:	9c 91       	ld	r25, X
     a50:	11 97       	sbiw	r26, 0x01	; 1
     a52:	12 96       	adiw	r26, 0x02	; 2
     a54:	cc 90       	ld	r12, X
     a56:	12 97       	sbiw	r26, 0x02	; 2
     a58:	d1 2c       	mov	r13, r1
     a5a:	e1 2c       	mov	r14, r1
     a5c:	f1 2c       	mov	r15, r1
     a5e:	76 01       	movw	r14, r12
     a60:	dd 24       	eor	r13, r13
     a62:	cc 24       	eor	r12, r12
     a64:	d9 2a       	or	r13, r25
     a66:	c8 2a       	or	r12, r24
     a68:	13 96       	adiw	r26, 0x03	; 3
     a6a:	8c 91       	ld	r24, X
     a6c:	f8 2a       	or	r15, r24
     a6e:	ed 81       	ldd	r30, Y+5	; 0x05
     a70:	fe 81       	ldd	r31, Y+6	; 0x06
     a72:	82 81       	ldd	r24, Z+2	; 0x02
     a74:	93 81       	ldd	r25, Z+3	; 0x03
     a76:	a4 81       	ldd	r26, Z+4	; 0x04
     a78:	b5 81       	ldd	r27, Z+5	; 0x05
     a7a:	8c 15       	cp	r24, r12
     a7c:	9d 05       	cpc	r25, r13
     a7e:	ae 05       	cpc	r26, r14
     a80:	bf 05       	cpc	r27, r15
     a82:	78 f4       	brcc	.+30     	; 0xaa2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x8e>
     a84:	b6 01       	movw	r22, r12
     a86:	66 0f       	add	r22, r22
     a88:	77 1f       	adc	r23, r23
     a8a:	66 0f       	add	r22, r22
     a8c:	77 1f       	adc	r23, r23
     a8e:	82 85       	ldd	r24, Z+10	; 0x0a
     a90:	93 85       	ldd	r25, Z+11	; 0x0b
     a92:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <realloc>
     a96:	ad 81       	ldd	r26, Y+5	; 0x05
     a98:	be 81       	ldd	r27, Y+6	; 0x06
     a9a:	1b 96       	adiw	r26, 0x0b	; 11
     a9c:	9c 93       	st	X, r25
     a9e:	8e 93       	st	-X, r24
     aa0:	1a 97       	sbiw	r26, 0x0a	; 10
     aa2:	ed 81       	ldd	r30, Y+5	; 0x05
     aa4:	fe 81       	ldd	r31, Y+6	; 0x06
     aa6:	c2 82       	std	Z+2, r12	; 0x02
     aa8:	d3 82       	std	Z+3, r13	; 0x03
     aaa:	e4 82       	std	Z+4, r14	; 0x04
     aac:	f5 82       	std	Z+5, r15	; 0x05
     aae:	cd 28       	or	r12, r13
     ab0:	ce 28       	or	r12, r14
     ab2:	cf 28       	or	r12, r15
     ab4:	09 f4       	brne	.+2      	; 0xab8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xa4>
     ab6:	56 c0       	rjmp	.+172    	; 0xb64 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x150>
     ab8:	f8 01       	movw	r30, r16
     aba:	40 e0       	ldi	r20, 0x00	; 0
     abc:	50 e0       	ldi	r21, 0x00	; 0
     abe:	ba 01       	movw	r22, r20
     ac0:	68 94       	set
     ac2:	ee 24       	eor	r14, r14
     ac4:	e2 f8       	bld	r14, 2
     ac6:	f1 2c       	mov	r15, r1
     ac8:	2d 81       	ldd	r18, Y+5	; 0x05
     aca:	3e 81       	ldd	r19, Y+6	; 0x06
     acc:	2a 5f       	subi	r18, 0xFA	; 250
     ace:	3f 4f       	sbci	r19, 0xFF	; 255
     ad0:	d5 80       	ldd	r13, Z+5	; 0x05
     ad2:	86 81       	ldd	r24, Z+6	; 0x06
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	a0 e0       	ldi	r26, 0x00	; 0
     ad8:	b0 e0       	ldi	r27, 0x00	; 0
     ada:	dc 01       	movw	r26, r24
     adc:	99 27       	eor	r25, r25
     ade:	88 27       	eor	r24, r24
     ae0:	9d 29       	or	r25, r13
     ae2:	d4 80       	ldd	r13, Z+4	; 0x04
     ae4:	8d 29       	or	r24, r13
     ae6:	d7 80       	ldd	r13, Z+7	; 0x07
     ae8:	4c 01       	movw	r8, r24
     aea:	5d 01       	movw	r10, r26
     aec:	bd 28       	or	r11, r13
     aee:	ad 81       	ldd	r26, Y+5	; 0x05
     af0:	be 81       	ldd	r27, Y+6	; 0x06
     af2:	16 96       	adiw	r26, 0x06	; 6
     af4:	8d 92       	st	X+, r8
     af6:	9d 92       	st	X+, r9
     af8:	ad 92       	st	X+, r10
     afa:	bc 92       	st	X, r11
     afc:	19 97       	sbiw	r26, 0x09	; 9
     afe:	67 01       	movw	r12, r14
     b00:	84 e0       	ldi	r24, 0x04	; 4
     b02:	c8 1a       	sub	r12, r24
     b04:	d1 08       	sbc	r13, r1
     b06:	94 e0       	ldi	r25, 0x04	; 4
     b08:	e9 0e       	add	r14, r25
     b0a:	f1 1c       	adc	r15, r1
     b0c:	ad 81       	ldd	r26, Y+5	; 0x05
     b0e:	be 81       	ldd	r27, Y+6	; 0x06
     b10:	1a 96       	adiw	r26, 0x0a	; 10
     b12:	8d 91       	ld	r24, X+
     b14:	9c 91       	ld	r25, X
     b16:	1b 97       	sbiw	r26, 0x0b	; 11
     b18:	c8 0e       	add	r12, r24
     b1a:	d9 1e       	adc	r13, r25
     b1c:	d9 01       	movw	r26, r18
     b1e:	8d 91       	ld	r24, X+
     b20:	9c 91       	ld	r25, X
     b22:	d6 01       	movw	r26, r12
     b24:	8d 93       	st	X+, r24
     b26:	9c 93       	st	X, r25
     b28:	d9 01       	movw	r26, r18
     b2a:	12 96       	adiw	r26, 0x02	; 2
     b2c:	8d 91       	ld	r24, X+
     b2e:	9c 91       	ld	r25, X
     b30:	13 97       	sbiw	r26, 0x03	; 3
     b32:	d6 01       	movw	r26, r12
     b34:	13 96       	adiw	r26, 0x03	; 3
     b36:	9c 93       	st	X, r25
     b38:	8e 93       	st	-X, r24
     b3a:	12 97       	sbiw	r26, 0x02	; 2
     b3c:	4f 5f       	subi	r20, 0xFF	; 255
     b3e:	5f 4f       	sbci	r21, 0xFF	; 255
     b40:	6f 4f       	sbci	r22, 0xFF	; 255
     b42:	7f 4f       	sbci	r23, 0xFF	; 255
     b44:	34 96       	adiw	r30, 0x04	; 4
     b46:	ad 81       	ldd	r26, Y+5	; 0x05
     b48:	be 81       	ldd	r27, Y+6	; 0x06
     b4a:	12 96       	adiw	r26, 0x02	; 2
     b4c:	8d 90       	ld	r8, X+
     b4e:	9d 90       	ld	r9, X+
     b50:	ad 90       	ld	r10, X+
     b52:	bc 90       	ld	r11, X
     b54:	15 97       	sbiw	r26, 0x05	; 5
     b56:	48 15       	cp	r20, r8
     b58:	59 05       	cpc	r21, r9
     b5a:	6a 05       	cpc	r22, r10
     b5c:	7b 05       	cpc	r23, r11
     b5e:	08 f4       	brcc	.+2      	; 0xb62 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x14e>
     b60:	b7 cf       	rjmp	.-146    	; 0xad0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xbc>
     b62:	04 c0       	rjmp	.+8      	; 0xb6c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x158>
     b64:	68 94       	set
     b66:	ee 24       	eor	r14, r14
     b68:	e2 f8       	bld	r14, 2
     b6a:	f1 2c       	mov	r15, r1
     b6c:	68 01       	movw	r12, r16
     b6e:	ce 0c       	add	r12, r14
     b70:	df 1c       	adc	r13, r15
     b72:	f6 01       	movw	r30, r12
     b74:	80 81       	ld	r24, Z
     b76:	91 81       	ldd	r25, Z+1	; 0x01
     b78:	82 80       	ldd	r8, Z+2	; 0x02
     b7a:	91 2c       	mov	r9, r1
     b7c:	a1 2c       	mov	r10, r1
     b7e:	b1 2c       	mov	r11, r1
     b80:	54 01       	movw	r10, r8
     b82:	99 24       	eor	r9, r9
     b84:	88 24       	eor	r8, r8
     b86:	99 2a       	or	r9, r25
     b88:	88 2a       	or	r8, r24
     b8a:	83 81       	ldd	r24, Z+3	; 0x03
     b8c:	b8 2a       	or	r11, r24
     b8e:	f4 e0       	ldi	r31, 0x04	; 4
     b90:	ef 0e       	add	r14, r31
     b92:	f1 1c       	adc	r15, r1
     b94:	ed 81       	ldd	r30, Y+5	; 0x05
     b96:	fe 81       	ldd	r31, Y+6	; 0x06
     b98:	84 85       	ldd	r24, Z+12	; 0x0c
     b9a:	95 85       	ldd	r25, Z+13	; 0x0d
     b9c:	a6 85       	ldd	r26, Z+14	; 0x0e
     b9e:	b7 85       	ldd	r27, Z+15	; 0x0f
     ba0:	88 15       	cp	r24, r8
     ba2:	99 05       	cpc	r25, r9
     ba4:	aa 05       	cpc	r26, r10
     ba6:	bb 05       	cpc	r27, r11
     ba8:	78 f4       	brcc	.+30     	; 0xbc8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1b4>
     baa:	b4 01       	movw	r22, r8
     bac:	66 0f       	add	r22, r22
     bae:	77 1f       	adc	r23, r23
     bb0:	66 0f       	add	r22, r22
     bb2:	77 1f       	adc	r23, r23
     bb4:	84 89       	ldd	r24, Z+20	; 0x14
     bb6:	95 89       	ldd	r25, Z+21	; 0x15
     bb8:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <realloc>
     bbc:	ad 81       	ldd	r26, Y+5	; 0x05
     bbe:	be 81       	ldd	r27, Y+6	; 0x06
     bc0:	55 96       	adiw	r26, 0x15	; 21
     bc2:	9c 93       	st	X, r25
     bc4:	8e 93       	st	-X, r24
     bc6:	54 97       	sbiw	r26, 0x14	; 20
     bc8:	ed 81       	ldd	r30, Y+5	; 0x05
     bca:	fe 81       	ldd	r31, Y+6	; 0x06
     bcc:	84 86       	std	Z+12, r8	; 0x0c
     bce:	95 86       	std	Z+13, r9	; 0x0d
     bd0:	a6 86       	std	Z+14, r10	; 0x0e
     bd2:	b7 86       	std	Z+15, r11	; 0x0f
     bd4:	89 28       	or	r8, r9
     bd6:	8a 28       	or	r8, r10
     bd8:	8b 28       	or	r8, r11
     bda:	09 f4       	brne	.+2      	; 0xbde <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1ca>
     bdc:	52 c0       	rjmp	.+164    	; 0xc82 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
     bde:	f6 01       	movw	r30, r12
     be0:	20 e0       	ldi	r18, 0x00	; 0
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	81 2c       	mov	r8, r1
     be6:	91 2c       	mov	r9, r1
     be8:	54 01       	movw	r10, r8
     bea:	4d 81       	ldd	r20, Y+5	; 0x05
     bec:	5e 81       	ldd	r21, Y+6	; 0x06
     bee:	40 5f       	subi	r20, 0xF0	; 240
     bf0:	5f 4f       	sbci	r21, 0xFF	; 255
     bf2:	65 81       	ldd	r22, Z+5	; 0x05
     bf4:	86 81       	ldd	r24, Z+6	; 0x06
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	a0 e0       	ldi	r26, 0x00	; 0
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	dc 01       	movw	r26, r24
     bfe:	99 27       	eor	r25, r25
     c00:	88 27       	eor	r24, r24
     c02:	96 2b       	or	r25, r22
     c04:	64 81       	ldd	r22, Z+4	; 0x04
     c06:	86 2b       	or	r24, r22
     c08:	67 81       	ldd	r22, Z+7	; 0x07
     c0a:	2c 01       	movw	r4, r24
     c0c:	3d 01       	movw	r6, r26
     c0e:	76 2a       	or	r7, r22
     c10:	ad 81       	ldd	r26, Y+5	; 0x05
     c12:	be 81       	ldd	r27, Y+6	; 0x06
     c14:	50 96       	adiw	r26, 0x10	; 16
     c16:	4d 92       	st	X+, r4
     c18:	5d 92       	st	X+, r5
     c1a:	6d 92       	st	X+, r6
     c1c:	7c 92       	st	X, r7
     c1e:	53 97       	sbiw	r26, 0x13	; 19
     c20:	b4 e0       	ldi	r27, 0x04	; 4
     c22:	eb 0e       	add	r14, r27
     c24:	f1 1c       	adc	r15, r1
     c26:	ad 81       	ldd	r26, Y+5	; 0x05
     c28:	be 81       	ldd	r27, Y+6	; 0x06
     c2a:	54 96       	adiw	r26, 0x14	; 20
     c2c:	6d 91       	ld	r22, X+
     c2e:	7c 91       	ld	r23, X
     c30:	55 97       	sbiw	r26, 0x15	; 21
     c32:	62 0f       	add	r22, r18
     c34:	73 1f       	adc	r23, r19
     c36:	da 01       	movw	r26, r20
     c38:	8d 91       	ld	r24, X+
     c3a:	9c 91       	ld	r25, X
     c3c:	db 01       	movw	r26, r22
     c3e:	8d 93       	st	X+, r24
     c40:	9c 93       	st	X, r25
     c42:	da 01       	movw	r26, r20
     c44:	12 96       	adiw	r26, 0x02	; 2
     c46:	8d 91       	ld	r24, X+
     c48:	9c 91       	ld	r25, X
     c4a:	13 97       	sbiw	r26, 0x03	; 3
     c4c:	db 01       	movw	r26, r22
     c4e:	13 96       	adiw	r26, 0x03	; 3
     c50:	9c 93       	st	X, r25
     c52:	8e 93       	st	-X, r24
     c54:	12 97       	sbiw	r26, 0x02	; 2
     c56:	bf ef       	ldi	r27, 0xFF	; 255
     c58:	8b 1a       	sub	r8, r27
     c5a:	9b 0a       	sbc	r9, r27
     c5c:	ab 0a       	sbc	r10, r27
     c5e:	bb 0a       	sbc	r11, r27
     c60:	2c 5f       	subi	r18, 0xFC	; 252
     c62:	3f 4f       	sbci	r19, 0xFF	; 255
     c64:	34 96       	adiw	r30, 0x04	; 4
     c66:	ad 81       	ldd	r26, Y+5	; 0x05
     c68:	be 81       	ldd	r27, Y+6	; 0x06
     c6a:	1c 96       	adiw	r26, 0x0c	; 12
     c6c:	4d 90       	ld	r4, X+
     c6e:	5d 90       	ld	r5, X+
     c70:	6d 90       	ld	r6, X+
     c72:	7c 90       	ld	r7, X
     c74:	1f 97       	sbiw	r26, 0x0f	; 15
     c76:	84 14       	cp	r8, r4
     c78:	95 04       	cpc	r9, r5
     c7a:	a6 04       	cpc	r10, r6
     c7c:	b7 04       	cpc	r11, r7
     c7e:	08 f4       	brcc	.+2      	; 0xc82 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
     c80:	b8 cf       	rjmp	.-144    	; 0xbf2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
     c82:	f8 01       	movw	r30, r16
     c84:	ee 0d       	add	r30, r14
     c86:	ff 1d       	adc	r31, r15
     c88:	80 81       	ld	r24, Z
     c8a:	91 81       	ldd	r25, Z+1	; 0x01
     c8c:	82 80       	ldd	r8, Z+2	; 0x02
     c8e:	91 2c       	mov	r9, r1
     c90:	a1 2c       	mov	r10, r1
     c92:	b1 2c       	mov	r11, r1
     c94:	54 01       	movw	r10, r8
     c96:	99 24       	eor	r9, r9
     c98:	88 24       	eor	r8, r8
     c9a:	99 2a       	or	r9, r25
     c9c:	88 2a       	or	r8, r24
     c9e:	83 81       	ldd	r24, Z+3	; 0x03
     ca0:	b8 2a       	or	r11, r24
     ca2:	b4 e0       	ldi	r27, 0x04	; 4
     ca4:	eb 0e       	add	r14, r27
     ca6:	f1 1c       	adc	r15, r1
     ca8:	ed 81       	ldd	r30, Y+5	; 0x05
     caa:	fe 81       	ldd	r31, Y+6	; 0x06
     cac:	86 89       	ldd	r24, Z+22	; 0x16
     cae:	97 89       	ldd	r25, Z+23	; 0x17
     cb0:	a0 8d       	ldd	r26, Z+24	; 0x18
     cb2:	b1 8d       	ldd	r27, Z+25	; 0x19
     cb4:	88 15       	cp	r24, r8
     cb6:	99 05       	cpc	r25, r9
     cb8:	aa 05       	cpc	r26, r10
     cba:	bb 05       	cpc	r27, r11
     cbc:	68 f4       	brcc	.+26     	; 0xcd8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2c4>
     cbe:	b4 01       	movw	r22, r8
     cc0:	66 0f       	add	r22, r22
     cc2:	77 1f       	adc	r23, r23
     cc4:	84 8d       	ldd	r24, Z+28	; 0x1c
     cc6:	95 8d       	ldd	r25, Z+29	; 0x1d
     cc8:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <realloc>
     ccc:	ad 81       	ldd	r26, Y+5	; 0x05
     cce:	be 81       	ldd	r27, Y+6	; 0x06
     cd0:	5d 96       	adiw	r26, 0x1d	; 29
     cd2:	9c 93       	st	X, r25
     cd4:	8e 93       	st	-X, r24
     cd6:	5c 97       	sbiw	r26, 0x1c	; 28
     cd8:	ed 81       	ldd	r30, Y+5	; 0x05
     cda:	fe 81       	ldd	r31, Y+6	; 0x06
     cdc:	86 8a       	std	Z+22, r8	; 0x16
     cde:	97 8a       	std	Z+23, r9	; 0x17
     ce0:	a0 8e       	std	Z+24, r10	; 0x18
     ce2:	b1 8e       	std	Z+25, r11	; 0x19
     ce4:	89 28       	or	r8, r9
     ce6:	8a 28       	or	r8, r10
     ce8:	8b 28       	or	r8, r11
     cea:	09 f4       	brne	.+2      	; 0xcee <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2da>
     cec:	77 c0       	rjmp	.+238    	; 0xddc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x3c8>
     cee:	a0 e0       	ldi	r26, 0x00	; 0
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	81 2c       	mov	r8, r1
     cf4:	91 2c       	mov	r9, r1
     cf6:	54 01       	movw	r10, r8
     cf8:	7a 96       	adiw	r30, 0x1a	; 26
     cfa:	fc 83       	std	Y+4, r31	; 0x04
     cfc:	eb 83       	std	Y+3, r30	; 0x03
     cfe:	fa 82       	std	Y+2, r15	; 0x02
     d00:	e9 82       	std	Y+1, r14	; 0x01
     d02:	f8 01       	movw	r30, r16
     d04:	ee 0d       	add	r30, r14
     d06:	ff 1d       	adc	r31, r15
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	40 e0       	ldi	r20, 0x00	; 0
     d0e:	50 e0       	ldi	r21, 0x00	; 0
     d10:	ba 01       	movw	r22, r20
     d12:	21 91       	ld	r18, Z+
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	08 2e       	mov	r0, r24
     d18:	02 c0       	rjmp	.+4      	; 0xd1e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x30a>
     d1a:	22 0f       	add	r18, r18
     d1c:	33 1f       	adc	r19, r19
     d1e:	0a 94       	dec	r0
     d20:	e2 f7       	brpl	.-8      	; 0xd1a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x306>
     d22:	29 01       	movw	r4, r18
     d24:	33 0f       	add	r19, r19
     d26:	66 08       	sbc	r6, r6
     d28:	77 08       	sbc	r7, r7
     d2a:	44 29       	or	r20, r4
     d2c:	55 29       	or	r21, r5
     d2e:	66 29       	or	r22, r6
     d30:	77 29       	or	r23, r7
     d32:	08 96       	adiw	r24, 0x08	; 8
     d34:	80 32       	cpi	r24, 0x20	; 32
     d36:	91 05       	cpc	r25, r1
     d38:	61 f7       	brne	.-40     	; 0xd12 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2fe>
     d3a:	c7 01       	movw	r24, r14
     d3c:	04 96       	adiw	r24, 0x04	; 4
     d3e:	6c 01       	movw	r12, r24
     d40:	09 2e       	mov	r0, r25
     d42:	00 0c       	add	r0, r0
     d44:	ee 08       	sbc	r14, r14
     d46:	ff 08       	sbc	r15, r15
     d48:	c4 0e       	add	r12, r20
     d4a:	d5 1e       	adc	r13, r21
     d4c:	e6 1e       	adc	r14, r22
     d4e:	f7 1e       	adc	r15, r23
     d50:	1c 01       	movw	r2, r24
     d52:	41 2c       	mov	r4, r1
     d54:	51 2c       	mov	r5, r1
     d56:	2c 14       	cp	r2, r12
     d58:	3d 04       	cpc	r3, r13
     d5a:	4e 04       	cpc	r4, r14
     d5c:	5f 04       	cpc	r5, r15
     d5e:	90 f4       	brcc	.+36     	; 0xd84 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x370>
     d60:	e9 81       	ldd	r30, Y+1	; 0x01
     d62:	fa 81       	ldd	r31, Y+2	; 0x02
     d64:	33 96       	adiw	r30, 0x03	; 3
     d66:	e0 0f       	add	r30, r16
     d68:	f1 1f       	adc	r31, r17
     d6a:	9c 01       	movw	r18, r24
     d6c:	71 80       	ldd	r7, Z+1	; 0x01
     d6e:	71 92       	st	Z+, r7
     d70:	2f 5f       	subi	r18, 0xFF	; 255
     d72:	3f 4f       	sbci	r19, 0xFF	; 255
     d74:	29 01       	movw	r4, r18
     d76:	61 2c       	mov	r6, r1
     d78:	71 2c       	mov	r7, r1
     d7a:	4c 14       	cp	r4, r12
     d7c:	5d 04       	cpc	r5, r13
     d7e:	6e 04       	cpc	r6, r14
     d80:	7f 04       	cpc	r7, r15
     d82:	a0 f3       	brcs	.-24     	; 0xd6c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x358>
     d84:	48 0f       	add	r20, r24
     d86:	59 1f       	adc	r21, r25
     d88:	f8 01       	movw	r30, r16
     d8a:	e4 0f       	add	r30, r20
     d8c:	f5 1f       	adc	r31, r21
     d8e:	31 97       	sbiw	r30, 0x01	; 1
     d90:	10 82       	st	Z, r1
     d92:	01 97       	sbiw	r24, 0x01	; 1
     d94:	80 0f       	add	r24, r16
     d96:	91 1f       	adc	r25, r17
     d98:	ed 81       	ldd	r30, Y+5	; 0x05
     d9a:	fe 81       	ldd	r31, Y+6	; 0x06
     d9c:	93 8f       	std	Z+27, r25	; 0x1b
     d9e:	82 8f       	std	Z+26, r24	; 0x1a
     da0:	7a 01       	movw	r14, r20
     da2:	24 8d       	ldd	r18, Z+28	; 0x1c
     da4:	35 8d       	ldd	r19, Z+29	; 0x1d
     da6:	2a 0f       	add	r18, r26
     da8:	3b 1f       	adc	r19, r27
     daa:	eb 81       	ldd	r30, Y+3	; 0x03
     dac:	fc 81       	ldd	r31, Y+4	; 0x04
     dae:	80 81       	ld	r24, Z
     db0:	91 81       	ldd	r25, Z+1	; 0x01
     db2:	f9 01       	movw	r30, r18
     db4:	91 83       	std	Z+1, r25	; 0x01
     db6:	80 83       	st	Z, r24
     db8:	ff ef       	ldi	r31, 0xFF	; 255
     dba:	8f 1a       	sub	r8, r31
     dbc:	9f 0a       	sbc	r9, r31
     dbe:	af 0a       	sbc	r10, r31
     dc0:	bf 0a       	sbc	r11, r31
     dc2:	12 96       	adiw	r26, 0x02	; 2
     dc4:	ed 81       	ldd	r30, Y+5	; 0x05
     dc6:	fe 81       	ldd	r31, Y+6	; 0x06
     dc8:	46 89       	ldd	r20, Z+22	; 0x16
     dca:	57 89       	ldd	r21, Z+23	; 0x17
     dcc:	60 8d       	ldd	r22, Z+24	; 0x18
     dce:	71 8d       	ldd	r23, Z+25	; 0x19
     dd0:	84 16       	cp	r8, r20
     dd2:	95 06       	cpc	r9, r21
     dd4:	a6 06       	cpc	r10, r22
     dd6:	b7 06       	cpc	r11, r23
     dd8:	08 f4       	brcc	.+2      	; 0xddc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x3c8>
     dda:	91 cf       	rjmp	.-222    	; 0xcfe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ea>
     ddc:	c7 01       	movw	r24, r14
     dde:	26 96       	adiw	r28, 0x06	; 6
     de0:	0f b6       	in	r0, 0x3f	; 63
     de2:	f8 94       	cli
     de4:	de bf       	out	0x3e, r29	; 62
     de6:	0f be       	out	0x3f, r0	; 63
     de8:	cd bf       	out	0x3d, r28	; 61
     dea:	df 91       	pop	r29
     dec:	cf 91       	pop	r28
     dee:	1f 91       	pop	r17
     df0:	0f 91       	pop	r16
     df2:	ff 90       	pop	r15
     df4:	ef 90       	pop	r14
     df6:	df 90       	pop	r13
     df8:	cf 90       	pop	r12
     dfa:	bf 90       	pop	r11
     dfc:	af 90       	pop	r10
     dfe:	9f 90       	pop	r9
     e00:	8f 90       	pop	r8
     e02:	7f 90       	pop	r7
     e04:	6f 90       	pop	r6
     e06:	5f 90       	pop	r5
     e08:	4f 90       	pop	r4
     e0a:	3f 90       	pop	r3
     e0c:	2f 90       	pop	r2
     e0e:	08 95       	ret

00000e10 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:
     e10:	cf 92       	push	r12
     e12:	df 92       	push	r13
     e14:	ef 92       	push	r14
     e16:	ff 92       	push	r15
     e18:	0f 93       	push	r16
     e1a:	1f 93       	push	r17
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	00 d0       	rcall	.+0      	; 0xe22 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x12>
     e22:	00 d0       	rcall	.+0      	; 0xe24 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14>
     e24:	1f 92       	push	r1
     e26:	cd b7       	in	r28, 0x3d	; 61
     e28:	de b7       	in	r29, 0x3e	; 62
     e2a:	64 36       	cpi	r22, 0x64	; 100
     e2c:	71 05       	cpc	r23, r1
     e2e:	3c f0       	brlt	.+14     	; 0xe3e <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2e>
     e30:	fc 01       	movw	r30, r24
     e32:	ef 57       	subi	r30, 0x7F	; 127
     e34:	fb 4f       	sbci	r31, 0xFB	; 251
     e36:	20 81       	ld	r18, Z
     e38:	22 23       	and	r18, r18
     e3a:	09 f4       	brne	.+2      	; 0xe3e <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2e>
     e3c:	7e c0       	rjmp	.+252    	; 0xf3a <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x12a>
     e3e:	da 01       	movw	r26, r20
     e40:	7b 01       	movw	r14, r22
     e42:	8c 01       	movw	r16, r24
     e44:	bc 01       	movw	r22, r24
     e46:	66 5e       	subi	r22, 0xE6	; 230
     e48:	7d 4f       	sbci	r23, 0xFD	; 253
     e4a:	ed 91       	ld	r30, X+
     e4c:	fc 91       	ld	r31, X
     e4e:	01 90       	ld	r0, Z+
     e50:	f0 81       	ld	r31, Z
     e52:	e0 2d       	mov	r30, r0
     e54:	ca 01       	movw	r24, r20
     e56:	09 95       	icall
     e58:	dc 01       	movw	r26, r24
     e5a:	f8 01       	movw	r30, r16
     e5c:	ed 5e       	subi	r30, 0xED	; 237
     e5e:	fd 4f       	sbci	r31, 0xFD	; 253
     e60:	8f ef       	ldi	r24, 0xFF	; 255
     e62:	80 83       	st	Z, r24
     e64:	31 96       	adiw	r30, 0x01	; 1
     e66:	8e ef       	ldi	r24, 0xFE	; 254
     e68:	80 83       	st	Z, r24
     e6a:	31 96       	adiw	r30, 0x01	; 1
     e6c:	a0 83       	st	Z, r26
     e6e:	31 96       	adiw	r30, 0x01	; 1
     e70:	b0 83       	st	Z, r27
     e72:	31 96       	adiw	r30, 0x01	; 1
     e74:	8b 2f       	mov	r24, r27
     e76:	8a 0f       	add	r24, r26
     e78:	80 95       	com	r24
     e7a:	80 83       	st	Z, r24
     e7c:	31 96       	adiw	r30, 0x01	; 1
     e7e:	e0 82       	st	Z, r14
     e80:	31 96       	adiw	r30, 0x01	; 1
     e82:	f0 82       	st	Z, r15
     e84:	bd 01       	movw	r22, r26
     e86:	69 5f       	subi	r22, 0xF9	; 249
     e88:	7f 4f       	sbci	r23, 0xFF	; 255
     e8a:	66 30       	cpi	r22, 0x06	; 6
     e8c:	71 05       	cpc	r23, r1
     e8e:	7c f0       	brlt	.+30     	; 0xeae <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
     e90:	31 97       	sbiw	r30, 0x01	; 1
     e92:	ad 01       	movw	r20, r26
     e94:	46 5e       	subi	r20, 0xE6	; 230
     e96:	5d 4f       	sbci	r21, 0xFD	; 253
     e98:	40 0f       	add	r20, r16
     e9a:	51 1f       	adc	r21, r17
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	91 91       	ld	r25, Z+
     ea2:	29 0f       	add	r18, r25
     ea4:	31 1d       	adc	r19, r1
     ea6:	e4 17       	cp	r30, r20
     ea8:	f5 07       	cpc	r31, r21
     eaa:	d1 f7       	brne	.-12     	; 0xea0 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x90>
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	7d 01       	movw	r14, r26
     eb4:	88 e0       	ldi	r24, 0x08	; 8
     eb6:	e8 0e       	add	r14, r24
     eb8:	f1 1c       	adc	r15, r1
     eba:	60 0f       	add	r22, r16
     ebc:	71 1f       	adc	r23, r17
     ebe:	fb 01       	movw	r30, r22
     ec0:	ed 5e       	subi	r30, 0xED	; 237
     ec2:	fd 4f       	sbci	r31, 0xFD	; 253
     ec4:	30 78       	andi	r19, 0x80	; 128
     ec6:	33 23       	and	r19, r19
     ec8:	2c f4       	brge	.+10     	; 0xed4 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
     eca:	21 50       	subi	r18, 0x01	; 1
     ecc:	31 09       	sbc	r19, r1
     ece:	3f 6f       	ori	r19, 0xFF	; 255
     ed0:	2f 5f       	subi	r18, 0xFF	; 255
     ed2:	3f 4f       	sbci	r19, 0xFF	; 255
     ed4:	20 95       	com	r18
     ed6:	20 83       	st	Z, r18
     ed8:	e1 e0       	ldi	r30, 0x01	; 1
     eda:	ee 16       	cp	r14, r30
     edc:	e2 e0       	ldi	r30, 0x02	; 2
     ede:	fe 06       	cpc	r15, r30
     ee0:	94 f4       	brge	.+36     	; 0xf06 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xf6>
     ee2:	0d 5e       	subi	r16, 0xED	; 237
     ee4:	1d 4f       	sbci	r17, 0xFD	; 253
     ee6:	1e 14       	cp	r1, r14
     ee8:	1f 04       	cpc	r1, r15
     eea:	54 f5       	brge	.+84     	; 0xf40 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x130>
     eec:	68 01       	movw	r12, r16
     eee:	18 96       	adiw	r26, 0x08	; 8
     ef0:	0a 0f       	add	r16, r26
     ef2:	1b 1f       	adc	r17, r27
     ef4:	d6 01       	movw	r26, r12
     ef6:	8d 91       	ld	r24, X+
     ef8:	6d 01       	movw	r12, r26
     efa:	0e 94 39 17 	call	0x2e72	; 0x2e72 <avr_uart_send_byte>
     efe:	c0 16       	cp	r12, r16
     f00:	d1 06       	cpc	r13, r17
     f02:	c1 f7       	brne	.-16     	; 0xef4 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xe4>
     f04:	20 c0       	rjmp	.+64     	; 0xf46 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x136>
     f06:	84 ec       	ldi	r24, 0xC4	; 196
     f08:	91 e0       	ldi	r25, 0x01	; 1
     f0a:	9a 83       	std	Y+2, r25	; 0x02
     f0c:	89 83       	std	Y+1, r24	; 0x01
     f0e:	83 e0       	ldi	r24, 0x03	; 3
     f10:	8b 83       	std	Y+3, r24	; 0x03
     f12:	84 e5       	ldi	r24, 0x54	; 84
     f14:	91 e0       	ldi	r25, 0x01	; 1
     f16:	9d 83       	std	Y+5, r25	; 0x05
     f18:	8c 83       	std	Y+4, r24	; 0x04
     f1a:	d8 01       	movw	r26, r16
     f1c:	ed 91       	ld	r30, X+
     f1e:	fc 91       	ld	r31, X
     f20:	01 90       	ld	r0, Z+
     f22:	f0 81       	ld	r31, Z
     f24:	e0 2d       	mov	r30, r0
     f26:	ae 01       	movw	r20, r28
     f28:	4f 5f       	subi	r20, 0xFF	; 255
     f2a:	5f 4f       	sbci	r21, 0xFF	; 255
     f2c:	67 e0       	ldi	r22, 0x07	; 7
     f2e:	70 e0       	ldi	r23, 0x00	; 0
     f30:	c8 01       	movw	r24, r16
     f32:	09 95       	icall
     f34:	8f ef       	ldi	r24, 0xFF	; 255
     f36:	9f ef       	ldi	r25, 0xFF	; 255
     f38:	08 c0       	rjmp	.+16     	; 0xf4a <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x13a>
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	05 c0       	rjmp	.+10     	; 0xf4a <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x13a>
     f40:	8e 2d       	mov	r24, r14
     f42:	9f 2d       	mov	r25, r15
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x13a>
     f46:	8e 2d       	mov	r24, r14
     f48:	9f 2d       	mov	r25, r15
     f4a:	0f 90       	pop	r0
     f4c:	0f 90       	pop	r0
     f4e:	0f 90       	pop	r0
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	1f 91       	pop	r17
     f5a:	0f 91       	pop	r16
     f5c:	ff 90       	pop	r15
     f5e:	ef 90       	pop	r14
     f60:	df 90       	pop	r13
     f62:	cf 90       	pop	r12
     f64:	08 95       	ret

00000f66 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
     f66:	2f 92       	push	r2
     f68:	3f 92       	push	r3
     f6a:	4f 92       	push	r4
     f6c:	5f 92       	push	r5
     f6e:	6f 92       	push	r6
     f70:	7f 92       	push	r7
     f72:	8f 92       	push	r8
     f74:	9f 92       	push	r9
     f76:	af 92       	push	r10
     f78:	bf 92       	push	r11
     f7a:	cf 92       	push	r12
     f7c:	df 92       	push	r13
     f7e:	ef 92       	push	r14
     f80:	ff 92       	push	r15
     f82:	0f 93       	push	r16
     f84:	1f 93       	push	r17
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	e2 97       	sbiw	r28, 0x32	; 50
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	f8 94       	cli
     f94:	de bf       	out	0x3e, r29	; 62
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	cd bf       	out	0x3d, r28	; 61
     f9a:	1c 01       	movw	r2, r24
     f9c:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <avr_time_now>
     fa0:	2b 01       	movw	r4, r22
     fa2:	3c 01       	movw	r6, r24
     fa4:	f1 01       	movw	r30, r2
     fa6:	ea 57       	subi	r30, 0x7A	; 122
     fa8:	fb 4f       	sbci	r31, 0xFB	; 251
     faa:	80 81       	ld	r24, Z
     fac:	91 81       	ldd	r25, Z+1	; 0x01
     fae:	a2 81       	ldd	r26, Z+2	; 0x02
     fb0:	b3 81       	ldd	r27, Z+3	; 0x03
     fb2:	53 01       	movw	r10, r6
     fb4:	42 01       	movw	r8, r4
     fb6:	88 1a       	sub	r8, r24
     fb8:	99 0a       	sbc	r9, r25
     fba:	aa 0a       	sbc	r10, r26
     fbc:	bb 0a       	sbc	r11, r27
     fbe:	09 ef       	ldi	r16, 0xF9	; 249
     fc0:	80 16       	cp	r8, r16
     fc2:	0a e2       	ldi	r16, 0x2A	; 42
     fc4:	90 06       	cpc	r9, r16
     fc6:	a1 04       	cpc	r10, r1
     fc8:	b1 04       	cpc	r11, r1
     fca:	10 f0       	brcs	.+4      	; 0xfd0 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x6a>
     fcc:	35 97       	sbiw	r30, 0x05	; 5
     fce:	10 82       	st	Z, r1
     fd0:	f1 01       	movw	r30, r2
     fd2:	e9 58       	subi	r30, 0x89	; 137
     fd4:	fb 4f       	sbci	r31, 0xFB	; 251
     fd6:	80 81       	ld	r24, Z
     fd8:	91 81       	ldd	r25, Z+1	; 0x01
     fda:	89 2b       	or	r24, r25
     fdc:	69 f0       	breq	.+26     	; 0xff8 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x92>
     fde:	73 96       	adiw	r30, 0x13	; 19
     fe0:	80 81       	ld	r24, Z
     fe2:	91 81       	ldd	r25, Z+1	; 0x01
     fe4:	a2 81       	ldd	r26, Z+2	; 0x02
     fe6:	b3 81       	ldd	r27, Z+3	; 0x03
     fe8:	84 15       	cp	r24, r4
     fea:	95 05       	cpc	r25, r5
     fec:	a6 05       	cpc	r26, r6
     fee:	b7 05       	cpc	r27, r7
     ff0:	18 f4       	brcc	.+6      	; 0xff8 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x92>
     ff2:	73 97       	sbiw	r30, 0x13	; 19
     ff4:	11 82       	std	Z+1, r1	; 0x01
     ff6:	10 82       	st	Z, r1
     ff8:	61 01       	movw	r12, r2
     ffa:	11 e8       	ldi	r17, 0x81	; 129
     ffc:	c1 1a       	sub	r12, r17
     ffe:	1b ef       	ldi	r17, 0xFB	; 251
    1000:	d1 0a       	sbc	r13, r17
    1002:	71 01       	movw	r14, r2
    1004:	29 e8       	ldi	r18, 0x89	; 137
    1006:	e2 1a       	sub	r14, r18
    1008:	2b ef       	ldi	r18, 0xFB	; 251
    100a:	f2 0a       	sbc	r15, r18
    100c:	81 01       	movw	r16, r2
    100e:	05 58       	subi	r16, 0x85	; 133
    1010:	1b 4f       	sbci	r17, 0xFB	; 251
    1012:	1c 8b       	std	Y+20, r17	; 0x14
    1014:	0b 8b       	std	Y+19, r16	; 0x13
    1016:	0a 5f       	subi	r16, 0xFA	; 250
    1018:	1f 4f       	sbci	r17, 0xFF	; 255
    101a:	1a 8b       	std	Y+18, r17	; 0x12
    101c:	09 8b       	std	Y+17, r16	; 0x11
    101e:	02 5f       	subi	r16, 0xF2	; 242
    1020:	1f 4f       	sbci	r17, 0xFF	; 255
    1022:	18 8b       	std	Y+16, r17	; 0x10
    1024:	0f 87       	std	Y+15, r16	; 0x0f
    1026:	01 50       	subi	r16, 0x01	; 1
    1028:	11 09       	sbc	r17, r1
    102a:	18 a3       	std	Y+32, r17	; 0x20
    102c:	0f 8f       	std	Y+31, r16	; 0x1f
    102e:	0f 85       	ldd	r16, Y+15	; 0x0f
    1030:	18 89       	ldd	r17, Y+16	; 0x10
    1032:	06 5e       	subi	r16, 0xE6	; 230
    1034:	1f 4f       	sbci	r17, 0xFF	; 255
    1036:	1e 8f       	std	Y+30, r17	; 0x1e
    1038:	0d 8f       	std	Y+29, r16	; 0x1d
    103a:	0f 85       	ldd	r16, Y+15	; 0x0f
    103c:	18 89       	ldd	r17, Y+16	; 0x10
    103e:	00 5f       	subi	r16, 0xF0	; 240
    1040:	1f 4f       	sbci	r17, 0xFF	; 255
    1042:	1a 8f       	std	Y+26, r17	; 0x1a
    1044:	09 8f       	std	Y+25, r16	; 0x19
    1046:	0f 85       	ldd	r16, Y+15	; 0x0f
    1048:	18 89       	ldd	r17, Y+16	; 0x10
    104a:	0a 5f       	subi	r16, 0xFA	; 250
    104c:	1f 4f       	sbci	r17, 0xFF	; 255
    104e:	1c 8f       	std	Y+28, r17	; 0x1c
    1050:	0b 8f       	std	Y+27, r16	; 0x1b
    1052:	53 01       	movw	r10, r6
    1054:	42 01       	movw	r8, r4
    1056:	14 e1       	ldi	r17, 0x14	; 20
    1058:	81 0e       	add	r8, r17
    105a:	91 1c       	adc	r9, r1
    105c:	a1 1c       	adc	r10, r1
    105e:	b1 1c       	adc	r11, r1
    1060:	f1 01       	movw	r30, r2
    1062:	87 85       	ldd	r24, Z+15	; 0x0f
    1064:	90 89       	ldd	r25, Z+16	; 0x10
    1066:	a1 89       	ldd	r26, Z+17	; 0x11
    1068:	b2 89       	ldd	r27, Z+18	; 0x12
    106a:	89 2b       	or	r24, r25
    106c:	8a 2b       	or	r24, r26
    106e:	8b 2b       	or	r24, r27
    1070:	99 f0       	breq	.+38     	; 0x1098 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x132>
    1072:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <avr_time_now>
    1076:	dc 01       	movw	r26, r24
    1078:	cb 01       	movw	r24, r22
    107a:	84 19       	sub	r24, r4
    107c:	95 09       	sbc	r25, r5
    107e:	a6 09       	sbc	r26, r6
    1080:	b7 09       	sbc	r27, r7
    1082:	f1 01       	movw	r30, r2
    1084:	07 85       	ldd	r16, Z+15	; 0x0f
    1086:	10 89       	ldd	r17, Z+16	; 0x10
    1088:	21 89       	ldd	r18, Z+17	; 0x11
    108a:	32 89       	ldd	r19, Z+18	; 0x12
    108c:	08 17       	cp	r16, r24
    108e:	19 07       	cpc	r17, r25
    1090:	2a 07       	cpc	r18, r26
    1092:	3b 07       	cpc	r19, r27
    1094:	08 f4       	brcc	.+2      	; 0x1098 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x132>
    1096:	5d c5       	rjmp	.+2746   	; 0x1b52 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xbec>
    1098:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <avr_uart_receive_byte>
    109c:	99 23       	and	r25, r25
    109e:	0c f4       	brge	.+2      	; 0x10a2 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x13c>
    10a0:	17 c5       	rjmp	.+2606   	; 0x1ad0 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xb6a>
    10a2:	d6 01       	movw	r26, r12
    10a4:	2d 91       	ld	r18, X+
    10a6:	3c 91       	ld	r19, X
    10a8:	11 97       	sbiw	r26, 0x01	; 1
    10aa:	28 0f       	add	r18, r24
    10ac:	39 1f       	adc	r19, r25
    10ae:	2d 93       	st	X+, r18
    10b0:	3c 93       	st	X, r19
    10b2:	f7 01       	movw	r30, r14
    10b4:	40 81       	ld	r20, Z
    10b6:	51 81       	ldd	r21, Z+1	; 0x01
    10b8:	47 30       	cpi	r20, 0x07	; 7
    10ba:	51 05       	cpc	r21, r1
    10bc:	f9 f4       	brne	.+62     	; 0x10fc <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x196>
    10be:	f1 01       	movw	r30, r2
    10c0:	e3 58       	subi	r30, 0x83	; 131
    10c2:	fb 4f       	sbci	r31, 0xFB	; 251
    10c4:	20 81       	ld	r18, Z
    10c6:	31 81       	ldd	r19, Z+1	; 0x01
    10c8:	a9 01       	movw	r20, r18
    10ca:	4f 5f       	subi	r20, 0xFF	; 255
    10cc:	5f 4f       	sbci	r21, 0xFF	; 255
    10ce:	51 83       	std	Z+1, r21	; 0x01
    10d0:	40 83       	st	Z, r20
    10d2:	f1 01       	movw	r30, r2
    10d4:	e2 0f       	add	r30, r18
    10d6:	f3 1f       	adc	r31, r19
    10d8:	83 8b       	std	Z+19, r24	; 0x13
    10da:	f1 01       	movw	r30, r2
    10dc:	e7 58       	subi	r30, 0x87	; 135
    10de:	fb 4f       	sbci	r31, 0xFB	; 251
    10e0:	80 81       	ld	r24, Z
    10e2:	91 81       	ldd	r25, Z+1	; 0x01
    10e4:	01 97       	sbiw	r24, 0x01	; 1
    10e6:	91 83       	std	Z+1, r25	; 0x01
    10e8:	80 83       	st	Z, r24
    10ea:	89 2b       	or	r24, r25
    10ec:	09 f0       	breq	.+2      	; 0x10f0 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x18a>
    10ee:	b8 cf       	rjmp	.-144    	; 0x1060 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfa>
    10f0:	88 e0       	ldi	r24, 0x08	; 8
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	d7 01       	movw	r26, r14
    10f6:	8d 93       	st	X+, r24
    10f8:	9c 93       	st	X, r25
    10fa:	b2 cf       	rjmp	.-156    	; 0x1060 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfa>
    10fc:	41 15       	cp	r20, r1
    10fe:	51 05       	cpc	r21, r1
    1100:	29 f5       	brne	.+74     	; 0x114c <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e6>
    1102:	8f 3f       	cpi	r24, 0xFF	; 255
    1104:	91 05       	cpc	r25, r1
    1106:	69 f4       	brne	.+26     	; 0x1122 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1bc>
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	f7 01       	movw	r30, r14
    110e:	91 83       	std	Z+1, r25	; 0x01
    1110:	80 83       	st	Z, r24
    1112:	f1 01       	movw	r30, r2
    1114:	e6 57       	subi	r30, 0x76	; 118
    1116:	fb 4f       	sbci	r31, 0xFB	; 251
    1118:	80 82       	st	Z, r8
    111a:	91 82       	std	Z+1, r9	; 0x01
    111c:	a2 82       	std	Z+2, r10	; 0x02
    111e:	b3 82       	std	Z+3, r11	; 0x03
    1120:	9f cf       	rjmp	.-194    	; 0x1060 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfa>
    1122:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <avr_time_now>
    1126:	dc 01       	movw	r26, r24
    1128:	cb 01       	movw	r24, r22
    112a:	84 19       	sub	r24, r4
    112c:	95 09       	sbc	r25, r5
    112e:	a6 09       	sbc	r26, r6
    1130:	b7 09       	sbc	r27, r7
    1132:	89 38       	cpi	r24, 0x89	; 137
    1134:	93 41       	sbci	r25, 0x13	; 19
    1136:	a1 05       	cpc	r26, r1
    1138:	b1 05       	cpc	r27, r1
    113a:	08 f4       	brcc	.+2      	; 0x113e <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1d8>
    113c:	91 cf       	rjmp	.-222    	; 0x1060 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfa>
    113e:	f1 01       	movw	r30, r2
    1140:	ef 57       	subi	r30, 0x7F	; 127
    1142:	fb 4f       	sbci	r31, 0xFB	; 251
    1144:	10 82       	st	Z, r1
    1146:	8e ef       	ldi	r24, 0xFE	; 254
    1148:	9f ef       	ldi	r25, 0xFF	; 255
    114a:	0b c5       	rjmp	.+2582   	; 0x1b62 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xbfc>
    114c:	41 30       	cpi	r20, 0x01	; 1
    114e:	51 05       	cpc	r21, r1
    1150:	89 f5       	brne	.+98     	; 0x11b4 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x24e>
    1152:	8e 3f       	cpi	r24, 0xFE	; 254
    1154:	91 05       	cpc	r25, r1
    1156:	29 f4       	brne	.+10     	; 0x1162 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1fc>
    1158:	82 e0       	ldi	r24, 0x02	; 2
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	91 83       	std	Z+1, r25	; 0x01
    115e:	80 83       	st	Z, r24
    1160:	7f cf       	rjmp	.-258    	; 0x1060 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfa>
    1162:	f7 01       	movw	r30, r14
    1164:	11 82       	std	Z+1, r1	; 0x01
    1166:	10 82       	st	Z, r1
    1168:	a9 89       	ldd	r26, Y+17	; 0x11
    116a:	ba 89       	ldd	r27, Y+18	; 0x12
    116c:	8c 91       	ld	r24, X
    116e:	81 11       	cpse	r24, r1
    1170:	77 cf       	rjmp	.-274    	; 0x1060 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfa>
    1172:	8c ea       	ldi	r24, 0xAC	; 172
    1174:	91 e0       	ldi	r25, 0x01	; 1
    1176:	9a 83       	std	Y+2, r25	; 0x02
    1178:	89 83       	std	Y+1, r24	; 0x01
    117a:	1b 82       	std	Y+3, r1	; 0x03
    117c:	1c 82       	std	Y+4, r1	; 0x04
    117e:	1d 82       	std	Y+5, r1	; 0x05
    1180:	1e 82       	std	Y+6, r1	; 0x06
    1182:	1f 82       	std	Y+7, r1	; 0x07
    1184:	18 86       	std	Y+8, r1	; 0x08
    1186:	19 86       	std	Y+9, r1	; 0x09
    1188:	1a 86       	std	Y+10, r1	; 0x0a
    118a:	d1 01       	movw	r26, r2
    118c:	ed 91       	ld	r30, X+
    118e:	fc 91       	ld	r31, X
    1190:	01 90       	ld	r0, Z+
    1192:	f0 81       	ld	r31, Z
    1194:	e0 2d       	mov	r30, r0
    1196:	ae 01       	movw	r20, r28
    1198:	4f 5f       	subi	r20, 0xFF	; 255
    119a:	5f 4f       	sbci	r21, 0xFF	; 255
    119c:	6a e0       	ldi	r22, 0x0A	; 10
    119e:	70 e0       	ldi	r23, 0x00	; 0
    11a0:	c1 01       	movw	r24, r2
    11a2:	09 95       	icall
    11a4:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <avr_time_now>
    11a8:	f1 01       	movw	r30, r2
    11aa:	63 83       	std	Z+3, r22	; 0x03
    11ac:	74 83       	std	Z+4, r23	; 0x04
    11ae:	85 83       	std	Z+5, r24	; 0x05
    11b0:	96 83       	std	Z+6, r25	; 0x06
    11b2:	56 cf       	rjmp	.-340    	; 0x1060 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfa>
    11b4:	42 30       	cpi	r20, 0x02	; 2
    11b6:	51 05       	cpc	r21, r1
    11b8:	89 f4       	brne	.+34     	; 0x11dc <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x276>
    11ba:	f1 01       	movw	r30, r2
    11bc:	e7 58       	subi	r30, 0x87	; 135
    11be:	fb 4f       	sbci	r31, 0xFB	; 251
    11c0:	91 83       	std	Z+1, r25	; 0x01
    11c2:	80 83       	st	Z, r24
    11c4:	34 96       	adiw	r30, 0x04	; 4
    11c6:	11 82       	std	Z+1, r1	; 0x01
    11c8:	10 82       	st	Z, r1
    11ca:	23 e0       	ldi	r18, 0x03	; 3
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	d7 01       	movw	r26, r14
    11d0:	2d 93       	st	X+, r18
    11d2:	3c 93       	st	X, r19
    11d4:	f6 01       	movw	r30, r12
    11d6:	91 83       	std	Z+1, r25	; 0x01
    11d8:	80 83       	st	Z, r24
    11da:	42 cf       	rjmp	.-380    	; 0x1060 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfa>
    11dc:	43 30       	cpi	r20, 0x03	; 3
    11de:	51 05       	cpc	r21, r1
    11e0:	89 f4       	brne	.+34     	; 0x1204 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x29e>
    11e2:	f1 01       	movw	r30, r2
    11e4:	e7 58       	subi	r30, 0x87	; 135
    11e6:	fb 4f       	sbci	r31, 0xFB	; 251
    11e8:	98 2f       	mov	r25, r24
    11ea:	88 27       	eor	r24, r24
    11ec:	20 81       	ld	r18, Z
    11ee:	31 81       	ldd	r19, Z+1	; 0x01
    11f0:	82 0f       	add	r24, r18
    11f2:	93 1f       	adc	r25, r19
    11f4:	91 83       	std	Z+1, r25	; 0x01
    11f6:	80 83       	st	Z, r24
    11f8:	84 e0       	ldi	r24, 0x04	; 4
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	d7 01       	movw	r26, r14
    11fe:	8d 93       	st	X+, r24
    1200:	9c 93       	st	X, r25
    1202:	2e cf       	rjmp	.-420    	; 0x1060 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfa>
    1204:	44 30       	cpi	r20, 0x04	; 4
    1206:	51 05       	cpc	r21, r1
    1208:	a9 f4       	brne	.+42     	; 0x1234 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ce>
    120a:	30 78       	andi	r19, 0x80	; 128
    120c:	33 23       	and	r19, r19
    120e:	2c f4       	brge	.+10     	; 0x121a <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2b4>
    1210:	21 50       	subi	r18, 0x01	; 1
    1212:	31 09       	sbc	r19, r1
    1214:	3f 6f       	ori	r19, 0xFF	; 255
    1216:	2f 5f       	subi	r18, 0xFF	; 255
    1218:	3f 4f       	sbci	r19, 0xFF	; 255
    121a:	2f 3f       	cpi	r18, 0xFF	; 255
    121c:	31 05       	cpc	r19, r1
    121e:	31 f4       	brne	.+12     	; 0x122c <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c6>
    1220:	85 e0       	ldi	r24, 0x05	; 5
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	f7 01       	movw	r30, r14
    1226:	91 83       	std	Z+1, r25	; 0x01
    1228:	80 83       	st	Z, r24
    122a:	1a cf       	rjmp	.-460    	; 0x1060 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfa>
    122c:	d7 01       	movw	r26, r14
    122e:	1d 92       	st	X+, r1
    1230:	1c 92       	st	X, r1
    1232:	16 cf       	rjmp	.-468    	; 0x1060 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfa>
    1234:	45 30       	cpi	r20, 0x05	; 5
    1236:	51 05       	cpc	r21, r1
    1238:	69 f4       	brne	.+26     	; 0x1254 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
    123a:	eb 89       	ldd	r30, Y+19	; 0x13
    123c:	fc 89       	ldd	r31, Y+20	; 0x14
    123e:	91 83       	std	Z+1, r25	; 0x01
    1240:	80 83       	st	Z, r24
    1242:	26 e0       	ldi	r18, 0x06	; 6
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	d7 01       	movw	r26, r14
    1248:	2d 93       	st	X+, r18
    124a:	3c 93       	st	X, r19
    124c:	f6 01       	movw	r30, r12
    124e:	91 83       	std	Z+1, r25	; 0x01
    1250:	80 83       	st	Z, r24
    1252:	06 cf       	rjmp	.-500    	; 0x1060 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfa>
    1254:	46 30       	cpi	r20, 0x06	; 6
    1256:	51 05       	cpc	r21, r1
    1258:	f1 f4       	brne	.+60     	; 0x1296 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x330>
    125a:	98 2f       	mov	r25, r24
    125c:	88 27       	eor	r24, r24
    125e:	ab 89       	ldd	r26, Y+19	; 0x13
    1260:	bc 89       	ldd	r27, Y+20	; 0x14
    1262:	2d 91       	ld	r18, X+
    1264:	3c 91       	ld	r19, X
    1266:	11 97       	sbiw	r26, 0x01	; 1
    1268:	82 0f       	add	r24, r18
    126a:	93 1f       	adc	r25, r19
    126c:	8d 93       	st	X+, r24
    126e:	9c 93       	st	X, r25
    1270:	87 e0       	ldi	r24, 0x07	; 7
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	f7 01       	movw	r30, r14
    1276:	91 83       	std	Z+1, r25	; 0x01
    1278:	80 83       	st	Z, r24
    127a:	f1 01       	movw	r30, r2
    127c:	e7 58       	subi	r30, 0x87	; 135
    127e:	fb 4f       	sbci	r31, 0xFB	; 251
    1280:	80 81       	ld	r24, Z
    1282:	91 81       	ldd	r25, Z+1	; 0x01
    1284:	89 2b       	or	r24, r25
    1286:	09 f0       	breq	.+2      	; 0x128a <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x324>
    1288:	eb ce       	rjmp	.-554    	; 0x1060 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfa>
    128a:	88 e0       	ldi	r24, 0x08	; 8
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	d7 01       	movw	r26, r14
    1290:	8d 93       	st	X+, r24
    1292:	9c 93       	st	X, r25
    1294:	e5 ce       	rjmp	.-566    	; 0x1060 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfa>
    1296:	48 30       	cpi	r20, 0x08	; 8
    1298:	51 05       	cpc	r21, r1
    129a:	09 f0       	breq	.+2      	; 0x129e <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x338>
    129c:	e1 ce       	rjmp	.-574    	; 0x1060 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfa>
    129e:	f7 01       	movw	r30, r14
    12a0:	11 82       	std	Z+1, r1	; 0x01
    12a2:	10 82       	st	Z, r1
    12a4:	30 78       	andi	r19, 0x80	; 128
    12a6:	33 23       	and	r19, r19
    12a8:	2c f4       	brge	.+10     	; 0x12b4 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x34e>
    12aa:	21 50       	subi	r18, 0x01	; 1
    12ac:	31 09       	sbc	r19, r1
    12ae:	3f 6f       	ori	r19, 0xFF	; 255
    12b0:	2f 5f       	subi	r18, 0xFF	; 255
    12b2:	3f 4f       	sbci	r19, 0xFF	; 255
    12b4:	2f 3f       	cpi	r18, 0xFF	; 255
    12b6:	31 05       	cpc	r19, r1
    12b8:	09 f0       	breq	.+2      	; 0x12bc <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x356>
    12ba:	d2 ce       	rjmp	.-604    	; 0x1060 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfa>
    12bc:	ab 89       	ldd	r26, Y+19	; 0x13
    12be:	bc 89       	ldd	r27, Y+20	; 0x14
    12c0:	8d 91       	ld	r24, X+
    12c2:	9c 91       	ld	r25, X
    12c4:	00 97       	sbiw	r24, 0x00	; 0
    12c6:	09 f0       	breq	.+2      	; 0x12ca <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x364>
    12c8:	e3 c0       	rjmp	.+454    	; 0x1490 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x52a>
    12ca:	8c ea       	ldi	r24, 0xAC	; 172
    12cc:	91 e0       	ldi	r25, 0x01	; 1
    12ce:	9a 83       	std	Y+2, r25	; 0x02
    12d0:	89 83       	std	Y+1, r24	; 0x01
    12d2:	1b 82       	std	Y+3, r1	; 0x03
    12d4:	1c 82       	std	Y+4, r1	; 0x04
    12d6:	1d 82       	std	Y+5, r1	; 0x05
    12d8:	1e 82       	std	Y+6, r1	; 0x06
    12da:	1f 82       	std	Y+7, r1	; 0x07
    12dc:	18 86       	std	Y+8, r1	; 0x08
    12de:	19 86       	std	Y+9, r1	; 0x09
    12e0:	1a 86       	std	Y+10, r1	; 0x0a
    12e2:	d1 01       	movw	r26, r2
    12e4:	ed 91       	ld	r30, X+
    12e6:	fc 91       	ld	r31, X
    12e8:	01 90       	ld	r0, Z+
    12ea:	f0 81       	ld	r31, Z
    12ec:	e0 2d       	mov	r30, r0
    12ee:	ae 01       	movw	r20, r28
    12f0:	4f 5f       	subi	r20, 0xFF	; 255
    12f2:	5f 4f       	sbci	r21, 0xFF	; 255
    12f4:	6a e0       	ldi	r22, 0x0A	; 10
    12f6:	70 e0       	ldi	r23, 0x00	; 0
    12f8:	c1 01       	movw	r24, r2
    12fa:	09 95       	icall
    12fc:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <avr_time_now>
    1300:	f1 01       	movw	r30, r2
    1302:	63 83       	std	Z+3, r22	; 0x03
    1304:	74 83       	std	Z+4, r23	; 0x04
    1306:	85 83       	std	Z+5, r24	; 0x05
    1308:	96 83       	std	Z+6, r25	; 0x06
    130a:	88 eb       	ldi	r24, 0xB8	; 184
    130c:	91 e0       	ldi	r25, 0x01	; 1
    130e:	9a 83       	std	Y+2, r25	; 0x02
    1310:	89 83       	std	Y+1, r24	; 0x01
    1312:	1c 82       	std	Y+4, r1	; 0x04
    1314:	1b 82       	std	Y+3, r1	; 0x03
    1316:	8c e8       	ldi	r24, 0x8C	; 140
    1318:	91 e0       	ldi	r25, 0x01	; 1
    131a:	9e 83       	std	Y+6, r25	; 0x06
    131c:	8d 83       	std	Y+5, r24	; 0x05
    131e:	98 87       	std	Y+8, r25	; 0x08
    1320:	8f 83       	std	Y+7, r24	; 0x07
    1322:	9a 87       	std	Y+10, r25	; 0x0a
    1324:	89 87       	std	Y+9, r24	; 0x09
    1326:	1b 86       	std	Y+11, r1	; 0x0b
    1328:	1c 86       	std	Y+12, r1	; 0x0c
    132a:	1d 86       	std	Y+13, r1	; 0x0d
    132c:	1e 86       	std	Y+14, r1	; 0x0e
    132e:	71 01       	movw	r14, r2
    1330:	fd ee       	ldi	r31, 0xED	; 237
    1332:	ef 1a       	sub	r14, r31
    1334:	fb ef       	ldi	r31, 0xFB	; 251
    1336:	ff 0a       	sbc	r15, r31
    1338:	81 01       	movw	r16, r2
    133a:	0b 5b       	subi	r16, 0xBB	; 187
    133c:	1b 4f       	sbci	r17, 0xFB	; 251
    133e:	81 2c       	mov	r8, r1
    1340:	91 2c       	mov	r9, r1
    1342:	54 01       	movw	r10, r8
    1344:	68 94       	set
    1346:	91 f8       	bld	r9, 1
    1348:	d7 01       	movw	r26, r14
    134a:	ed 91       	ld	r30, X+
    134c:	fc 91       	ld	r31, X
    134e:	30 97       	sbiw	r30, 0x00	; 0
    1350:	a9 f1       	breq	.+106    	; 0x13bc <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x456>
    1352:	84 81       	ldd	r24, Z+4	; 0x04
    1354:	95 81       	ldd	r25, Z+5	; 0x05
    1356:	9c 83       	std	Y+4, r25	; 0x04
    1358:	8b 83       	std	Y+3, r24	; 0x03
    135a:	80 81       	ld	r24, Z
    135c:	91 81       	ldd	r25, Z+1	; 0x01
    135e:	9e 83       	std	Y+6, r25	; 0x06
    1360:	8d 83       	std	Y+5, r24	; 0x05
    1362:	82 81       	ldd	r24, Z+2	; 0x02
    1364:	93 81       	ldd	r25, Z+3	; 0x03
    1366:	dc 01       	movw	r26, r24
    1368:	ed 91       	ld	r30, X+
    136a:	fc 91       	ld	r31, X
    136c:	04 80       	ldd	r0, Z+4	; 0x04
    136e:	f5 81       	ldd	r31, Z+5	; 0x05
    1370:	e0 2d       	mov	r30, r0
    1372:	09 95       	icall
    1374:	98 87       	std	Y+8, r25	; 0x08
    1376:	8f 83       	std	Y+7, r24	; 0x07
    1378:	d7 01       	movw	r26, r14
    137a:	ed 91       	ld	r30, X+
    137c:	fc 91       	ld	r31, X
    137e:	82 81       	ldd	r24, Z+2	; 0x02
    1380:	93 81       	ldd	r25, Z+3	; 0x03
    1382:	dc 01       	movw	r26, r24
    1384:	ed 91       	ld	r30, X+
    1386:	fc 91       	ld	r31, X
    1388:	06 80       	ldd	r0, Z+6	; 0x06
    138a:	f7 81       	ldd	r31, Z+7	; 0x07
    138c:	e0 2d       	mov	r30, r0
    138e:	09 95       	icall
    1390:	9a 87       	std	Y+10, r25	; 0x0a
    1392:	89 87       	std	Y+9, r24	; 0x09
    1394:	8b 86       	std	Y+11, r8	; 0x0b
    1396:	9c 86       	std	Y+12, r9	; 0x0c
    1398:	ad 86       	std	Y+13, r10	; 0x0d
    139a:	be 86       	std	Y+14, r11	; 0x0e
    139c:	d7 01       	movw	r26, r14
    139e:	ed 91       	ld	r30, X+
    13a0:	fc 91       	ld	r31, X
    13a2:	60 85       	ldd	r22, Z+8	; 0x08
    13a4:	71 85       	ldd	r23, Z+9	; 0x09
    13a6:	d1 01       	movw	r26, r2
    13a8:	ed 91       	ld	r30, X+
    13aa:	fc 91       	ld	r31, X
    13ac:	01 90       	ld	r0, Z+
    13ae:	f0 81       	ld	r31, Z
    13b0:	e0 2d       	mov	r30, r0
    13b2:	ae 01       	movw	r20, r28
    13b4:	4f 5f       	subi	r20, 0xFF	; 255
    13b6:	5f 4f       	sbci	r21, 0xFF	; 255
    13b8:	c1 01       	movw	r24, r2
    13ba:	09 95       	icall
    13bc:	b2 e0       	ldi	r27, 0x02	; 2
    13be:	eb 0e       	add	r14, r27
    13c0:	f1 1c       	adc	r15, r1
    13c2:	e0 16       	cp	r14, r16
    13c4:	f1 06       	cpc	r15, r17
    13c6:	09 f0       	breq	.+2      	; 0x13ca <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x464>
    13c8:	bf cf       	rjmp	.-130    	; 0x1348 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3e2>
    13ca:	71 01       	movw	r14, r2
    13cc:	e9 e8       	ldi	r30, 0x89	; 137
    13ce:	ee 1a       	sub	r14, r30
    13d0:	eb ef       	ldi	r30, 0xFB	; 251
    13d2:	fe 0a       	sbc	r15, r30
    13d4:	81 2c       	mov	r8, r1
    13d6:	91 2c       	mov	r9, r1
    13d8:	54 01       	movw	r10, r8
    13da:	68 94       	set
    13dc:	91 f8       	bld	r9, 1
    13de:	f8 01       	movw	r30, r16
    13e0:	a0 81       	ld	r26, Z
    13e2:	b1 81       	ldd	r27, Z+1	; 0x01
    13e4:	10 97       	sbiw	r26, 0x00	; 0
    13e6:	e1 f1       	breq	.+120    	; 0x1460 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4fa>
    13e8:	12 96       	adiw	r26, 0x02	; 2
    13ea:	8d 91       	ld	r24, X+
    13ec:	9c 91       	ld	r25, X
    13ee:	13 97       	sbiw	r26, 0x03	; 3
    13f0:	9c 83       	std	Y+4, r25	; 0x04
    13f2:	8b 83       	std	Y+3, r24	; 0x03
    13f4:	14 96       	adiw	r26, 0x04	; 4
    13f6:	8d 91       	ld	r24, X+
    13f8:	9c 91       	ld	r25, X
    13fa:	15 97       	sbiw	r26, 0x05	; 5
    13fc:	9e 83       	std	Y+6, r25	; 0x06
    13fe:	8d 83       	std	Y+5, r24	; 0x05
    1400:	ed 91       	ld	r30, X+
    1402:	fc 91       	ld	r31, X
    1404:	11 97       	sbiw	r26, 0x01	; 1
    1406:	04 80       	ldd	r0, Z+4	; 0x04
    1408:	f5 81       	ldd	r31, Z+5	; 0x05
    140a:	e0 2d       	mov	r30, r0
    140c:	cd 01       	movw	r24, r26
    140e:	09 95       	icall
    1410:	98 87       	std	Y+8, r25	; 0x08
    1412:	8f 83       	std	Y+7, r24	; 0x07
    1414:	d8 01       	movw	r26, r16
    1416:	8d 91       	ld	r24, X+
    1418:	9c 91       	ld	r25, X
    141a:	dc 01       	movw	r26, r24
    141c:	ed 91       	ld	r30, X+
    141e:	fc 91       	ld	r31, X
    1420:	06 80       	ldd	r0, Z+6	; 0x06
    1422:	f7 81       	ldd	r31, Z+7	; 0x07
    1424:	e0 2d       	mov	r30, r0
    1426:	09 95       	icall
    1428:	9a 87       	std	Y+10, r25	; 0x0a
    142a:	89 87       	std	Y+9, r24	; 0x09
    142c:	8b 86       	std	Y+11, r8	; 0x0b
    142e:	9c 86       	std	Y+12, r9	; 0x0c
    1430:	ad 86       	std	Y+13, r10	; 0x0d
    1432:	be 86       	std	Y+14, r11	; 0x0e
    1434:	d1 01       	movw	r26, r2
    1436:	ed 91       	ld	r30, X+
    1438:	fc 91       	ld	r31, X
    143a:	c0 80       	ld	r12, Z
    143c:	d1 80       	ldd	r13, Z+1	; 0x01
    143e:	f8 01       	movw	r30, r16
    1440:	80 81       	ld	r24, Z
    1442:	91 81       	ldd	r25, Z+1	; 0x01
    1444:	dc 01       	movw	r26, r24
    1446:	ed 91       	ld	r30, X+
    1448:	fc 91       	ld	r31, X
    144a:	02 80       	ldd	r0, Z+2	; 0x02
    144c:	f3 81       	ldd	r31, Z+3	; 0x03
    144e:	e0 2d       	mov	r30, r0
    1450:	09 95       	icall
    1452:	ae 01       	movw	r20, r28
    1454:	4f 5f       	subi	r20, 0xFF	; 255
    1456:	5f 4f       	sbci	r21, 0xFF	; 255
    1458:	bc 01       	movw	r22, r24
    145a:	c1 01       	movw	r24, r2
    145c:	f6 01       	movw	r30, r12
    145e:	09 95       	icall
    1460:	0e 5f       	subi	r16, 0xFE	; 254
    1462:	1f 4f       	sbci	r17, 0xFF	; 255
    1464:	e0 16       	cp	r14, r16
    1466:	f1 06       	cpc	r15, r17
    1468:	09 f0       	breq	.+2      	; 0x146c <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x506>
    146a:	b9 cf       	rjmp	.-142    	; 0x13de <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x478>
    146c:	f1 01       	movw	r30, r2
    146e:	ef 57       	subi	r30, 0x7F	; 127
    1470:	fb 4f       	sbci	r31, 0xFB	; 251
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	80 83       	st	Z, r24
    1476:	31 96       	adiw	r30, 0x01	; 1
    1478:	40 82       	st	Z, r4
    147a:	51 82       	std	Z+1, r5	; 0x01
    147c:	62 82       	std	Z+2, r6	; 0x02
    147e:	73 82       	std	Z+3, r7	; 0x03
    1480:	34 96       	adiw	r30, 0x04	; 4
    1482:	40 82       	st	Z, r4
    1484:	51 82       	std	Z+1, r5	; 0x01
    1486:	62 82       	std	Z+2, r6	; 0x02
    1488:	73 82       	std	Z+3, r7	; 0x03
    148a:	8f ef       	ldi	r24, 0xFF	; 255
    148c:	9f ef       	ldi	r25, 0xFF	; 255
    148e:	69 c3       	rjmp	.+1746   	; 0x1b62 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xbfc>
    1490:	8a 30       	cpi	r24, 0x0A	; 10
    1492:	91 05       	cpc	r25, r1
    1494:	09 f0       	breq	.+2      	; 0x1498 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x532>
    1496:	c5 c0       	rjmp	.+394    	; 0x1622 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x6bc>
    1498:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <avr_time_now>
    149c:	d1 01       	movw	r26, r2
    149e:	13 96       	adiw	r26, 0x03	; 3
    14a0:	0d 91       	ld	r16, X+
    14a2:	1d 91       	ld	r17, X+
    14a4:	2d 91       	ld	r18, X+
    14a6:	3c 91       	ld	r19, X
    14a8:	16 97       	sbiw	r26, 0x06	; 6
    14aa:	60 1b       	sub	r22, r16
    14ac:	71 0b       	sbc	r23, r17
    14ae:	82 0b       	sbc	r24, r18
    14b0:	93 0b       	sbc	r25, r19
    14b2:	69 a7       	std	Y+41, r22	; 0x29
    14b4:	7a a7       	std	Y+42, r23	; 0x2a
    14b6:	8b a7       	std	Y+43, r24	; 0x2b
    14b8:	9c a7       	std	Y+44, r25	; 0x2c
    14ba:	54 96       	adiw	r26, 0x14	; 20
    14bc:	8c 91       	ld	r24, X
    14be:	54 97       	sbiw	r26, 0x14	; 20
    14c0:	55 96       	adiw	r26, 0x15	; 21
    14c2:	2c 91       	ld	r18, X
    14c4:	55 97       	sbiw	r26, 0x15	; 21
    14c6:	42 2f       	mov	r20, r18
    14c8:	50 e0       	ldi	r21, 0x00	; 0
    14ca:	60 e0       	ldi	r22, 0x00	; 0
    14cc:	70 e0       	ldi	r23, 0x00	; 0
    14ce:	ba 01       	movw	r22, r20
    14d0:	55 27       	eor	r21, r21
    14d2:	44 27       	eor	r20, r20
    14d4:	58 2b       	or	r21, r24
    14d6:	53 96       	adiw	r26, 0x13	; 19
    14d8:	8c 91       	ld	r24, X
    14da:	53 97       	sbiw	r26, 0x13	; 19
    14dc:	48 2b       	or	r20, r24
    14de:	56 96       	adiw	r26, 0x16	; 22
    14e0:	8c 91       	ld	r24, X
    14e2:	8a 01       	movw	r16, r20
    14e4:	9b 01       	movw	r18, r22
    14e6:	38 2b       	or	r19, r24
    14e8:	a9 01       	movw	r20, r18
    14ea:	98 01       	movw	r18, r16
    14ec:	21 50       	subi	r18, 0x01	; 1
    14ee:	31 09       	sbc	r19, r1
    14f0:	41 09       	sbc	r20, r1
    14f2:	51 09       	sbc	r21, r1
    14f4:	29 a3       	std	Y+33, r18	; 0x21
    14f6:	3a a3       	std	Y+34, r19	; 0x22
    14f8:	4b a3       	std	Y+35, r20	; 0x23
    14fa:	5c a3       	std	Y+36, r21	; 0x24
    14fc:	d1 01       	movw	r26, r2
    14fe:	58 96       	adiw	r26, 0x18	; 24
    1500:	2c 91       	ld	r18, X
    1502:	58 97       	sbiw	r26, 0x18	; 24
    1504:	59 96       	adiw	r26, 0x19	; 25
    1506:	8c 91       	ld	r24, X
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	a0 e0       	ldi	r26, 0x00	; 0
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	dc 01       	movw	r26, r24
    1510:	99 27       	eor	r25, r25
    1512:	88 27       	eor	r24, r24
    1514:	92 2b       	or	r25, r18
    1516:	f1 01       	movw	r30, r2
    1518:	27 89       	ldd	r18, Z+23	; 0x17
    151a:	82 2b       	or	r24, r18
    151c:	22 8d       	ldd	r18, Z+26	; 0x1a
    151e:	b2 2b       	or	r27, r18
    1520:	8c 01       	movw	r16, r24
    1522:	9d 01       	movw	r18, r26
    1524:	16 53       	subi	r17, 0x36	; 54
    1526:	25 46       	sbci	r18, 0x65	; 101
    1528:	34 4c       	sbci	r19, 0xC4	; 196
    152a:	0d 8b       	std	Y+21, r16	; 0x15
    152c:	1e 8b       	std	Y+22, r17	; 0x16
    152e:	2f 8b       	std	Y+23, r18	; 0x17
    1530:	38 8f       	std	Y+24, r19	; 0x18
    1532:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <avr_time_now>
    1536:	6d a3       	std	Y+37, r22	; 0x25
    1538:	7e a3       	std	Y+38, r23	; 0x26
    153a:	8f a3       	std	Y+39, r24	; 0x27
    153c:	98 a7       	std	Y+40, r25	; 0x28
    153e:	69 a5       	ldd	r22, Y+41	; 0x29
    1540:	7a a5       	ldd	r23, Y+42	; 0x2a
    1542:	8b a5       	ldd	r24, Y+43	; 0x2b
    1544:	9c a5       	ldd	r25, Y+44	; 0x2c
    1546:	28 ee       	ldi	r18, 0xE8	; 232
    1548:	33 e0       	ldi	r19, 0x03	; 3
    154a:	40 e0       	ldi	r20, 0x00	; 0
    154c:	50 e0       	ldi	r21, 0x00	; 0
    154e:	0e 94 8f 1b 	call	0x371e	; 0x371e <__udivmodsi4>
    1552:	69 a7       	std	Y+41, r22	; 0x29
    1554:	7a a7       	std	Y+42, r23	; 0x2a
    1556:	8b a7       	std	Y+43, r24	; 0x2b
    1558:	9c a7       	std	Y+44, r25	; 0x2c
    155a:	69 a1       	ldd	r22, Y+33	; 0x21
    155c:	7a a1       	ldd	r23, Y+34	; 0x22
    155e:	8b a1       	ldd	r24, Y+35	; 0x23
    1560:	9c a1       	ldd	r25, Y+36	; 0x24
    1562:	62 0f       	add	r22, r18
    1564:	73 1f       	adc	r23, r19
    1566:	84 1f       	adc	r24, r20
    1568:	95 1f       	adc	r25, r21
    156a:	69 a3       	std	Y+33, r22	; 0x21
    156c:	7a a3       	std	Y+34, r23	; 0x22
    156e:	8b a3       	std	Y+35, r24	; 0x23
    1570:	9c a3       	std	Y+36, r25	; 0x24
    1572:	6d a1       	ldd	r22, Y+37	; 0x25
    1574:	7e a1       	ldd	r23, Y+38	; 0x26
    1576:	8f a1       	ldd	r24, Y+39	; 0x27
    1578:	98 a5       	ldd	r25, Y+40	; 0x28
    157a:	28 ee       	ldi	r18, 0xE8	; 232
    157c:	33 e0       	ldi	r19, 0x03	; 3
    157e:	40 e0       	ldi	r20, 0x00	; 0
    1580:	50 e0       	ldi	r21, 0x00	; 0
    1582:	0e 94 8f 1b 	call	0x371e	; 0x371e <__udivmodsi4>
    1586:	6d a3       	std	Y+37, r22	; 0x25
    1588:	7e a3       	std	Y+38, r23	; 0x26
    158a:	8f a3       	std	Y+39, r24	; 0x27
    158c:	98 a7       	std	Y+40, r25	; 0x28
    158e:	89 a1       	ldd	r24, Y+33	; 0x21
    1590:	9a a1       	ldd	r25, Y+34	; 0x22
    1592:	ab a1       	ldd	r26, Y+35	; 0x23
    1594:	bc a1       	ldd	r27, Y+36	; 0x24
    1596:	82 1b       	sub	r24, r18
    1598:	93 0b       	sbc	r25, r19
    159a:	a4 0b       	sbc	r26, r20
    159c:	b5 0b       	sbc	r27, r21
    159e:	f1 01       	movw	r30, r2
    15a0:	87 83       	std	Z+7, r24	; 0x07
    15a2:	90 87       	std	Z+8, r25	; 0x08
    15a4:	a1 87       	std	Z+9, r26	; 0x09
    15a6:	b2 87       	std	Z+10, r27	; 0x0a
    15a8:	29 a5       	ldd	r18, Y+41	; 0x29
    15aa:	3a a5       	ldd	r19, Y+42	; 0x2a
    15ac:	4b a5       	ldd	r20, Y+43	; 0x2b
    15ae:	5c a5       	ldd	r21, Y+44	; 0x2c
    15b0:	60 e4       	ldi	r22, 0x40	; 64
    15b2:	72 e4       	ldi	r23, 0x42	; 66
    15b4:	8f e0       	ldi	r24, 0x0F	; 15
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__mulsi3>
    15bc:	0d 89       	ldd	r16, Y+21	; 0x15
    15be:	1e 89       	ldd	r17, Y+22	; 0x16
    15c0:	2f 89       	ldd	r18, Y+23	; 0x17
    15c2:	38 8d       	ldd	r19, Y+24	; 0x18
    15c4:	06 0f       	add	r16, r22
    15c6:	17 1f       	adc	r17, r23
    15c8:	28 1f       	adc	r18, r24
    15ca:	39 1f       	adc	r19, r25
    15cc:	0d 8b       	std	Y+21, r16	; 0x15
    15ce:	1e 8b       	std	Y+22, r17	; 0x16
    15d0:	2f 8b       	std	Y+23, r18	; 0x17
    15d2:	38 8f       	std	Y+24, r19	; 0x18
    15d4:	2d a1       	ldd	r18, Y+37	; 0x25
    15d6:	3e a1       	ldd	r19, Y+38	; 0x26
    15d8:	4f a1       	ldd	r20, Y+39	; 0x27
    15da:	58 a5       	ldd	r21, Y+40	; 0x28
    15dc:	60 e4       	ldi	r22, 0x40	; 64
    15de:	72 e4       	ldi	r23, 0x42	; 66
    15e0:	8f e0       	ldi	r24, 0x0F	; 15
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__mulsi3>
    15e8:	0d 89       	ldd	r16, Y+21	; 0x15
    15ea:	1e 89       	ldd	r17, Y+22	; 0x16
    15ec:	2f 89       	ldd	r18, Y+23	; 0x17
    15ee:	38 8d       	ldd	r19, Y+24	; 0x18
    15f0:	06 1b       	sub	r16, r22
    15f2:	17 0b       	sbc	r17, r23
    15f4:	28 0b       	sbc	r18, r24
    15f6:	39 0b       	sbc	r19, r25
    15f8:	03 87       	std	Z+11, r16	; 0x0b
    15fa:	14 87       	std	Z+12, r17	; 0x0c
    15fc:	25 87       	std	Z+13, r18	; 0x0d
    15fe:	36 87       	std	Z+14, r19	; 0x0e
    1600:	b1 01       	movw	r22, r2
    1602:	65 5f       	subi	r22, 0xF5	; 245
    1604:	7f 4f       	sbci	r23, 0xFF	; 255
    1606:	c1 01       	movw	r24, r2
    1608:	07 96       	adiw	r24, 0x07	; 7
    160a:	0e 94 f7 18 	call	0x31ee	; 0x31ee <_ZN3ros16normalizeSecNSecERmS0_>
    160e:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <avr_time_now>
    1612:	f1 01       	movw	r30, r2
    1614:	ea 57       	subi	r30, 0x7A	; 122
    1616:	fb 4f       	sbci	r31, 0xFB	; 251
    1618:	60 83       	st	Z, r22
    161a:	71 83       	std	Z+1, r23	; 0x01
    161c:	82 83       	std	Z+2, r24	; 0x02
    161e:	93 83       	std	Z+3, r25	; 0x03
    1620:	1f cd       	rjmp	.-1474   	; 0x1060 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfa>
    1622:	86 30       	cpi	r24, 0x06	; 6
    1624:	91 05       	cpc	r25, r1
    1626:	09 f0       	breq	.+2      	; 0x162a <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x6c4>
    1628:	33 c2       	rjmp	.+1126   	; 0x1a90 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xb2a>
    162a:	81 01       	movw	r16, r2
    162c:	0d 5e       	subi	r16, 0xED	; 237
    162e:	1f 4f       	sbci	r17, 0xFF	; 255
    1630:	1a a3       	std	Y+34, r17	; 0x22
    1632:	09 a3       	std	Y+33, r16	; 0x21
    1634:	d1 01       	movw	r26, r2
    1636:	53 96       	adiw	r26, 0x13	; 19
    1638:	2c 91       	ld	r18, X
    163a:	53 97       	sbiw	r26, 0x13	; 19
    163c:	54 96       	adiw	r26, 0x14	; 20
    163e:	3c 91       	ld	r19, X
    1640:	54 97       	sbiw	r26, 0x14	; 20
    1642:	55 96       	adiw	r26, 0x15	; 21
    1644:	8c 91       	ld	r24, X
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	a0 e0       	ldi	r26, 0x00	; 0
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	dc 01       	movw	r26, r24
    164e:	99 27       	eor	r25, r25
    1650:	88 27       	eor	r24, r24
    1652:	93 2b       	or	r25, r19
    1654:	82 2b       	or	r24, r18
    1656:	f1 01       	movw	r30, r2
    1658:	26 89       	ldd	r18, Z+22	; 0x16
    165a:	ac 01       	movw	r20, r24
    165c:	bd 01       	movw	r22, r26
    165e:	72 2b       	or	r23, r18
    1660:	4d 8b       	std	Y+21, r20	; 0x15
    1662:	5e 8b       	std	Y+22, r21	; 0x16
    1664:	6f 8b       	std	Y+23, r22	; 0x17
    1666:	78 8f       	std	Y+24, r23	; 0x18
    1668:	ef 85       	ldd	r30, Y+15	; 0x0f
    166a:	f8 89       	ldd	r31, Y+16	; 0x10
    166c:	82 81       	ldd	r24, Z+2	; 0x02
    166e:	93 81       	ldd	r25, Z+3	; 0x03
    1670:	a4 81       	ldd	r26, Z+4	; 0x04
    1672:	b5 81       	ldd	r27, Z+5	; 0x05
    1674:	84 17       	cp	r24, r20
    1676:	95 07       	cpc	r25, r21
    1678:	a6 07       	cpc	r26, r22
    167a:	b7 07       	cpc	r27, r23
    167c:	78 f4       	brcc	.+30     	; 0x169c <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x736>
    167e:	ba 01       	movw	r22, r20
    1680:	66 0f       	add	r22, r22
    1682:	77 1f       	adc	r23, r23
    1684:	66 0f       	add	r22, r22
    1686:	77 1f       	adc	r23, r23
    1688:	82 85       	ldd	r24, Z+10	; 0x0a
    168a:	93 85       	ldd	r25, Z+11	; 0x0b
    168c:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <realloc>
    1690:	af 85       	ldd	r26, Y+15	; 0x0f
    1692:	b8 89       	ldd	r27, Y+16	; 0x10
    1694:	1b 96       	adiw	r26, 0x0b	; 11
    1696:	9c 93       	st	X, r25
    1698:	8e 93       	st	-X, r24
    169a:	1a 97       	sbiw	r26, 0x0a	; 10
    169c:	0d 89       	ldd	r16, Y+21	; 0x15
    169e:	1e 89       	ldd	r17, Y+22	; 0x16
    16a0:	2f 89       	ldd	r18, Y+23	; 0x17
    16a2:	38 8d       	ldd	r19, Y+24	; 0x18
    16a4:	af 85       	ldd	r26, Y+15	; 0x0f
    16a6:	b8 89       	ldd	r27, Y+16	; 0x10
    16a8:	12 96       	adiw	r26, 0x02	; 2
    16aa:	0d 93       	st	X+, r16
    16ac:	1d 93       	st	X+, r17
    16ae:	2d 93       	st	X+, r18
    16b0:	3c 93       	st	X, r19
    16b2:	15 97       	sbiw	r26, 0x05	; 5
    16b4:	01 2b       	or	r16, r17
    16b6:	02 2b       	or	r16, r18
    16b8:	03 2b       	or	r16, r19
    16ba:	09 f4       	brne	.+2      	; 0x16be <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x758>
    16bc:	54 c0       	rjmp	.+168    	; 0x1766 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x800>
    16be:	a9 a1       	ldd	r26, Y+33	; 0x21
    16c0:	ba a1       	ldd	r27, Y+34	; 0x22
    16c2:	e4 e0       	ldi	r30, 0x04	; 4
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	fe 8b       	std	Y+22, r31	; 0x16
    16c8:	ed 8b       	std	Y+21, r30	; 0x15
    16ca:	40 e0       	ldi	r20, 0x00	; 0
    16cc:	50 e0       	ldi	r21, 0x00	; 0
    16ce:	ba 01       	movw	r22, r20
    16d0:	15 96       	adiw	r26, 0x05	; 5
    16d2:	8c 91       	ld	r24, X
    16d4:	15 97       	sbiw	r26, 0x05	; 5
    16d6:	16 96       	adiw	r26, 0x06	; 6
    16d8:	9c 91       	ld	r25, X
    16da:	16 97       	sbiw	r26, 0x06	; 6
    16dc:	09 2f       	mov	r16, r25
    16de:	10 e0       	ldi	r17, 0x00	; 0
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	98 01       	movw	r18, r16
    16e6:	11 27       	eor	r17, r17
    16e8:	00 27       	eor	r16, r16
    16ea:	18 2b       	or	r17, r24
    16ec:	14 96       	adiw	r26, 0x04	; 4
    16ee:	8c 91       	ld	r24, X
    16f0:	14 97       	sbiw	r26, 0x04	; 4
    16f2:	08 2b       	or	r16, r24
    16f4:	17 96       	adiw	r26, 0x07	; 7
    16f6:	8c 91       	ld	r24, X
    16f8:	17 97       	sbiw	r26, 0x07	; 7
    16fa:	38 2b       	or	r19, r24
    16fc:	ef 85       	ldd	r30, Y+15	; 0x0f
    16fe:	f8 89       	ldd	r31, Y+16	; 0x10
    1700:	06 83       	std	Z+6, r16	; 0x06
    1702:	17 83       	std	Z+7, r17	; 0x07
    1704:	20 87       	std	Z+8, r18	; 0x08
    1706:	31 87       	std	Z+9, r19	; 0x09
    1708:	ed 89       	ldd	r30, Y+21	; 0x15
    170a:	fe 89       	ldd	r31, Y+22	; 0x16
    170c:	cf 01       	movw	r24, r30
    170e:	04 97       	sbiw	r24, 0x04	; 4
    1710:	8f 01       	movw	r16, r30
    1712:	0c 5f       	subi	r16, 0xFC	; 252
    1714:	1f 4f       	sbci	r17, 0xFF	; 255
    1716:	1e 8b       	std	Y+22, r17	; 0x16
    1718:	0d 8b       	std	Y+21, r16	; 0x15
    171a:	ef 85       	ldd	r30, Y+15	; 0x0f
    171c:	f8 89       	ldd	r31, Y+16	; 0x10
    171e:	22 85       	ldd	r18, Z+10	; 0x0a
    1720:	33 85       	ldd	r19, Z+11	; 0x0b
    1722:	28 0f       	add	r18, r24
    1724:	39 1f       	adc	r19, r25
    1726:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1728:	fc 8d       	ldd	r31, Y+28	; 0x1c
    172a:	80 81       	ld	r24, Z
    172c:	91 81       	ldd	r25, Z+1	; 0x01
    172e:	f9 01       	movw	r30, r18
    1730:	91 83       	std	Z+1, r25	; 0x01
    1732:	80 83       	st	Z, r24
    1734:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1736:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1738:	82 81       	ldd	r24, Z+2	; 0x02
    173a:	93 81       	ldd	r25, Z+3	; 0x03
    173c:	f9 01       	movw	r30, r18
    173e:	93 83       	std	Z+3, r25	; 0x03
    1740:	82 83       	std	Z+2, r24	; 0x02
    1742:	4f 5f       	subi	r20, 0xFF	; 255
    1744:	5f 4f       	sbci	r21, 0xFF	; 255
    1746:	6f 4f       	sbci	r22, 0xFF	; 255
    1748:	7f 4f       	sbci	r23, 0xFF	; 255
    174a:	14 96       	adiw	r26, 0x04	; 4
    174c:	ef 85       	ldd	r30, Y+15	; 0x0f
    174e:	f8 89       	ldd	r31, Y+16	; 0x10
    1750:	02 81       	ldd	r16, Z+2	; 0x02
    1752:	13 81       	ldd	r17, Z+3	; 0x03
    1754:	24 81       	ldd	r18, Z+4	; 0x04
    1756:	35 81       	ldd	r19, Z+5	; 0x05
    1758:	40 17       	cp	r20, r16
    175a:	51 07       	cpc	r21, r17
    175c:	62 07       	cpc	r22, r18
    175e:	73 07       	cpc	r23, r19
    1760:	08 f4       	brcc	.+2      	; 0x1764 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7fe>
    1762:	b6 cf       	rjmp	.-148    	; 0x16d0 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x76a>
    1764:	04 c0       	rjmp	.+8      	; 0x176e <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x808>
    1766:	04 e0       	ldi	r16, 0x04	; 4
    1768:	10 e0       	ldi	r17, 0x00	; 0
    176a:	1e 8b       	std	Y+22, r17	; 0x16
    176c:	0d 8b       	std	Y+21, r16	; 0x15
    176e:	09 a1       	ldd	r16, Y+33	; 0x21
    1770:	1a a1       	ldd	r17, Y+34	; 0x22
    1772:	2d 89       	ldd	r18, Y+21	; 0x15
    1774:	3e 89       	ldd	r19, Y+22	; 0x16
    1776:	02 0f       	add	r16, r18
    1778:	13 1f       	adc	r17, r19
    177a:	1e a3       	std	Y+38, r17	; 0x26
    177c:	0d a3       	std	Y+37, r16	; 0x25
    177e:	d8 01       	movw	r26, r16
    1780:	4c 91       	ld	r20, X
    1782:	11 96       	adiw	r26, 0x01	; 1
    1784:	5c 91       	ld	r21, X
    1786:	11 97       	sbiw	r26, 0x01	; 1
    1788:	12 96       	adiw	r26, 0x02	; 2
    178a:	8c 91       	ld	r24, X
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	a0 e0       	ldi	r26, 0x00	; 0
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	dc 01       	movw	r26, r24
    1794:	99 27       	eor	r25, r25
    1796:	88 27       	eor	r24, r24
    1798:	95 2b       	or	r25, r21
    179a:	84 2b       	or	r24, r20
    179c:	f8 01       	movw	r30, r16
    179e:	43 81       	ldd	r20, Z+3	; 0x03
    17a0:	8c 01       	movw	r16, r24
    17a2:	9d 01       	movw	r18, r26
    17a4:	34 2b       	or	r19, r20
    17a6:	09 a7       	std	Y+41, r16	; 0x29
    17a8:	1a a7       	std	Y+42, r17	; 0x2a
    17aa:	2b a7       	std	Y+43, r18	; 0x2b
    17ac:	3c a7       	std	Y+44, r19	; 0x2c
    17ae:	0d 89       	ldd	r16, Y+21	; 0x15
    17b0:	1e 89       	ldd	r17, Y+22	; 0x16
    17b2:	0c 5f       	subi	r16, 0xFC	; 252
    17b4:	1f 4f       	sbci	r17, 0xFF	; 255
    17b6:	ef 85       	ldd	r30, Y+15	; 0x0f
    17b8:	f8 89       	ldd	r31, Y+16	; 0x10
    17ba:	84 85       	ldd	r24, Z+12	; 0x0c
    17bc:	95 85       	ldd	r25, Z+13	; 0x0d
    17be:	a6 85       	ldd	r26, Z+14	; 0x0e
    17c0:	b7 85       	ldd	r27, Z+15	; 0x0f
    17c2:	29 a5       	ldd	r18, Y+41	; 0x29
    17c4:	3a a5       	ldd	r19, Y+42	; 0x2a
    17c6:	4b a5       	ldd	r20, Y+43	; 0x2b
    17c8:	5c a5       	ldd	r21, Y+44	; 0x2c
    17ca:	82 17       	cp	r24, r18
    17cc:	93 07       	cpc	r25, r19
    17ce:	a4 07       	cpc	r26, r20
    17d0:	b5 07       	cpc	r27, r21
    17d2:	78 f4       	brcc	.+30     	; 0x17f2 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x88c>
    17d4:	b9 01       	movw	r22, r18
    17d6:	66 0f       	add	r22, r22
    17d8:	77 1f       	adc	r23, r23
    17da:	66 0f       	add	r22, r22
    17dc:	77 1f       	adc	r23, r23
    17de:	84 89       	ldd	r24, Z+20	; 0x14
    17e0:	95 89       	ldd	r25, Z+21	; 0x15
    17e2:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <realloc>
    17e6:	af 85       	ldd	r26, Y+15	; 0x0f
    17e8:	b8 89       	ldd	r27, Y+16	; 0x10
    17ea:	55 96       	adiw	r26, 0x15	; 21
    17ec:	9c 93       	st	X, r25
    17ee:	8e 93       	st	-X, r24
    17f0:	54 97       	sbiw	r26, 0x14	; 20
    17f2:	29 a5       	ldd	r18, Y+41	; 0x29
    17f4:	3a a5       	ldd	r19, Y+42	; 0x2a
    17f6:	4b a5       	ldd	r20, Y+43	; 0x2b
    17f8:	5c a5       	ldd	r21, Y+44	; 0x2c
    17fa:	af 85       	ldd	r26, Y+15	; 0x0f
    17fc:	b8 89       	ldd	r27, Y+16	; 0x10
    17fe:	1c 96       	adiw	r26, 0x0c	; 12
    1800:	2d 93       	st	X+, r18
    1802:	3d 93       	st	X+, r19
    1804:	4d 93       	st	X+, r20
    1806:	5c 93       	st	X, r21
    1808:	1f 97       	sbiw	r26, 0x0f	; 15
    180a:	23 2b       	or	r18, r19
    180c:	24 2b       	or	r18, r20
    180e:	25 2b       	or	r18, r21
    1810:	09 f4       	brne	.+2      	; 0x1814 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x8ae>
    1812:	61 c0       	rjmp	.+194    	; 0x18d6 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x970>
    1814:	ed a1       	ldd	r30, Y+37	; 0x25
    1816:	fe a1       	ldd	r31, Y+38	; 0x26
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	40 e0       	ldi	r20, 0x00	; 0
    181e:	50 e0       	ldi	r21, 0x00	; 0
    1820:	ba 01       	movw	r22, r20
    1822:	fa a7       	std	Y+42, r31	; 0x2a
    1824:	e9 a7       	std	Y+41, r30	; 0x29
    1826:	fe 8a       	std	Y+22, r15	; 0x16
    1828:	ed 8a       	std	Y+21, r14	; 0x15
    182a:	8f a6       	std	Y+47, r8	; 0x2f
    182c:	98 aa       	std	Y+48, r9	; 0x30
    182e:	a9 aa       	std	Y+49, r10	; 0x31
    1830:	ba aa       	std	Y+50, r11	; 0x32
    1832:	e9 a5       	ldd	r30, Y+41	; 0x29
    1834:	fa a5       	ldd	r31, Y+42	; 0x2a
    1836:	f5 80       	ldd	r15, Z+5	; 0x05
    1838:	86 81       	ldd	r24, Z+6	; 0x06
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	a0 e0       	ldi	r26, 0x00	; 0
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	dc 01       	movw	r26, r24
    1842:	99 27       	eor	r25, r25
    1844:	88 27       	eor	r24, r24
    1846:	9f 29       	or	r25, r15
    1848:	f4 80       	ldd	r15, Z+4	; 0x04
    184a:	8f 29       	or	r24, r15
    184c:	f7 80       	ldd	r15, Z+7	; 0x07
    184e:	4c 01       	movw	r8, r24
    1850:	5d 01       	movw	r10, r26
    1852:	bf 28       	or	r11, r15
    1854:	8d a2       	std	Y+37, r8	; 0x25
    1856:	9e a2       	std	Y+38, r9	; 0x26
    1858:	af a2       	std	Y+39, r10	; 0x27
    185a:	b8 a6       	std	Y+40, r11	; 0x28
    185c:	af 85       	ldd	r26, Y+15	; 0x0f
    185e:	b8 89       	ldd	r27, Y+16	; 0x10
    1860:	50 96       	adiw	r26, 0x10	; 16
    1862:	8d 92       	st	X+, r8
    1864:	9d 92       	st	X+, r9
    1866:	ad 92       	st	X+, r10
    1868:	bc 92       	st	X, r11
    186a:	53 97       	sbiw	r26, 0x13	; 19
    186c:	0c 5f       	subi	r16, 0xFC	; 252
    186e:	1f 4f       	sbci	r17, 0xFF	; 255
    1870:	54 96       	adiw	r26, 0x14	; 20
    1872:	ed 90       	ld	r14, X+
    1874:	fc 90       	ld	r15, X
    1876:	55 97       	sbiw	r26, 0x15	; 21
    1878:	e2 0e       	add	r14, r18
    187a:	f3 1e       	adc	r15, r19
    187c:	e9 8d       	ldd	r30, Y+25	; 0x19
    187e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1880:	80 81       	ld	r24, Z
    1882:	91 81       	ldd	r25, Z+1	; 0x01
    1884:	d7 01       	movw	r26, r14
    1886:	11 96       	adiw	r26, 0x01	; 1
    1888:	9c 93       	st	X, r25
    188a:	8e 93       	st	-X, r24
    188c:	82 81       	ldd	r24, Z+2	; 0x02
    188e:	93 81       	ldd	r25, Z+3	; 0x03
    1890:	13 96       	adiw	r26, 0x03	; 3
    1892:	9c 93       	st	X, r25
    1894:	8e 93       	st	-X, r24
    1896:	12 97       	sbiw	r26, 0x02	; 2
    1898:	4f 5f       	subi	r20, 0xFF	; 255
    189a:	5f 4f       	sbci	r21, 0xFF	; 255
    189c:	6f 4f       	sbci	r22, 0xFF	; 255
    189e:	7f 4f       	sbci	r23, 0xFF	; 255
    18a0:	2c 5f       	subi	r18, 0xFC	; 252
    18a2:	3f 4f       	sbci	r19, 0xFF	; 255
    18a4:	e9 a5       	ldd	r30, Y+41	; 0x29
    18a6:	fa a5       	ldd	r31, Y+42	; 0x2a
    18a8:	34 96       	adiw	r30, 0x04	; 4
    18aa:	fa a7       	std	Y+42, r31	; 0x2a
    18ac:	e9 a7       	std	Y+41, r30	; 0x29
    18ae:	af 85       	ldd	r26, Y+15	; 0x0f
    18b0:	b8 89       	ldd	r27, Y+16	; 0x10
    18b2:	1c 96       	adiw	r26, 0x0c	; 12
    18b4:	8d 90       	ld	r8, X+
    18b6:	9d 90       	ld	r9, X+
    18b8:	ad 90       	ld	r10, X+
    18ba:	bc 90       	ld	r11, X
    18bc:	1f 97       	sbiw	r26, 0x0f	; 15
    18be:	48 15       	cp	r20, r8
    18c0:	59 05       	cpc	r21, r9
    18c2:	6a 05       	cpc	r22, r10
    18c4:	7b 05       	cpc	r23, r11
    18c6:	08 f4       	brcc	.+2      	; 0x18ca <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x964>
    18c8:	b4 cf       	rjmp	.-152    	; 0x1832 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x8cc>
    18ca:	ed 88       	ldd	r14, Y+21	; 0x15
    18cc:	fe 88       	ldd	r15, Y+22	; 0x16
    18ce:	8f a4       	ldd	r8, Y+47	; 0x2f
    18d0:	98 a8       	ldd	r9, Y+48	; 0x30
    18d2:	a9 a8       	ldd	r10, Y+49	; 0x31
    18d4:	ba a8       	ldd	r11, Y+50	; 0x32
    18d6:	e9 a1       	ldd	r30, Y+33	; 0x21
    18d8:	fa a1       	ldd	r31, Y+34	; 0x22
    18da:	e0 0f       	add	r30, r16
    18dc:	f1 1f       	adc	r31, r17
    18de:	20 81       	ld	r18, Z
    18e0:	31 81       	ldd	r19, Z+1	; 0x01
    18e2:	82 81       	ldd	r24, Z+2	; 0x02
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	a0 e0       	ldi	r26, 0x00	; 0
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	dc 01       	movw	r26, r24
    18ec:	99 27       	eor	r25, r25
    18ee:	88 27       	eor	r24, r24
    18f0:	93 2b       	or	r25, r19
    18f2:	82 2b       	or	r24, r18
    18f4:	23 81       	ldd	r18, Z+3	; 0x03
    18f6:	ac 01       	movw	r20, r24
    18f8:	bd 01       	movw	r22, r26
    18fa:	72 2b       	or	r23, r18
    18fc:	4d 8b       	std	Y+21, r20	; 0x15
    18fe:	5e 8b       	std	Y+22, r21	; 0x16
    1900:	6f 8b       	std	Y+23, r22	; 0x17
    1902:	78 8f       	std	Y+24, r23	; 0x18
    1904:	0c 5f       	subi	r16, 0xFC	; 252
    1906:	1f 4f       	sbci	r17, 0xFF	; 255
    1908:	ef 85       	ldd	r30, Y+15	; 0x0f
    190a:	f8 89       	ldd	r31, Y+16	; 0x10
    190c:	86 89       	ldd	r24, Z+22	; 0x16
    190e:	97 89       	ldd	r25, Z+23	; 0x17
    1910:	a0 8d       	ldd	r26, Z+24	; 0x18
    1912:	b1 8d       	ldd	r27, Z+25	; 0x19
    1914:	84 17       	cp	r24, r20
    1916:	95 07       	cpc	r25, r21
    1918:	a6 07       	cpc	r26, r22
    191a:	b7 07       	cpc	r27, r23
    191c:	68 f4       	brcc	.+26     	; 0x1938 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9d2>
    191e:	ba 01       	movw	r22, r20
    1920:	66 0f       	add	r22, r22
    1922:	77 1f       	adc	r23, r23
    1924:	84 8d       	ldd	r24, Z+28	; 0x1c
    1926:	95 8d       	ldd	r25, Z+29	; 0x1d
    1928:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <realloc>
    192c:	af 85       	ldd	r26, Y+15	; 0x0f
    192e:	b8 89       	ldd	r27, Y+16	; 0x10
    1930:	5d 96       	adiw	r26, 0x1d	; 29
    1932:	9c 93       	st	X, r25
    1934:	8e 93       	st	-X, r24
    1936:	5c 97       	sbiw	r26, 0x1c	; 28
    1938:	2d 89       	ldd	r18, Y+21	; 0x15
    193a:	3e 89       	ldd	r19, Y+22	; 0x16
    193c:	4f 89       	ldd	r20, Y+23	; 0x17
    193e:	58 8d       	ldd	r21, Y+24	; 0x18
    1940:	af 85       	ldd	r26, Y+15	; 0x0f
    1942:	b8 89       	ldd	r27, Y+16	; 0x10
    1944:	56 96       	adiw	r26, 0x16	; 22
    1946:	2d 93       	st	X+, r18
    1948:	3d 93       	st	X+, r19
    194a:	4d 93       	st	X+, r20
    194c:	5c 93       	st	X, r21
    194e:	59 97       	sbiw	r26, 0x19	; 25
    1950:	23 2b       	or	r18, r19
    1952:	24 2b       	or	r18, r20
    1954:	25 2b       	or	r18, r21
    1956:	09 f4       	brne	.+2      	; 0x195a <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9f4>
    1958:	96 c0       	rjmp	.+300    	; 0x1a86 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xb20>
    195a:	1a a6       	std	Y+42, r1	; 0x2a
    195c:	19 a6       	std	Y+41, r1	; 0x29
    195e:	1d a2       	std	Y+37, r1	; 0x25
    1960:	1e a2       	std	Y+38, r1	; 0x26
    1962:	1f a2       	std	Y+39, r1	; 0x27
    1964:	18 a6       	std	Y+40, r1	; 0x28
    1966:	1e a7       	std	Y+46, r17	; 0x2e
    1968:	0d a7       	std	Y+45, r16	; 0x2d
    196a:	e9 a1       	ldd	r30, Y+33	; 0x21
    196c:	fa a1       	ldd	r31, Y+34	; 0x22
    196e:	e0 0f       	add	r30, r16
    1970:	f1 1f       	adc	r31, r17
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	1d 8a       	std	Y+21, r1	; 0x15
    1978:	1e 8a       	std	Y+22, r1	; 0x16
    197a:	1f 8a       	std	Y+23, r1	; 0x17
    197c:	18 8e       	std	Y+24, r1	; 0x18
    197e:	40 e0       	ldi	r20, 0x00	; 0
    1980:	50 e0       	ldi	r21, 0x00	; 0
    1982:	ba 01       	movw	r22, r20
    1984:	81 91       	ld	r24, Z+
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	02 2e       	mov	r0, r18
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xa2a>
    198c:	88 0f       	add	r24, r24
    198e:	99 1f       	adc	r25, r25
    1990:	0a 94       	dec	r0
    1992:	e2 f7       	brpl	.-8      	; 0x198c <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xa26>
    1994:	09 2e       	mov	r0, r25
    1996:	00 0c       	add	r0, r0
    1998:	aa 0b       	sbc	r26, r26
    199a:	bb 0b       	sbc	r27, r27
    199c:	48 2b       	or	r20, r24
    199e:	59 2b       	or	r21, r25
    19a0:	6a 2b       	or	r22, r26
    19a2:	7b 2b       	or	r23, r27
    19a4:	28 5f       	subi	r18, 0xF8	; 248
    19a6:	3f 4f       	sbci	r19, 0xFF	; 255
    19a8:	20 32       	cpi	r18, 0x20	; 32
    19aa:	31 05       	cpc	r19, r1
    19ac:	59 f7       	brne	.-42     	; 0x1984 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xa1e>
    19ae:	4d 8b       	std	Y+21, r20	; 0x15
    19b0:	5e 8b       	std	Y+22, r21	; 0x16
    19b2:	6f 8b       	std	Y+23, r22	; 0x17
    19b4:	78 8f       	std	Y+24, r23	; 0x18
    19b6:	d8 01       	movw	r26, r16
    19b8:	14 96       	adiw	r26, 0x04	; 4
    19ba:	8d 01       	movw	r16, r26
    19bc:	0b 2e       	mov	r0, r27
    19be:	00 0c       	add	r0, r0
    19c0:	22 0b       	sbc	r18, r18
    19c2:	33 0b       	sbc	r19, r19
    19c4:	04 0f       	add	r16, r20
    19c6:	15 1f       	adc	r17, r21
    19c8:	26 1f       	adc	r18, r22
    19ca:	37 1f       	adc	r19, r23
    19cc:	ad 01       	movw	r20, r26
    19ce:	60 e0       	ldi	r22, 0x00	; 0
    19d0:	70 e0       	ldi	r23, 0x00	; 0
    19d2:	40 17       	cp	r20, r16
    19d4:	51 07       	cpc	r21, r17
    19d6:	62 07       	cpc	r22, r18
    19d8:	73 07       	cpc	r23, r19
    19da:	98 f4       	brcc	.+38     	; 0x1a02 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xa9c>
    19dc:	ed a5       	ldd	r30, Y+45	; 0x2d
    19de:	fe a5       	ldd	r31, Y+46	; 0x2e
    19e0:	33 96       	adiw	r30, 0x03	; 3
    19e2:	49 a1       	ldd	r20, Y+33	; 0x21
    19e4:	5a a1       	ldd	r21, Y+34	; 0x22
    19e6:	e4 0f       	add	r30, r20
    19e8:	f5 1f       	adc	r31, r21
    19ea:	cd 01       	movw	r24, r26
    19ec:	41 81       	ldd	r20, Z+1	; 0x01
    19ee:	41 93       	st	Z+, r20
    19f0:	01 96       	adiw	r24, 0x01	; 1
    19f2:	ac 01       	movw	r20, r24
    19f4:	60 e0       	ldi	r22, 0x00	; 0
    19f6:	70 e0       	ldi	r23, 0x00	; 0
    19f8:	40 17       	cp	r20, r16
    19fa:	51 07       	cpc	r21, r17
    19fc:	62 07       	cpc	r22, r18
    19fe:	73 07       	cpc	r23, r19
    1a00:	a8 f3       	brcs	.-22     	; 0x19ec <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xa86>
    1a02:	0d 89       	ldd	r16, Y+21	; 0x15
    1a04:	1e 89       	ldd	r17, Y+22	; 0x16
    1a06:	0a 0f       	add	r16, r26
    1a08:	1b 1f       	adc	r17, r27
    1a0a:	e9 a1       	ldd	r30, Y+33	; 0x21
    1a0c:	fa a1       	ldd	r31, Y+34	; 0x22
    1a0e:	e0 0f       	add	r30, r16
    1a10:	f1 1f       	adc	r31, r17
    1a12:	31 97       	sbiw	r30, 0x01	; 1
    1a14:	10 82       	st	Z, r1
    1a16:	11 97       	sbiw	r26, 0x01	; 1
    1a18:	69 a1       	ldd	r22, Y+33	; 0x21
    1a1a:	7a a1       	ldd	r23, Y+34	; 0x22
    1a1c:	a6 0f       	add	r26, r22
    1a1e:	b7 1f       	adc	r27, r23
    1a20:	ef 85       	ldd	r30, Y+15	; 0x0f
    1a22:	f8 89       	ldd	r31, Y+16	; 0x10
    1a24:	b3 8f       	std	Z+27, r27	; 0x1b
    1a26:	a2 8f       	std	Z+26, r26	; 0x1a
    1a28:	04 8c       	ldd	r0, Z+28	; 0x1c
    1a2a:	f5 8d       	ldd	r31, Z+29	; 0x1d
    1a2c:	e0 2d       	mov	r30, r0
    1a2e:	29 a5       	ldd	r18, Y+41	; 0x29
    1a30:	3a a5       	ldd	r19, Y+42	; 0x2a
    1a32:	e2 0f       	add	r30, r18
    1a34:	f3 1f       	adc	r31, r19
    1a36:	ad 8d       	ldd	r26, Y+29	; 0x1d
    1a38:	be 8d       	ldd	r27, Y+30	; 0x1e
    1a3a:	8d 91       	ld	r24, X+
    1a3c:	9c 91       	ld	r25, X
    1a3e:	91 83       	std	Z+1, r25	; 0x01
    1a40:	80 83       	st	Z, r24
    1a42:	2d a1       	ldd	r18, Y+37	; 0x25
    1a44:	3e a1       	ldd	r19, Y+38	; 0x26
    1a46:	4f a1       	ldd	r20, Y+39	; 0x27
    1a48:	58 a5       	ldd	r21, Y+40	; 0x28
    1a4a:	2f 5f       	subi	r18, 0xFF	; 255
    1a4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a4e:	4f 4f       	sbci	r20, 0xFF	; 255
    1a50:	5f 4f       	sbci	r21, 0xFF	; 255
    1a52:	2d a3       	std	Y+37, r18	; 0x25
    1a54:	3e a3       	std	Y+38, r19	; 0x26
    1a56:	4f a3       	std	Y+39, r20	; 0x27
    1a58:	58 a7       	std	Y+40, r21	; 0x28
    1a5a:	49 a5       	ldd	r20, Y+41	; 0x29
    1a5c:	5a a5       	ldd	r21, Y+42	; 0x2a
    1a5e:	4e 5f       	subi	r20, 0xFE	; 254
    1a60:	5f 4f       	sbci	r21, 0xFF	; 255
    1a62:	5a a7       	std	Y+42, r21	; 0x2a
    1a64:	49 a7       	std	Y+41, r20	; 0x29
    1a66:	ef 85       	ldd	r30, Y+15	; 0x0f
    1a68:	f8 89       	ldd	r31, Y+16	; 0x10
    1a6a:	86 89       	ldd	r24, Z+22	; 0x16
    1a6c:	97 89       	ldd	r25, Z+23	; 0x17
    1a6e:	a0 8d       	ldd	r26, Z+24	; 0x18
    1a70:	b1 8d       	ldd	r27, Z+25	; 0x19
    1a72:	2d a1       	ldd	r18, Y+37	; 0x25
    1a74:	3e a1       	ldd	r19, Y+38	; 0x26
    1a76:	4f a1       	ldd	r20, Y+39	; 0x27
    1a78:	58 a5       	ldd	r21, Y+40	; 0x28
    1a7a:	28 17       	cp	r18, r24
    1a7c:	39 07       	cpc	r19, r25
    1a7e:	4a 07       	cpc	r20, r26
    1a80:	5b 07       	cpc	r21, r27
    1a82:	08 f4       	brcc	.+2      	; 0x1a86 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xb20>
    1a84:	70 cf       	rjmp	.-288    	; 0x1966 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xa00>
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	af 8d       	ldd	r26, Y+31	; 0x1f
    1a8a:	b8 a1       	ldd	r27, Y+32	; 0x20
    1a8c:	8c 93       	st	X, r24
    1a8e:	e8 ca       	rjmp	.-2608   	; 0x1060 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfa>
    1a90:	8b 30       	cpi	r24, 0x0B	; 11
    1a92:	91 05       	cpc	r25, r1
    1a94:	21 f4       	brne	.+8      	; 0x1a9e <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xb38>
    1a96:	e9 89       	ldd	r30, Y+17	; 0x11
    1a98:	fa 89       	ldd	r31, Y+18	; 0x12
    1a9a:	10 82       	st	Z, r1
    1a9c:	e1 ca       	rjmp	.-2622   	; 0x1060 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfa>
    1a9e:	fc 01       	movw	r30, r24
    1aa0:	e4 56       	subi	r30, 0x64	; 100
    1aa2:	f1 09       	sbc	r31, r1
    1aa4:	ee 0f       	add	r30, r30
    1aa6:	ff 1f       	adc	r31, r31
    1aa8:	e2 0d       	add	r30, r2
    1aaa:	f3 1d       	adc	r31, r3
    1aac:	eb 5b       	subi	r30, 0xBB	; 187
    1aae:	fb 4f       	sbci	r31, 0xFB	; 251
    1ab0:	80 81       	ld	r24, Z
    1ab2:	91 81       	ldd	r25, Z+1	; 0x01
    1ab4:	00 97       	sbiw	r24, 0x00	; 0
    1ab6:	09 f4       	brne	.+2      	; 0x1aba <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xb54>
    1ab8:	d3 ca       	rjmp	.-2650   	; 0x1060 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfa>
    1aba:	dc 01       	movw	r26, r24
    1abc:	ed 91       	ld	r30, X+
    1abe:	fc 91       	ld	r31, X
    1ac0:	01 90       	ld	r0, Z+
    1ac2:	f0 81       	ld	r31, Z
    1ac4:	e0 2d       	mov	r30, r0
    1ac6:	b1 01       	movw	r22, r2
    1ac8:	6d 5e       	subi	r22, 0xED	; 237
    1aca:	7f 4f       	sbci	r23, 0xFF	; 255
    1acc:	09 95       	icall
    1ace:	c8 ca       	rjmp	.-2672   	; 0x1060 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfa>
    1ad0:	f1 01       	movw	r30, r2
    1ad2:	ef 57       	subi	r30, 0x7F	; 127
    1ad4:	fb 4f       	sbci	r31, 0xFB	; 251
    1ad6:	80 81       	ld	r24, Z
    1ad8:	88 23       	and	r24, r24
    1ada:	f1 f1       	breq	.+124    	; 0x1b58 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xbf2>
    1adc:	31 96       	adiw	r30, 0x01	; 1
    1ade:	80 81       	ld	r24, Z
    1ae0:	91 81       	ldd	r25, Z+1	; 0x01
    1ae2:	a2 81       	ldd	r26, Z+2	; 0x02
    1ae4:	b3 81       	ldd	r27, Z+3	; 0x03
    1ae6:	53 01       	movw	r10, r6
    1ae8:	42 01       	movw	r8, r4
    1aea:	88 1a       	sub	r8, r24
    1aec:	99 0a       	sbc	r9, r25
    1aee:	aa 0a       	sbc	r10, r26
    1af0:	bb 0a       	sbc	r11, r27
    1af2:	05 ec       	ldi	r16, 0xC5	; 197
    1af4:	80 16       	cp	r8, r16
    1af6:	09 e0       	ldi	r16, 0x09	; 9
    1af8:	90 06       	cpc	r9, r16
    1afa:	a1 04       	cpc	r10, r1
    1afc:	b1 04       	cpc	r11, r1
    1afe:	78 f1       	brcs	.+94     	; 0x1b5e <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xbf8>
    1b00:	8c ea       	ldi	r24, 0xAC	; 172
    1b02:	91 e0       	ldi	r25, 0x01	; 1
    1b04:	9a 83       	std	Y+2, r25	; 0x02
    1b06:	89 83       	std	Y+1, r24	; 0x01
    1b08:	1b 82       	std	Y+3, r1	; 0x03
    1b0a:	1c 82       	std	Y+4, r1	; 0x04
    1b0c:	1d 82       	std	Y+5, r1	; 0x05
    1b0e:	1e 82       	std	Y+6, r1	; 0x06
    1b10:	1f 82       	std	Y+7, r1	; 0x07
    1b12:	18 86       	std	Y+8, r1	; 0x08
    1b14:	19 86       	std	Y+9, r1	; 0x09
    1b16:	1a 86       	std	Y+10, r1	; 0x0a
    1b18:	d1 01       	movw	r26, r2
    1b1a:	ed 91       	ld	r30, X+
    1b1c:	fc 91       	ld	r31, X
    1b1e:	01 90       	ld	r0, Z+
    1b20:	f0 81       	ld	r31, Z
    1b22:	e0 2d       	mov	r30, r0
    1b24:	ae 01       	movw	r20, r28
    1b26:	4f 5f       	subi	r20, 0xFF	; 255
    1b28:	5f 4f       	sbci	r21, 0xFF	; 255
    1b2a:	6a e0       	ldi	r22, 0x0A	; 10
    1b2c:	70 e0       	ldi	r23, 0x00	; 0
    1b2e:	c1 01       	movw	r24, r2
    1b30:	09 95       	icall
    1b32:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <avr_time_now>
    1b36:	f1 01       	movw	r30, r2
    1b38:	63 83       	std	Z+3, r22	; 0x03
    1b3a:	74 83       	std	Z+4, r23	; 0x04
    1b3c:	85 83       	std	Z+5, r24	; 0x05
    1b3e:	96 83       	std	Z+6, r25	; 0x06
    1b40:	ee 57       	subi	r30, 0x7E	; 126
    1b42:	fb 4f       	sbci	r31, 0xFB	; 251
    1b44:	40 82       	st	Z, r4
    1b46:	51 82       	std	Z+1, r5	; 0x01
    1b48:	62 82       	std	Z+2, r6	; 0x02
    1b4a:	73 82       	std	Z+3, r7	; 0x03
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	08 c0       	rjmp	.+16     	; 0x1b62 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xbfc>
    1b52:	8e ef       	ldi	r24, 0xFE	; 254
    1b54:	9f ef       	ldi	r25, 0xFF	; 255
    1b56:	05 c0       	rjmp	.+10     	; 0x1b62 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xbfc>
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <_ZN3ros11NodeHandle_I16Atmega32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xbfc>
    1b5e:	80 e0       	ldi	r24, 0x00	; 0
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	e2 96       	adiw	r28, 0x32	; 50
    1b64:	0f b6       	in	r0, 0x3f	; 63
    1b66:	f8 94       	cli
    1b68:	de bf       	out	0x3e, r29	; 62
    1b6a:	0f be       	out	0x3f, r0	; 63
    1b6c:	cd bf       	out	0x3d, r28	; 61
    1b6e:	df 91       	pop	r29
    1b70:	cf 91       	pop	r28
    1b72:	1f 91       	pop	r17
    1b74:	0f 91       	pop	r16
    1b76:	ff 90       	pop	r15
    1b78:	ef 90       	pop	r14
    1b7a:	df 90       	pop	r13
    1b7c:	cf 90       	pop	r12
    1b7e:	bf 90       	pop	r11
    1b80:	af 90       	pop	r10
    1b82:	9f 90       	pop	r9
    1b84:	8f 90       	pop	r8
    1b86:	7f 90       	pop	r7
    1b88:	6f 90       	pop	r6
    1b8a:	5f 90       	pop	r5
    1b8c:	4f 90       	pop	r4
    1b8e:	3f 90       	pop	r3
    1b90:	2f 90       	pop	r2
    1b92:	08 95       	ret

00001b94 <main>:
ros::Publisher chatter("steer_angle", &angle_msg);
ros::Subscriber<std_msgs::Int32> sub("MPC_SteerAngle", &AngleCallback );


int main()
{
    1b94:	cf 93       	push	r28
    1b96:	df 93       	push	r29
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
    1b9c:	6e 97       	sbiw	r28, 0x1e	; 30
    1b9e:	0f b6       	in	r0, 0x3f	; 63
    1ba0:	f8 94       	cli
    1ba2:	de bf       	out	0x3e, r29	; 62
    1ba4:	0f be       	out	0x3f, r0	; 63
    1ba6:	cd bf       	out	0x3d, r28	; 61

	DIO_VidSetPinDirection(PORTD, PIN4, OUTPUT);
    1ba8:	4f ef       	ldi	r20, 0xFF	; 255
    1baa:	64 e0       	ldi	r22, 0x04	; 4
    1bac:	83 e0       	ldi	r24, 0x03	; 3
    1bae:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(PORTD, PIN5, OUTPUT);
    1bb2:	4f ef       	ldi	r20, 0xFF	; 255
    1bb4:	65 e0       	ldi	r22, 0x05	; 5
    1bb6:	83 e0       	ldi	r24, 0x03	; 3
    1bb8:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(PORTD, PIN6, OUTPUT);
    1bbc:	4f ef       	ldi	r20, 0xFF	; 255
    1bbe:	66 e0       	ldi	r22, 0x06	; 6
    1bc0:	83 e0       	ldi	r24, 0x03	; 3
    1bc2:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_VidSetPinDirection>




	TIM0_OVF_Init(TIMER_PRESCALER_1024, Init_ticks);
    1bc6:	6c e6       	ldi	r22, 0x6C	; 108
    1bc8:	85 e0       	ldi	r24, 0x05	; 5
    1bca:	0e 94 25 19 	call	0x324a	; 0x324a <TIM0_OVF_Init>
	FN();
    1bce:	0e 94 31 18 	call	0x3062	; 0x3062 <FN>

	/* both interrupts on rising edge (3) */
	INT0_Init(Logical_Change);
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	0e 94 36 18 	call	0x306c	; 0x306c <INT0_Init>
	INT1_Init(Logical_Change);
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	0e 94 5e 18 	call	0x30bc	; 0x30bc <INT1_Init>
	
	// EEPROM_Write(EEPROM_ADDRESS,0);
		
	if(EEPROM_Read(EEPROM_ADDRESS) > 50)
    1bde:	80 e0       	ldi	r24, 0x00	; 0
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	0e 94 2a 18 	call	0x3054	; 0x3054 <EEPROM_Read>
    1be6:	83 33       	cpi	r24, 0x33	; 51
    1be8:	38 f0       	brcs	.+14     	; 0x1bf8 <main+0x64>
	{
		init_theta = EEPROM_Read(EEPROM_ADDRESS) - 256;
    1bea:	80 e0       	ldi	r24, 0x00	; 0
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	0e 94 2a 18 	call	0x3054	; 0x3054 <EEPROM_Read>
    1bf2:	80 93 ea 06 	sts	0x06EA, r24	; 0x8006ea <init_theta>
    1bf6:	06 c0       	rjmp	.+12     	; 0x1c04 <main+0x70>
	}
	else
	{
		init_theta = EEPROM_Read(EEPROM_ADDRESS);
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	0e 94 2a 18 	call	0x3054	; 0x3054 <EEPROM_Read>
    1c00:	80 93 ea 06 	sts	0x06EA, r24	; 0x8006ea <init_theta>
				"out __SREG__,__tmp_reg__"   "\n\t"
				: [TEMPREG] "=d" (temp_reg)
				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
				: "r0"
		);
    1c04:	0f b6       	in	r0, 0x3f	; 63
    1c06:	f8 94       	cli
    1c08:	a8 95       	wdr
    1c0a:	81 b5       	in	r24, 0x21	; 33
    1c0c:	88 61       	ori	r24, 0x18	; 24
    1c0e:	81 bd       	out	0x21, r24	; 33
    1c10:	11 bc       	out	0x21, r1	; 33
    1c12:	0f be       	out	0x3f, r0	; 63

	// Initialize the AVR
	void init()
	{
		wdt_disable();
		avr_time_init();
    1c14:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <avr_time_init>
		avr_uart_init();
    1c18:	0e 94 20 17 	call	0x2e40	; 0x2e40 <avr_uart_init>
		sei();
    1c1c:	78 94       	sei

  /* Start serial, initialize buffers */
  void initNode()
  {
    hardware_.init();
    mode_ = 0;
    1c1e:	10 92 ae 06 	sts	0x06AE, r1	; 0x8006ae <nh+0x478>
    1c22:	10 92 ad 06 	sts	0x06AD, r1	; 0x8006ad <nh+0x477>
    bytes_ = 0;
    1c26:	10 92 b0 06 	sts	0x06B0, r1	; 0x8006b0 <nh+0x47a>
    1c2a:	10 92 af 06 	sts	0x06AF, r1	; 0x8006af <nh+0x479>
    index_ = 0;
    1c2e:	10 92 b4 06 	sts	0x06B4, r1	; 0x8006b4 <nh+0x47e>
    1c32:	10 92 b3 06 	sts	0x06B3, r1	; 0x8006b3 <nh+0x47d>
    topic_ = 0;
    1c36:	10 92 b2 06 	sts	0x06B2, r1	; 0x8006b2 <nh+0x47c>
    1c3a:	10 92 b1 06 	sts	0x06B1, r1	; 0x8006b1 <nh+0x47b>
  /* Register a new publisher */
  bool advertise(Publisher & p)
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
    {
      if (publishers[i] == 0) // empty slot
    1c3e:	80 91 49 06 	lds	r24, 0x0649	; 0x800649 <nh+0x413>
    1c42:	90 91 4a 06 	lds	r25, 0x064A	; 0x80064a <nh+0x414>
    1c46:	89 2b       	or	r24, r25
    1c48:	49 f0       	breq	.+18     	; 0x1c5c <main+0xc8>
    1c4a:	eb e4       	ldi	r30, 0x4B	; 75
    1c4c:	f6 e0       	ldi	r31, 0x06	; 6
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    {
      if (publishers[i] == 0) // empty slot
    1c52:	21 91       	ld	r18, Z+
    1c54:	31 91       	ld	r19, Z+
    1c56:	23 2b       	or	r18, r19
    1c58:	a9 f4       	brne	.+42     	; 0x1c84 <main+0xf0>
    1c5a:	02 c0       	rjmp	.+4      	; 0x1c60 <main+0xcc>
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    {
      if (publishers[i] == 0) // empty slot
      {
        publishers[i] = &p;
    1c60:	dc 01       	movw	r26, r24
    1c62:	aa 0f       	add	r26, r26
    1c64:	bb 1f       	adc	r27, r27
    1c66:	a7 5b       	subi	r26, 0xB7	; 183
    1c68:	b9 4f       	sbci	r27, 0xF9	; 249
    1c6a:	e6 e2       	ldi	r30, 0x26	; 38
    1c6c:	f2 e0       	ldi	r31, 0x02	; 2
    1c6e:	ed 93       	st	X+, r30
    1c70:	fc 93       	st	X, r31
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
    1c72:	83 58       	subi	r24, 0x83	; 131
    1c74:	9f 4f       	sbci	r25, 0xFF	; 255
    1c76:	95 83       	std	Z+5, r25	; 0x05
    1c78:	84 83       	std	Z+4, r24	; 0x04
        p.nh_ = this;
    1c7a:	86 e3       	ldi	r24, 0x36	; 54
    1c7c:	92 e0       	ldi	r25, 0x02	; 2
    1c7e:	97 83       	std	Z+7, r25	; 0x07
    1c80:	86 83       	std	Z+6, r24	; 0x06
    1c82:	04 c0       	rjmp	.+8      	; 0x1c8c <main+0xf8>
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
    1c84:	01 96       	adiw	r24, 0x01	; 1
    1c86:	89 31       	cpi	r24, 0x19	; 25
    1c88:	91 05       	cpc	r25, r1
    1c8a:	19 f7       	brne	.-58     	; 0x1c52 <main+0xbe>
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
    {
      if (subscribers[i] == 0) // empty slot
    1c8c:	80 91 7b 06 	lds	r24, 0x067B	; 0x80067b <nh+0x445>
    1c90:	90 91 7c 06 	lds	r25, 0x067C	; 0x80067c <nh+0x446>
    1c94:	89 2b       	or	r24, r25
    1c96:	49 f0       	breq	.+18     	; 0x1caa <main+0x116>
    1c98:	ed e7       	ldi	r30, 0x7D	; 125
    1c9a:	f6 e0       	ldi	r31, 0x06	; 6

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    {
      if (subscribers[i] == 0) // empty slot
    1ca0:	21 91       	ld	r18, Z+
    1ca2:	31 91       	ld	r19, Z+
    1ca4:	23 2b       	or	r18, r19
    1ca6:	b9 f4       	brne	.+46     	; 0x1cd6 <main+0x142>
    1ca8:	02 c0       	rjmp	.+4      	; 0x1cae <main+0x11a>

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    {
      if (subscribers[i] == 0) // empty slot
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
    1cae:	fc 01       	movw	r30, r24
    1cb0:	ee 0f       	add	r30, r30
    1cb2:	ff 1f       	adc	r31, r31
    1cb4:	e5 58       	subi	r30, 0x85	; 133
    1cb6:	f9 4f       	sbci	r31, 0xF9	; 249
    1cb8:	a6 e1       	ldi	r26, 0x16	; 22
    1cba:	b2 e0       	ldi	r27, 0x02	; 2
    1cbc:	b1 83       	std	Z+1, r27	; 0x01
    1cbe:	a0 83       	st	Z, r26
        s.id_ = i + 100;
    1cc0:	8c 59       	subi	r24, 0x9C	; 156
    1cc2:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc4:	13 96       	adiw	r26, 0x03	; 3
    1cc6:	9c 93       	st	X, r25
    1cc8:	8e 93       	st	-X, r24
    1cca:	12 97       	sbiw	r26, 0x02	; 2

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
    1ccc:	1f 86       	std	Y+15, r1	; 0x0f
    1cce:	18 8a       	std	Y+16, r1	; 0x10
    1cd0:	19 8a       	std	Y+17, r1	; 0x11
    1cd2:	1a 8a       	std	Y+18, r1	; 0x12
    1cd4:	05 c0       	rjmp	.+10     	; 0x1ce0 <main+0x14c>
    1cd6:	01 96       	adiw	r24, 0x01	; 1
    1cd8:	89 31       	cpi	r24, 0x19	; 25
    1cda:	91 05       	cpc	r25, r1
    1cdc:	09 f7       	brne	.-62     	; 0x1ca0 <main+0x10c>
    1cde:	f6 cf       	rjmp	.-20     	; 0x1ccc <main+0x138>


  while(1)
  {
    // Send the message every second
    if(avr_time_now() - lasttime > 100)
    1ce0:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <avr_time_now>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	4f 84       	ldd	r4, Y+15	; 0x0f
    1cea:	58 88       	ldd	r5, Y+16	; 0x10
    1cec:	69 88       	ldd	r6, Y+17	; 0x11
    1cee:	7a 88       	ldd	r7, Y+18	; 0x12
    1cf0:	84 19       	sub	r24, r4
    1cf2:	95 09       	sbc	r25, r5
    1cf4:	a6 09       	sbc	r26, r6
    1cf6:	b7 09       	sbc	r27, r7
    1cf8:	85 36       	cpi	r24, 0x65	; 101
    1cfa:	91 05       	cpc	r25, r1
    1cfc:	a1 05       	cpc	r26, r1
    1cfe:	b1 05       	cpc	r27, r1
    1d00:	20 f1       	brcs	.+72     	; 0x1d4a <main+0x1b6>
    {
		angle_msg.data = theta;
    1d02:	80 91 ee 06 	lds	r24, 0x06EE	; 0x8006ee <theta>
    1d06:	08 2e       	mov	r0, r24
    1d08:	00 0c       	add	r0, r0
    1d0a:	99 0b       	sbc	r25, r25
    1d0c:	aa 0b       	sbc	r26, r26
    1d0e:	bb 0b       	sbc	r27, r27
    1d10:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <angle_msg+0x2>
    1d14:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <angle_msg+0x3>
    1d18:	a0 93 34 02 	sts	0x0234, r26	; 0x800234 <angle_msg+0x4>
    1d1c:	b0 93 35 02 	sts	0x0235, r27	; 0x800235 <angle_msg+0x5>
    msg_(msg),
    endpoint_(endpoint) {};

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
    1d20:	e6 e2       	ldi	r30, 0x26	; 38
    1d22:	f2 e0       	ldi	r31, 0x02	; 2
    1d24:	86 81       	ldd	r24, Z+6	; 0x06
    1d26:	97 81       	ldd	r25, Z+7	; 0x07
    1d28:	64 81       	ldd	r22, Z+4	; 0x04
    1d2a:	75 81       	ldd	r23, Z+5	; 0x05
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	ed 91       	ld	r30, X+
    1d30:	fc 91       	ld	r31, X
    1d32:	01 90       	ld	r0, Z+
    1d34:	f0 81       	ld	r31, Z
    1d36:	e0 2d       	mov	r30, r0
    1d38:	40 e3       	ldi	r20, 0x30	; 48
    1d3a:	52 e0       	ldi	r21, 0x02	; 2
    1d3c:	09 95       	icall
		chatter.publish(&angle_msg);
	    lasttime = avr_time_now();
    1d3e:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <avr_time_now>
    1d42:	6f 87       	std	Y+15, r22	; 0x0f
    1d44:	78 8b       	std	Y+16, r23	; 0x10
    1d46:	89 8b       	std	Y+17, r24	; 0x11
    1d48:	9a 8b       	std	Y+18, r25	; 0x12
    }
	
	if (eeprom_count == 10)
    1d4a:	80 91 eb 06 	lds	r24, 0x06EB	; 0x8006eb <eeprom_count>
    1d4e:	8a 30       	cpi	r24, 0x0A	; 10
    1d50:	91 f4       	brne	.+36     	; 0x1d76 <main+0x1e2>
	{
		if (theta != Last_theta)
    1d52:	90 91 ee 06 	lds	r25, 0x06EE	; 0x8006ee <theta>
    1d56:	80 91 e9 06 	lds	r24, 0x06E9	; 0x8006e9 <Last_theta>
    1d5a:	98 17       	cp	r25, r24
    1d5c:	31 f0       	breq	.+12     	; 0x1d6a <main+0x1d6>
		{
			EEPROM_Write(EEPROM_ADDRESS,theta);
    1d5e:	60 91 ee 06 	lds	r22, 0x06EE	; 0x8006ee <theta>
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	0e 94 22 18 	call	0x3044	; 0x3044 <EEPROM_Write>
		}
		Last_theta = theta ;
    1d6a:	80 91 ee 06 	lds	r24, 0x06EE	; 0x8006ee <theta>
    1d6e:	80 93 e9 06 	sts	0x06E9, r24	; 0x8006e9 <Last_theta>
		eeprom_count = 0 ;
    1d72:	10 92 eb 06 	sts	0x06EB, r1	; 0x8006eb <eeprom_count>


	// Returns milliseconds since start of program
	unsigned long time()
	{
		return avr_time_now();
    1d76:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <avr_time_now>
    1d7a:	6b 01       	movw	r12, r22
    1d7c:	7c 01       	movw	r14, r24

  virtual int spinOnce()
  {
    /* restart if timed out */
    uint32_t c_time = hardware_.time();
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
    1d7e:	80 91 bc 06 	lds	r24, 0x06BC	; 0x8006bc <nh+0x486>
    1d82:	90 91 bd 06 	lds	r25, 0x06BD	; 0x8006bd <nh+0x487>
    1d86:	a0 91 be 06 	lds	r26, 0x06BE	; 0x8006be <nh+0x488>
    1d8a:	b0 91 bf 06 	lds	r27, 0x06BF	; 0x8006bf <nh+0x489>
    1d8e:	26 01       	movw	r4, r12
    1d90:	37 01       	movw	r6, r14
    1d92:	48 1a       	sub	r4, r24
    1d94:	59 0a       	sbc	r5, r25
    1d96:	6a 0a       	sbc	r6, r26
    1d98:	7b 0a       	sbc	r7, r27
    1d9a:	29 ef       	ldi	r18, 0xF9	; 249
    1d9c:	42 16       	cp	r4, r18
    1d9e:	2a e2       	ldi	r18, 0x2A	; 42
    1da0:	52 06       	cpc	r5, r18
    1da2:	61 04       	cpc	r6, r1
    1da4:	71 04       	cpc	r7, r1
    1da6:	10 f0       	brcs	.+4      	; 0x1dac <main+0x218>
    {
      configured_ = false;
    1da8:	10 92 b7 06 	sts	0x06B7, r1	; 0x8006b7 <nh+0x481>
    }

    /* reset if message has timed out */
    if (mode_ != MODE_FIRST_FF)
    1dac:	80 91 ad 06 	lds	r24, 0x06AD	; 0x8006ad <nh+0x477>
    1db0:	90 91 ae 06 	lds	r25, 0x06AE	; 0x8006ae <nh+0x478>
    1db4:	89 2b       	or	r24, r25
    1db6:	89 f0       	breq	.+34     	; 0x1dda <main+0x246>
    {
      if (c_time > last_msg_timeout_time)
    1db8:	80 91 c0 06 	lds	r24, 0x06C0	; 0x8006c0 <nh+0x48a>
    1dbc:	90 91 c1 06 	lds	r25, 0x06C1	; 0x8006c1 <nh+0x48b>
    1dc0:	a0 91 c2 06 	lds	r26, 0x06C2	; 0x8006c2 <nh+0x48c>
    1dc4:	b0 91 c3 06 	lds	r27, 0x06C3	; 0x8006c3 <nh+0x48d>
    1dc8:	8c 15       	cp	r24, r12
    1dca:	9d 05       	cpc	r25, r13
    1dcc:	ae 05       	cpc	r26, r14
    1dce:	bf 05       	cpc	r27, r15
    1dd0:	20 f4       	brcc	.+8      	; 0x1dda <main+0x246>
      {
        mode_ = MODE_FIRST_FF;
    1dd2:	10 92 ae 06 	sts	0x06AE, r1	; 0x8006ae <nh+0x478>
    1dd6:	10 92 ad 06 	sts	0x06AD, r1	; 0x8006ad <nh+0x477>
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->floats_length);
      if(floats_lengthT > floats_length)
    1dda:	0f 2e       	mov	r0, r31
    1ddc:	f1 ed       	ldi	r31, 0xD1	; 209
    1dde:	2f 2e       	mov	r2, r31
    1de0:	f6 e0       	ldi	r31, 0x06	; 6
    1de2:	3f 2e       	mov	r3, r31
    1de4:	f0 2d       	mov	r31, r0
      else if (mode_ == MODE_FIRST_FF)
      {
        if (data == 0xff)
        {
          mode_++;
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
    1de6:	46 01       	movw	r8, r12
    1de8:	57 01       	movw	r10, r14
    1dea:	34 e1       	ldi	r19, 0x14	; 20
    1dec:	83 0e       	add	r8, r19
    1dee:	91 1c       	adc	r9, r1
    1df0:	a1 1c       	adc	r10, r1
    1df2:	b1 1c       	adc	r11, r1

    /* while available buffer, read data */
    while (true)
    {
      // If a timeout has been specified, check how long spinOnce has been running.
      if (spin_timeout_ > 0)
    1df4:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <nh+0xf>
    1df8:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <nh+0x10>
    1dfc:	a0 91 47 02 	lds	r26, 0x0247	; 0x800247 <nh+0x11>
    1e00:	b0 91 48 02 	lds	r27, 0x0248	; 0x800248 <nh+0x12>
    1e04:	89 2b       	or	r24, r25
    1e06:	8a 2b       	or	r24, r26
    1e08:	8b 2b       	or	r24, r27
    1e0a:	b1 f0       	breq	.+44     	; 0x1e38 <main+0x2a4>
    1e0c:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <avr_time_now>
      {
        // If the maximum processing timeout has been exceeded, exit with error.
        // The next spinOnce can continue where it left off, or optionally
        // based on the application in use, the hardware buffer could be flushed
        // and start fresh.
        if ((hardware_.time() - c_time) > spin_timeout_)
    1e10:	dc 01       	movw	r26, r24
    1e12:	cb 01       	movw	r24, r22
    1e14:	8c 19       	sub	r24, r12
    1e16:	9d 09       	sbc	r25, r13
    1e18:	ae 09       	sbc	r26, r14
    1e1a:	bf 09       	sbc	r27, r15
    1e1c:	00 91 45 02 	lds	r16, 0x0245	; 0x800245 <nh+0xf>
    1e20:	10 91 46 02 	lds	r17, 0x0246	; 0x800246 <nh+0x10>
    1e24:	20 91 47 02 	lds	r18, 0x0247	; 0x800247 <nh+0x11>
    1e28:	30 91 48 02 	lds	r19, 0x0248	; 0x800248 <nh+0x12>
    1e2c:	08 17       	cp	r16, r24
    1e2e:	19 07       	cpc	r17, r25
    1e30:	2a 07       	cpc	r18, r26
    1e32:	3b 07       	cpc	r19, r27
    1e34:	08 f4       	brcc	.+2      	; 0x1e38 <main+0x2a4>
    1e36:	54 cf       	rjmp	.-344    	; 0x1ce0 <main+0x14c>

	// Read a byte of data from ROS connection.
	// If no data, returns -1
	int read()
	{
		return avr_uart_receive_byte();
    1e38:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <avr_uart_receive_byte>
          // Exit the spin, processing timeout exceeded.
          return SPIN_TIMEOUT;
        }
      }
      int data = hardware_.read();
      if (data < 0)
    1e3c:	99 23       	and	r25, r25
    1e3e:	0c f4       	brge	.+2      	; 0x1e42 <main+0x2ae>
    1e40:	b6 c4       	rjmp	.+2412   	; 0x27ae <main+0xc1a>
        break;
      checksum_ += data;
    1e42:	e5 eb       	ldi	r30, 0xB5	; 181
    1e44:	f6 e0       	ldi	r31, 0x06	; 6
    1e46:	20 81       	ld	r18, Z
    1e48:	31 81       	ldd	r19, Z+1	; 0x01
    1e4a:	28 0f       	add	r18, r24
    1e4c:	39 1f       	adc	r19, r25
    1e4e:	31 83       	std	Z+1, r19	; 0x01
    1e50:	20 83       	st	Z, r18
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
    1e52:	40 91 ad 06 	lds	r20, 0x06AD	; 0x8006ad <nh+0x477>
    1e56:	50 91 ae 06 	lds	r21, 0x06AE	; 0x8006ae <nh+0x478>
    1e5a:	47 30       	cpi	r20, 0x07	; 7
    1e5c:	51 05       	cpc	r21, r1
    1e5e:	f1 f4       	brne	.+60     	; 0x1e9c <main+0x308>
      {
        message_in[index_++] = data;
    1e60:	e3 eb       	ldi	r30, 0xB3	; 179
    1e62:	f6 e0       	ldi	r31, 0x06	; 6
    1e64:	20 81       	ld	r18, Z
    1e66:	31 81       	ldd	r19, Z+1	; 0x01
    1e68:	a9 01       	movw	r20, r18
    1e6a:	4f 5f       	subi	r20, 0xFF	; 255
    1e6c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e6e:	51 83       	std	Z+1, r21	; 0x01
    1e70:	40 83       	st	Z, r20
    1e72:	f9 01       	movw	r30, r18
    1e74:	ea 5c       	subi	r30, 0xCA	; 202
    1e76:	fd 4f       	sbci	r31, 0xFD	; 253
    1e78:	83 8b       	std	Z+19, r24	; 0x13
        bytes_--;
    1e7a:	ef ea       	ldi	r30, 0xAF	; 175
    1e7c:	f6 e0       	ldi	r31, 0x06	; 6
    1e7e:	80 81       	ld	r24, Z
    1e80:	91 81       	ldd	r25, Z+1	; 0x01
    1e82:	01 97       	sbiw	r24, 0x01	; 1
    1e84:	91 83       	std	Z+1, r25	; 0x01
    1e86:	80 83       	st	Z, r24
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
    1e88:	89 2b       	or	r24, r25
    1e8a:	09 f0       	breq	.+2      	; 0x1e8e <main+0x2fa>
    1e8c:	b3 cf       	rjmp	.-154    	; 0x1df4 <main+0x260>
          mode_ = MODE_MSG_CHECKSUM;
    1e8e:	88 e0       	ldi	r24, 0x08	; 8
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	90 93 ae 06 	sts	0x06AE, r25	; 0x8006ae <nh+0x478>
    1e96:	80 93 ad 06 	sts	0x06AD, r24	; 0x8006ad <nh+0x477>
    1e9a:	ac cf       	rjmp	.-168    	; 0x1df4 <main+0x260>
      }
      else if (mode_ == MODE_FIRST_FF)
    1e9c:	41 15       	cp	r20, r1
    1e9e:	51 05       	cpc	r21, r1
    1ea0:	19 f5       	brne	.+70     	; 0x1ee8 <main+0x354>
      {
        if (data == 0xff)
    1ea2:	8f 3f       	cpi	r24, 0xFF	; 255
    1ea4:	91 05       	cpc	r25, r1
    1ea6:	79 f4       	brne	.+30     	; 0x1ec6 <main+0x332>
        {
          mode_++;
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	90 93 ae 06 	sts	0x06AE, r25	; 0x8006ae <nh+0x478>
    1eb0:	80 93 ad 06 	sts	0x06AD, r24	; 0x8006ad <nh+0x477>
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
    1eb4:	80 92 c0 06 	sts	0x06C0, r8	; 0x8006c0 <nh+0x48a>
    1eb8:	90 92 c1 06 	sts	0x06C1, r9	; 0x8006c1 <nh+0x48b>
    1ebc:	a0 92 c2 06 	sts	0x06C2, r10	; 0x8006c2 <nh+0x48c>
    1ec0:	b0 92 c3 06 	sts	0x06C3, r11	; 0x8006c3 <nh+0x48d>
    1ec4:	97 cf       	rjmp	.-210    	; 0x1df4 <main+0x260>


	// Returns milliseconds since start of program
	unsigned long time()
	{
		return avr_time_now();
    1ec6:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <avr_time_now>
        }
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
    1eca:	dc 01       	movw	r26, r24
    1ecc:	cb 01       	movw	r24, r22
    1ece:	8c 19       	sub	r24, r12
    1ed0:	9d 09       	sbc	r25, r13
    1ed2:	ae 09       	sbc	r26, r14
    1ed4:	bf 09       	sbc	r27, r15
    1ed6:	89 38       	cpi	r24, 0x89	; 137
    1ed8:	93 41       	sbci	r25, 0x13	; 19
    1eda:	a1 05       	cpc	r26, r1
    1edc:	b1 05       	cpc	r27, r1
    1ede:	08 f4       	brcc	.+2      	; 0x1ee2 <main+0x34e>
    1ee0:	89 cf       	rjmp	.-238    	; 0x1df4 <main+0x260>
        {
          /* We have been stuck in spinOnce too long, return error */
          configured_ = false;
    1ee2:	10 92 b7 06 	sts	0x06B7, r1	; 0x8006b7 <nh+0x481>
    1ee6:	fc ce       	rjmp	.-520    	; 0x1ce0 <main+0x14c>
          return SPIN_TIMEOUT;
        }
      }
      else if (mode_ == MODE_PROTOCOL_VER)
    1ee8:	41 30       	cpi	r20, 0x01	; 1
    1eea:	51 05       	cpc	r21, r1
    1eec:	a9 f5       	brne	.+106    	; 0x1f58 <main+0x3c4>
      {
        if (data == PROTOCOL_VER)
    1eee:	8e 3f       	cpi	r24, 0xFE	; 254
    1ef0:	91 05       	cpc	r25, r1
    1ef2:	39 f4       	brne	.+14     	; 0x1f02 <main+0x36e>
        {
          mode_++;
    1ef4:	82 e0       	ldi	r24, 0x02	; 2
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	90 93 ae 06 	sts	0x06AE, r25	; 0x8006ae <nh+0x478>
    1efc:	80 93 ad 06 	sts	0x06AD, r24	; 0x8006ad <nh+0x477>
    1f00:	79 cf       	rjmp	.-270    	; 0x1df4 <main+0x260>
        }
        else
        {
          mode_ = MODE_FIRST_FF;
    1f02:	10 92 ae 06 	sts	0x06AE, r1	; 0x8006ae <nh+0x478>
    1f06:	10 92 ad 06 	sts	0x06AD, r1	; 0x8006ad <nh+0x477>
          if (configured_ == false)
    1f0a:	80 91 b7 06 	lds	r24, 0x06B7	; 0x8006b7 <nh+0x481>
    1f0e:	81 11       	cpse	r24, r1
    1f10:	71 cf       	rjmp	.-286    	; 0x1df4 <main+0x260>
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
      data()
    1f12:	8c ea       	ldi	r24, 0xAC	; 172
    1f14:	91 e0       	ldi	r25, 0x01	; 1
    1f16:	9a 83       	std	Y+2, r25	; 0x02
    1f18:	89 83       	std	Y+1, r24	; 0x01
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
    1f1a:	1b 82       	std	Y+3, r1	; 0x03
    1f1c:	1c 82       	std	Y+4, r1	; 0x04
    1f1e:	1d 82       	std	Y+5, r1	; 0x05
    1f20:	1e 82       	std	Y+6, r1	; 0x06
    1f22:	1f 82       	std	Y+7, r1	; 0x07
    1f24:	18 86       	std	Y+8, r1	; 0x08
    1f26:	19 86       	std	Y+9, r1	; 0x09
    1f28:	1a 86       	std	Y+10, r1	; 0x0a
   */

  void requestSyncTime()
  {
    std_msgs::Time t;
    publish(TopicInfo::ID_TIME, &t);
    1f2a:	06 e3       	ldi	r16, 0x36	; 54
    1f2c:	12 e0       	ldi	r17, 0x02	; 2
    1f2e:	d8 01       	movw	r26, r16
    1f30:	ed 91       	ld	r30, X+
    1f32:	fc 91       	ld	r31, X
    1f34:	01 90       	ld	r0, Z+
    1f36:	f0 81       	ld	r31, Z
    1f38:	e0 2d       	mov	r30, r0
    1f3a:	ae 01       	movw	r20, r28
    1f3c:	4f 5f       	subi	r20, 0xFF	; 255
    1f3e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f40:	6a e0       	ldi	r22, 0x0A	; 10
    1f42:	70 e0       	ldi	r23, 0x00	; 0
    1f44:	c8 01       	movw	r24, r16
    1f46:	09 95       	icall
    1f48:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <avr_time_now>
    rt_time = hardware_.time();
    1f4c:	f8 01       	movw	r30, r16
    1f4e:	63 83       	std	Z+3, r22	; 0x03
    1f50:	74 83       	std	Z+4, r23	; 0x04
    1f52:	85 83       	std	Z+5, r24	; 0x05
    1f54:	96 83       	std	Z+6, r25	; 0x06
    1f56:	4e cf       	rjmp	.-356    	; 0x1df4 <main+0x260>
          mode_ = MODE_FIRST_FF;
          if (configured_ == false)
            requestSyncTime();  /* send a msg back showing our protocol version */
        }
      }
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
    1f58:	42 30       	cpi	r20, 0x02	; 2
    1f5a:	51 05       	cpc	r21, r1
    1f5c:	99 f4       	brne	.+38     	; 0x1f84 <main+0x3f0>
      {
        bytes_ = data;
    1f5e:	90 93 b0 06 	sts	0x06B0, r25	; 0x8006b0 <nh+0x47a>
    1f62:	80 93 af 06 	sts	0x06AF, r24	; 0x8006af <nh+0x479>
        index_ = 0;
    1f66:	10 92 b4 06 	sts	0x06B4, r1	; 0x8006b4 <nh+0x47e>
    1f6a:	10 92 b3 06 	sts	0x06B3, r1	; 0x8006b3 <nh+0x47d>
        mode_++;
    1f6e:	23 e0       	ldi	r18, 0x03	; 3
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	30 93 ae 06 	sts	0x06AE, r19	; 0x8006ae <nh+0x478>
    1f76:	20 93 ad 06 	sts	0x06AD, r18	; 0x8006ad <nh+0x477>
        checksum_ = data;               /* first byte for calculating size checksum */
    1f7a:	90 93 b6 06 	sts	0x06B6, r25	; 0x8006b6 <nh+0x480>
    1f7e:	80 93 b5 06 	sts	0x06B5, r24	; 0x8006b5 <nh+0x47f>
    1f82:	38 cf       	rjmp	.-400    	; 0x1df4 <main+0x260>
      }
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
    1f84:	43 30       	cpi	r20, 0x03	; 3
    1f86:	51 05       	cpc	r21, r1
    1f88:	89 f4       	brne	.+34     	; 0x1fac <main+0x418>
      {
        bytes_ += data << 8;
    1f8a:	ef ea       	ldi	r30, 0xAF	; 175
    1f8c:	f6 e0       	ldi	r31, 0x06	; 6
    1f8e:	98 2f       	mov	r25, r24
    1f90:	88 27       	eor	r24, r24
    1f92:	20 81       	ld	r18, Z
    1f94:	31 81       	ldd	r19, Z+1	; 0x01
    1f96:	82 0f       	add	r24, r18
    1f98:	93 1f       	adc	r25, r19
    1f9a:	91 83       	std	Z+1, r25	; 0x01
    1f9c:	80 83       	st	Z, r24
        mode_++;
    1f9e:	84 e0       	ldi	r24, 0x04	; 4
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	90 93 ae 06 	sts	0x06AE, r25	; 0x8006ae <nh+0x478>
    1fa6:	80 93 ad 06 	sts	0x06AD, r24	; 0x8006ad <nh+0x477>
    1faa:	24 cf       	rjmp	.-440    	; 0x1df4 <main+0x260>
      }
      else if (mode_ == MODE_SIZE_CHECKSUM)
    1fac:	44 30       	cpi	r20, 0x04	; 4
    1fae:	51 05       	cpc	r21, r1
    1fb0:	b9 f4       	brne	.+46     	; 0x1fe0 <main+0x44c>
      {
        if ((checksum_ % 256) == 255)
    1fb2:	30 78       	andi	r19, 0x80	; 128
    1fb4:	33 23       	and	r19, r19
    1fb6:	2c f4       	brge	.+10     	; 0x1fc2 <main+0x42e>
    1fb8:	21 50       	subi	r18, 0x01	; 1
    1fba:	31 09       	sbc	r19, r1
    1fbc:	3f 6f       	ori	r19, 0xFF	; 255
    1fbe:	2f 5f       	subi	r18, 0xFF	; 255
    1fc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1fc2:	2f 3f       	cpi	r18, 0xFF	; 255
    1fc4:	31 05       	cpc	r19, r1
    1fc6:	39 f4       	brne	.+14     	; 0x1fd6 <main+0x442>
          mode_++;
    1fc8:	85 e0       	ldi	r24, 0x05	; 5
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	90 93 ae 06 	sts	0x06AE, r25	; 0x8006ae <nh+0x478>
    1fd0:	80 93 ad 06 	sts	0x06AD, r24	; 0x8006ad <nh+0x477>
    1fd4:	0f cf       	rjmp	.-482    	; 0x1df4 <main+0x260>
        else
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
    1fd6:	10 92 ae 06 	sts	0x06AE, r1	; 0x8006ae <nh+0x478>
    1fda:	10 92 ad 06 	sts	0x06AD, r1	; 0x8006ad <nh+0x477>
    1fde:	0a cf       	rjmp	.-492    	; 0x1df4 <main+0x260>
      }
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
    1fe0:	45 30       	cpi	r20, 0x05	; 5
    1fe2:	51 05       	cpc	r21, r1
    1fe4:	79 f4       	brne	.+30     	; 0x2004 <main+0x470>
      {
        topic_ = data;
    1fe6:	90 93 b2 06 	sts	0x06B2, r25	; 0x8006b2 <nh+0x47c>
    1fea:	80 93 b1 06 	sts	0x06B1, r24	; 0x8006b1 <nh+0x47b>
        mode_++;
    1fee:	26 e0       	ldi	r18, 0x06	; 6
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	30 93 ae 06 	sts	0x06AE, r19	; 0x8006ae <nh+0x478>
    1ff6:	20 93 ad 06 	sts	0x06AD, r18	; 0x8006ad <nh+0x477>
        checksum_ = data;               /* first byte included in checksum */
    1ffa:	90 93 b6 06 	sts	0x06B6, r25	; 0x8006b6 <nh+0x480>
    1ffe:	80 93 b5 06 	sts	0x06B5, r24	; 0x8006b5 <nh+0x47f>
    2002:	f8 ce       	rjmp	.-528    	; 0x1df4 <main+0x260>
      }
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
    2004:	46 30       	cpi	r20, 0x06	; 6
    2006:	51 05       	cpc	r21, r1
    2008:	f1 f4       	brne	.+60     	; 0x2046 <main+0x4b2>
      {
        topic_ += data << 8;
    200a:	e1 eb       	ldi	r30, 0xB1	; 177
    200c:	f6 e0       	ldi	r31, 0x06	; 6
    200e:	98 2f       	mov	r25, r24
    2010:	88 27       	eor	r24, r24
    2012:	20 81       	ld	r18, Z
    2014:	31 81       	ldd	r19, Z+1	; 0x01
    2016:	82 0f       	add	r24, r18
    2018:	93 1f       	adc	r25, r19
    201a:	91 83       	std	Z+1, r25	; 0x01
    201c:	80 83       	st	Z, r24
        mode_ = MODE_MESSAGE;
    201e:	87 e0       	ldi	r24, 0x07	; 7
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	90 93 ae 06 	sts	0x06AE, r25	; 0x8006ae <nh+0x478>
    2026:	80 93 ad 06 	sts	0x06AD, r24	; 0x8006ad <nh+0x477>
        if (bytes_ == 0)
    202a:	80 91 af 06 	lds	r24, 0x06AF	; 0x8006af <nh+0x479>
    202e:	90 91 b0 06 	lds	r25, 0x06B0	; 0x8006b0 <nh+0x47a>
    2032:	89 2b       	or	r24, r25
    2034:	09 f0       	breq	.+2      	; 0x2038 <main+0x4a4>
    2036:	de ce       	rjmp	.-580    	; 0x1df4 <main+0x260>
          mode_ = MODE_MSG_CHECKSUM;
    2038:	88 e0       	ldi	r24, 0x08	; 8
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	90 93 ae 06 	sts	0x06AE, r25	; 0x8006ae <nh+0x478>
    2040:	80 93 ad 06 	sts	0x06AD, r24	; 0x8006ad <nh+0x477>
    2044:	d7 ce       	rjmp	.-594    	; 0x1df4 <main+0x260>
      }
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
    2046:	48 30       	cpi	r20, 0x08	; 8
    2048:	51 05       	cpc	r21, r1
    204a:	09 f0       	breq	.+2      	; 0x204e <main+0x4ba>
    204c:	d3 ce       	rjmp	.-602    	; 0x1df4 <main+0x260>
      {
        mode_ = MODE_FIRST_FF;
    204e:	10 92 ae 06 	sts	0x06AE, r1	; 0x8006ae <nh+0x478>
    2052:	10 92 ad 06 	sts	0x06AD, r1	; 0x8006ad <nh+0x477>
        if ((checksum_ % 256) == 255)
    2056:	30 78       	andi	r19, 0x80	; 128
    2058:	33 23       	and	r19, r19
    205a:	2c f4       	brge	.+10     	; 0x2066 <main+0x4d2>
    205c:	21 50       	subi	r18, 0x01	; 1
    205e:	31 09       	sbc	r19, r1
    2060:	3f 6f       	ori	r19, 0xFF	; 255
    2062:	2f 5f       	subi	r18, 0xFF	; 255
    2064:	3f 4f       	sbci	r19, 0xFF	; 255
    2066:	2f 3f       	cpi	r18, 0xFF	; 255
    2068:	31 05       	cpc	r19, r1
    206a:	09 f0       	breq	.+2      	; 0x206e <main+0x4da>
    206c:	c3 ce       	rjmp	.-634    	; 0x1df4 <main+0x260>
        {
          if (topic_ == TopicInfo::ID_PUBLISHER)
    206e:	80 91 b1 06 	lds	r24, 0x06B1	; 0x8006b1 <nh+0x47b>
    2072:	90 91 b2 06 	lds	r25, 0x06B2	; 0x8006b2 <nh+0x47c>
    2076:	00 97       	sbiw	r24, 0x00	; 0
    2078:	09 f0       	breq	.+2      	; 0x207c <main+0x4e8>
    207a:	ee c0       	rjmp	.+476    	; 0x2258 <main+0x6c4>
    207c:	8c ea       	ldi	r24, 0xAC	; 172
    207e:	91 e0       	ldi	r25, 0x01	; 1
    2080:	9a 83       	std	Y+2, r25	; 0x02
    2082:	89 83       	std	Y+1, r24	; 0x01
    2084:	1b 82       	std	Y+3, r1	; 0x03
    2086:	1c 82       	std	Y+4, r1	; 0x04
    2088:	1d 82       	std	Y+5, r1	; 0x05
    208a:	1e 82       	std	Y+6, r1	; 0x06
    208c:	1f 82       	std	Y+7, r1	; 0x07
    208e:	18 86       	std	Y+8, r1	; 0x08
    2090:	19 86       	std	Y+9, r1	; 0x09
    2092:	1a 86       	std	Y+10, r1	; 0x0a
   */

  void requestSyncTime()
  {
    std_msgs::Time t;
    publish(TopicInfo::ID_TIME, &t);
    2094:	06 e3       	ldi	r16, 0x36	; 54
    2096:	12 e0       	ldi	r17, 0x02	; 2
    2098:	d8 01       	movw	r26, r16
    209a:	ed 91       	ld	r30, X+
    209c:	fc 91       	ld	r31, X
    209e:	01 90       	ld	r0, Z+
    20a0:	f0 81       	ld	r31, Z
    20a2:	e0 2d       	mov	r30, r0
    20a4:	ae 01       	movw	r20, r28
    20a6:	4f 5f       	subi	r20, 0xFF	; 255
    20a8:	5f 4f       	sbci	r21, 0xFF	; 255
    20aa:	6a e0       	ldi	r22, 0x0A	; 10
    20ac:	70 e0       	ldi	r23, 0x00	; 0
    20ae:	c8 01       	movw	r24, r16
    20b0:	09 95       	icall
    20b2:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <avr_time_now>
    rt_time = hardware_.time();
    20b6:	f8 01       	movw	r30, r16
    20b8:	63 83       	std	Z+3, r22	; 0x03
    20ba:	74 83       	std	Z+4, r23	; 0x04
    20bc:	85 83       	std	Z+5, r24	; 0x05
    20be:	96 83       	std	Z+6, r25	; 0x06
    TopicInfo():
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
    20c0:	88 eb       	ldi	r24, 0xB8	; 184
    20c2:	91 e0       	ldi	r25, 0x01	; 1
    20c4:	9a 83       	std	Y+2, r25	; 0x02
    20c6:	89 83       	std	Y+1, r24	; 0x01
    20c8:	1c 82       	std	Y+4, r1	; 0x04
    20ca:	1b 82       	std	Y+3, r1	; 0x03
    20cc:	8c e8       	ldi	r24, 0x8C	; 140
    20ce:	91 e0       	ldi	r25, 0x01	; 1
    20d0:	9e 83       	std	Y+6, r25	; 0x06
    20d2:	8d 83       	std	Y+5, r24	; 0x05
    20d4:	98 87       	std	Y+8, r25	; 0x08
    20d6:	8f 83       	std	Y+7, r24	; 0x07
    20d8:	9a 87       	std	Y+10, r25	; 0x0a
    20da:	89 87       	std	Y+9, r24	; 0x09
    20dc:	1b 86       	std	Y+11, r1	; 0x0b
    20de:	1c 86       	std	Y+12, r1	; 0x0c
    20e0:	1d 86       	std	Y+13, r1	; 0x0d
    20e2:	1e 86       	std	Y+14, r1	; 0x0e
    20e4:	09 e4       	ldi	r16, 0x49	; 73
    20e6:	16 e0       	ldi	r17, 0x06	; 6
    20e8:	0f 2e       	mov	r0, r31
    20ea:	fb e7       	ldi	r31, 0x7B	; 123
    20ec:	6f 2e       	mov	r6, r31
    20ee:	f6 e0       	ldi	r31, 0x06	; 6
    20f0:	7f 2e       	mov	r7, r31
    20f2:	f0 2d       	mov	r31, r0
        ti.topic_id = publishers[i]->id_;
        ti.topic_name = (char *) publishers[i]->topic_;
        ti.message_type = (char *) publishers[i]->msg_->getType();
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
        ti.buffer_size = OUTPUT_SIZE;
        publish(publishers[i]->getEndpointType(), &ti);
    20f4:	5f 01       	movw	r10, r30
  {
    rosserial_msgs::TopicInfo ti;
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
    {
      if (publishers[i] != 0) // non-empty slot
    20f6:	d8 01       	movw	r26, r16
    20f8:	ed 91       	ld	r30, X+
    20fa:	fc 91       	ld	r31, X
    20fc:	30 97       	sbiw	r30, 0x00	; 0
    20fe:	c9 f1       	breq	.+114    	; 0x2172 <main+0x5de>
      {
        ti.topic_id = publishers[i]->id_;
    2100:	84 81       	ldd	r24, Z+4	; 0x04
    2102:	95 81       	ldd	r25, Z+5	; 0x05
    2104:	9c 83       	std	Y+4, r25	; 0x04
    2106:	8b 83       	std	Y+3, r24	; 0x03
        ti.topic_name = (char *) publishers[i]->topic_;
    2108:	80 81       	ld	r24, Z
    210a:	91 81       	ldd	r25, Z+1	; 0x01
    210c:	9e 83       	std	Y+6, r25	; 0x06
    210e:	8d 83       	std	Y+5, r24	; 0x05
        ti.message_type = (char *) publishers[i]->msg_->getType();
    2110:	82 81       	ldd	r24, Z+2	; 0x02
    2112:	93 81       	ldd	r25, Z+3	; 0x03
    2114:	dc 01       	movw	r26, r24
    2116:	ed 91       	ld	r30, X+
    2118:	fc 91       	ld	r31, X
    211a:	04 80       	ldd	r0, Z+4	; 0x04
    211c:	f5 81       	ldd	r31, Z+5	; 0x05
    211e:	e0 2d       	mov	r30, r0
    2120:	09 95       	icall
    2122:	98 87       	std	Y+8, r25	; 0x08
    2124:	8f 83       	std	Y+7, r24	; 0x07
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
    2126:	d8 01       	movw	r26, r16
    2128:	ed 91       	ld	r30, X+
    212a:	fc 91       	ld	r31, X
    212c:	82 81       	ldd	r24, Z+2	; 0x02
    212e:	93 81       	ldd	r25, Z+3	; 0x03
    2130:	dc 01       	movw	r26, r24
    2132:	ed 91       	ld	r30, X+
    2134:	fc 91       	ld	r31, X
    2136:	06 80       	ldd	r0, Z+6	; 0x06
    2138:	f7 81       	ldd	r31, Z+7	; 0x07
    213a:	e0 2d       	mov	r30, r0
    213c:	09 95       	icall
    213e:	9a 87       	std	Y+10, r25	; 0x0a
    2140:	89 87       	std	Y+9, r24	; 0x09
        ti.buffer_size = OUTPUT_SIZE;
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	32 e0       	ldi	r19, 0x02	; 2
    2146:	40 e0       	ldi	r20, 0x00	; 0
    2148:	50 e0       	ldi	r21, 0x00	; 0
    214a:	2b 87       	std	Y+11, r18	; 0x0b
    214c:	3c 87       	std	Y+12, r19	; 0x0c
    214e:	4d 87       	std	Y+13, r20	; 0x0d
    2150:	5e 87       	std	Y+14, r21	; 0x0e
  };
  int getEndpointType()
  {
    return endpoint_;
    2152:	d8 01       	movw	r26, r16
    2154:	ed 91       	ld	r30, X+
    2156:	fc 91       	ld	r31, X
        publish(publishers[i]->getEndpointType(), &ti);
    2158:	60 85       	ldd	r22, Z+8	; 0x08
    215a:	71 85       	ldd	r23, Z+9	; 0x09
    215c:	d5 01       	movw	r26, r10
    215e:	ed 91       	ld	r30, X+
    2160:	fc 91       	ld	r31, X
    2162:	01 90       	ld	r0, Z+
    2164:	f0 81       	ld	r31, Z
    2166:	e0 2d       	mov	r30, r0
    2168:	ae 01       	movw	r20, r28
    216a:	4f 5f       	subi	r20, 0xFF	; 255
    216c:	5f 4f       	sbci	r21, 0xFF	; 255
    216e:	c5 01       	movw	r24, r10
    2170:	09 95       	icall
    2172:	0e 5f       	subi	r16, 0xFE	; 254
    2174:	1f 4f       	sbci	r17, 0xFF	; 255

  void negotiateTopics()
  {
    rosserial_msgs::TopicInfo ti;
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
    2176:	60 16       	cp	r6, r16
    2178:	71 06       	cpc	r7, r17
    217a:	09 f0       	breq	.+2      	; 0x217e <main+0x5ea>
    217c:	bc cf       	rjmp	.-136    	; 0x20f6 <main+0x562>
    217e:	0f 2e       	mov	r0, r31
    2180:	fd ea       	ldi	r31, 0xAD	; 173
    2182:	8f 2e       	mov	r8, r31
    2184:	f6 e0       	ldi	r31, 0x06	; 6
    2186:	9f 2e       	mov	r9, r31
    2188:	f0 2d       	mov	r31, r0
        ti.topic_id = subscribers[i]->id_;
        ti.topic_name = (char *) subscribers[i]->topic_;
        ti.message_type = (char *) subscribers[i]->getMsgType();
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
        ti.buffer_size = INPUT_SIZE;
        publish(subscribers[i]->getEndpointType(), &ti);
    218a:	0f 2e       	mov	r0, r31
    218c:	f6 e3       	ldi	r31, 0x36	; 54
    218e:	af 2e       	mov	r10, r31
    2190:	f2 e0       	ldi	r31, 0x02	; 2
    2192:	bf 2e       	mov	r11, r31
    2194:	f0 2d       	mov	r31, r0
        publish(publishers[i]->getEndpointType(), &ti);
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
    {
      if (subscribers[i] != 0) // non-empty slot
    2196:	f3 01       	movw	r30, r6
    2198:	a0 81       	ld	r26, Z
    219a:	b1 81       	ldd	r27, Z+1	; 0x01
    219c:	10 97       	sbiw	r26, 0x00	; 0
    219e:	09 f4       	brne	.+2      	; 0x21a2 <main+0x60e>
    21a0:	40 c0       	rjmp	.+128    	; 0x2222 <main+0x68e>
      {
        ti.topic_id = subscribers[i]->id_;
    21a2:	12 96       	adiw	r26, 0x02	; 2
    21a4:	8d 91       	ld	r24, X+
    21a6:	9c 91       	ld	r25, X
    21a8:	13 97       	sbiw	r26, 0x03	; 3
    21aa:	9c 83       	std	Y+4, r25	; 0x04
    21ac:	8b 83       	std	Y+3, r24	; 0x03
        ti.topic_name = (char *) subscribers[i]->topic_;
    21ae:	14 96       	adiw	r26, 0x04	; 4
    21b0:	8d 91       	ld	r24, X+
    21b2:	9c 91       	ld	r25, X
    21b4:	15 97       	sbiw	r26, 0x05	; 5
    21b6:	9e 83       	std	Y+6, r25	; 0x06
    21b8:	8d 83       	std	Y+5, r24	; 0x05
        ti.message_type = (char *) subscribers[i]->getMsgType();
    21ba:	ed 91       	ld	r30, X+
    21bc:	fc 91       	ld	r31, X
    21be:	11 97       	sbiw	r26, 0x01	; 1
    21c0:	04 80       	ldd	r0, Z+4	; 0x04
    21c2:	f5 81       	ldd	r31, Z+5	; 0x05
    21c4:	e0 2d       	mov	r30, r0
    21c6:	cd 01       	movw	r24, r26
    21c8:	09 95       	icall
    21ca:	98 87       	std	Y+8, r25	; 0x08
    21cc:	8f 83       	std	Y+7, r24	; 0x07
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
    21ce:	d3 01       	movw	r26, r6
    21d0:	8d 91       	ld	r24, X+
    21d2:	9c 91       	ld	r25, X
    21d4:	dc 01       	movw	r26, r24
    21d6:	ed 91       	ld	r30, X+
    21d8:	fc 91       	ld	r31, X
    21da:	06 80       	ldd	r0, Z+6	; 0x06
    21dc:	f7 81       	ldd	r31, Z+7	; 0x07
    21de:	e0 2d       	mov	r30, r0
    21e0:	09 95       	icall
    21e2:	9a 87       	std	Y+10, r25	; 0x0a
    21e4:	89 87       	std	Y+9, r24	; 0x09
        ti.buffer_size = INPUT_SIZE;
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	32 e0       	ldi	r19, 0x02	; 2
    21ea:	40 e0       	ldi	r20, 0x00	; 0
    21ec:	50 e0       	ldi	r21, 0x00	; 0
    21ee:	2b 87       	std	Y+11, r18	; 0x0b
    21f0:	3c 87       	std	Y+12, r19	; 0x0c
    21f2:	4d 87       	std	Y+13, r20	; 0x0d
    21f4:	5e 87       	std	Y+14, r21	; 0x0e
        publish(subscribers[i]->getEndpointType(), &ti);
    21f6:	d5 01       	movw	r26, r10
    21f8:	ed 91       	ld	r30, X+
    21fa:	fc 91       	ld	r31, X
    21fc:	00 81       	ld	r16, Z
    21fe:	11 81       	ldd	r17, Z+1	; 0x01
    2200:	f3 01       	movw	r30, r6
    2202:	80 81       	ld	r24, Z
    2204:	91 81       	ldd	r25, Z+1	; 0x01
    2206:	dc 01       	movw	r26, r24
    2208:	ed 91       	ld	r30, X+
    220a:	fc 91       	ld	r31, X
    220c:	02 80       	ldd	r0, Z+2	; 0x02
    220e:	f3 81       	ldd	r31, Z+3	; 0x03
    2210:	e0 2d       	mov	r30, r0
    2212:	09 95       	icall
    2214:	ae 01       	movw	r20, r28
    2216:	4f 5f       	subi	r20, 0xFF	; 255
    2218:	5f 4f       	sbci	r21, 0xFF	; 255
    221a:	bc 01       	movw	r22, r24
    221c:	c5 01       	movw	r24, r10
    221e:	f8 01       	movw	r30, r16
    2220:	09 95       	icall
    2222:	f2 e0       	ldi	r31, 0x02	; 2
    2224:	6f 0e       	add	r6, r31
    2226:	71 1c       	adc	r7, r1
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
        ti.buffer_size = OUTPUT_SIZE;
        publish(publishers[i]->getEndpointType(), &ti);
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
    2228:	68 14       	cp	r6, r8
    222a:	79 04       	cpc	r7, r9
    222c:	09 f0       	breq	.+2      	; 0x2230 <main+0x69c>
    222e:	b3 cf       	rjmp	.-154    	; 0x2196 <main+0x602>
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
        ti.buffer_size = INPUT_SIZE;
        publish(subscribers[i]->getEndpointType(), &ti);
      }
    }
    configured_ = true;
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	80 93 b7 06 	sts	0x06B7, r24	; 0x8006b7 <nh+0x481>
        {
          if (topic_ == TopicInfo::ID_PUBLISHER)
          {
            requestSyncTime();
            negotiateTopics();
            last_sync_time = c_time;
    2236:	c0 92 b8 06 	sts	0x06B8, r12	; 0x8006b8 <nh+0x482>
    223a:	d0 92 b9 06 	sts	0x06B9, r13	; 0x8006b9 <nh+0x483>
    223e:	e0 92 ba 06 	sts	0x06BA, r14	; 0x8006ba <nh+0x484>
    2242:	f0 92 bb 06 	sts	0x06BB, r15	; 0x8006bb <nh+0x485>
            last_sync_receive_time = c_time;
    2246:	c0 92 bc 06 	sts	0x06BC, r12	; 0x8006bc <nh+0x486>
    224a:	d0 92 bd 06 	sts	0x06BD, r13	; 0x8006bd <nh+0x487>
    224e:	e0 92 be 06 	sts	0x06BE, r14	; 0x8006be <nh+0x488>
    2252:	f0 92 bf 06 	sts	0x06BF, r15	; 0x8006bf <nh+0x489>
    2256:	44 cd       	rjmp	.-1400   	; 0x1ce0 <main+0x14c>
            return SPIN_ERR;
          }
          else if (topic_ == TopicInfo::ID_TIME)
    2258:	8a 30       	cpi	r24, 0x0A	; 10
    225a:	91 05       	cpc	r25, r1
    225c:	09 f0       	breq	.+2      	; 0x2260 <main+0x6cc>
    225e:	be c0       	rjmp	.+380    	; 0x23dc <main+0x848>
    2260:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <avr_time_now>
  }

  void syncTime(uint8_t * data)
  {
    std_msgs::Time t;
    uint32_t offset = hardware_.time() - rt_time;
    2264:	06 e3       	ldi	r16, 0x36	; 54
    2266:	12 e0       	ldi	r17, 0x02	; 2
    2268:	d8 01       	movw	r26, r16
    226a:	13 96       	adiw	r26, 0x03	; 3
    226c:	4d 90       	ld	r4, X+
    226e:	5d 90       	ld	r5, X+
    2270:	6d 90       	ld	r6, X+
    2272:	7c 90       	ld	r7, X
    2274:	16 97       	sbiw	r26, 0x06	; 6
    2276:	9b 01       	movw	r18, r22
    2278:	ac 01       	movw	r20, r24
    227a:	24 19       	sub	r18, r4
    227c:	35 09       	sbc	r19, r5
    227e:	46 09       	sbc	r20, r6
    2280:	57 09       	sbc	r21, r7
    2282:	2f 8b       	std	Y+23, r18	; 0x17
    2284:	38 8f       	std	Y+24, r19	; 0x18
    2286:	49 8f       	std	Y+25, r20	; 0x19
    2288:	5a 8f       	std	Y+26, r21	; 0x1a
    228a:	54 96       	adiw	r26, 0x14	; 20
    228c:	8c 91       	ld	r24, X
    228e:	54 97       	sbiw	r26, 0x14	; 20
    2290:	55 96       	adiw	r26, 0x15	; 21
    2292:	2c 91       	ld	r18, X
    2294:	55 97       	sbiw	r26, 0x15	; 21
    2296:	42 2f       	mov	r20, r18
    2298:	50 e0       	ldi	r21, 0x00	; 0
    229a:	60 e0       	ldi	r22, 0x00	; 0
    229c:	70 e0       	ldi	r23, 0x00	; 0
    229e:	ba 01       	movw	r22, r20
    22a0:	55 27       	eor	r21, r21
    22a2:	44 27       	eor	r20, r20
    22a4:	58 2b       	or	r21, r24
    22a6:	53 96       	adiw	r26, 0x13	; 19
    22a8:	8c 91       	ld	r24, X
    22aa:	53 97       	sbiw	r26, 0x13	; 19
    22ac:	48 2b       	or	r20, r24
    22ae:	56 96       	adiw	r26, 0x16	; 22
    22b0:	8c 91       	ld	r24, X
    22b2:	2a 01       	movw	r4, r20
    22b4:	3b 01       	movw	r6, r22
    22b6:	78 2a       	or	r7, r24
    22b8:	a3 01       	movw	r20, r6
    22ba:	92 01       	movw	r18, r4
    22bc:	21 50       	subi	r18, 0x01	; 1
    22be:	31 09       	sbc	r19, r1
    22c0:	41 09       	sbc	r20, r1
    22c2:	51 09       	sbc	r21, r1
    22c4:	2b 8b       	std	Y+19, r18	; 0x13
    22c6:	3c 8b       	std	Y+20, r19	; 0x14
    22c8:	4d 8b       	std	Y+21, r20	; 0x15
    22ca:	5e 8b       	std	Y+22, r21	; 0x16
    22cc:	d8 01       	movw	r26, r16
    22ce:	58 96       	adiw	r26, 0x18	; 24
    22d0:	2c 91       	ld	r18, X
    22d2:	58 97       	sbiw	r26, 0x18	; 24
    22d4:	59 96       	adiw	r26, 0x19	; 25
    22d6:	8c 91       	ld	r24, X
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	a0 e0       	ldi	r26, 0x00	; 0
    22dc:	b0 e0       	ldi	r27, 0x00	; 0
    22de:	dc 01       	movw	r26, r24
    22e0:	99 27       	eor	r25, r25
    22e2:	88 27       	eor	r24, r24
    22e4:	92 2b       	or	r25, r18
    22e6:	f8 01       	movw	r30, r16
    22e8:	27 89       	ldd	r18, Z+23	; 0x17
    22ea:	82 2b       	or	r24, r18
    22ec:	22 8d       	ldd	r18, Z+26	; 0x1a
    22ee:	b2 2b       	or	r27, r18
    22f0:	2c 01       	movw	r4, r24
    22f2:	3d 01       	movw	r6, r26
    22f4:	f6 e3       	ldi	r31, 0x36	; 54
    22f6:	5f 1a       	sub	r5, r31
    22f8:	f5 e6       	ldi	r31, 0x65	; 101
    22fa:	6f 0a       	sbc	r6, r31
    22fc:	f4 ec       	ldi	r31, 0xC4	; 196
    22fe:	7f 0a       	sbc	r7, r31
    2300:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <avr_time_now>
    2304:	6b 8f       	std	Y+27, r22	; 0x1b
    2306:	7c 8f       	std	Y+28, r23	; 0x1c
    2308:	8d 8f       	std	Y+29, r24	; 0x1d
    230a:	9e 8f       	std	Y+30, r25	; 0x1e
  }

  void setNow(Time & new_now)
  {
    uint32_t ms = hardware_.time();
    sec_offset = new_now.sec - ms / 1000 - 1;
    230c:	6f 89       	ldd	r22, Y+23	; 0x17
    230e:	78 8d       	ldd	r23, Y+24	; 0x18
    2310:	89 8d       	ldd	r24, Y+25	; 0x19
    2312:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2314:	28 ee       	ldi	r18, 0xE8	; 232
    2316:	33 e0       	ldi	r19, 0x03	; 3
    2318:	40 e0       	ldi	r20, 0x00	; 0
    231a:	50 e0       	ldi	r21, 0x00	; 0
    231c:	0e 94 8f 1b 	call	0x371e	; 0x371e <__udivmodsi4>
    2320:	6f 8b       	std	Y+23, r22	; 0x17
    2322:	78 8f       	std	Y+24, r23	; 0x18
    2324:	89 8f       	std	Y+25, r24	; 0x19
    2326:	9a 8f       	std	Y+26, r25	; 0x1a
    2328:	8b 89       	ldd	r24, Y+19	; 0x13
    232a:	9c 89       	ldd	r25, Y+20	; 0x14
    232c:	ad 89       	ldd	r26, Y+21	; 0x15
    232e:	be 89       	ldd	r27, Y+22	; 0x16
    2330:	82 0f       	add	r24, r18
    2332:	93 1f       	adc	r25, r19
    2334:	a4 1f       	adc	r26, r20
    2336:	b5 1f       	adc	r27, r21
    2338:	8b 8b       	std	Y+19, r24	; 0x13
    233a:	9c 8b       	std	Y+20, r25	; 0x14
    233c:	ad 8b       	std	Y+21, r26	; 0x15
    233e:	be 8b       	std	Y+22, r27	; 0x16
    2340:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2342:	7c 8d       	ldd	r23, Y+28	; 0x1c
    2344:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2346:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2348:	28 ee       	ldi	r18, 0xE8	; 232
    234a:	33 e0       	ldi	r19, 0x03	; 3
    234c:	40 e0       	ldi	r20, 0x00	; 0
    234e:	50 e0       	ldi	r21, 0x00	; 0
    2350:	0e 94 8f 1b 	call	0x371e	; 0x371e <__udivmodsi4>
    2354:	6b 8f       	std	Y+27, r22	; 0x1b
    2356:	7c 8f       	std	Y+28, r23	; 0x1c
    2358:	8d 8f       	std	Y+29, r24	; 0x1d
    235a:	9e 8f       	std	Y+30, r25	; 0x1e
    235c:	8b 89       	ldd	r24, Y+19	; 0x13
    235e:	9c 89       	ldd	r25, Y+20	; 0x14
    2360:	ad 89       	ldd	r26, Y+21	; 0x15
    2362:	be 89       	ldd	r27, Y+22	; 0x16
    2364:	82 1b       	sub	r24, r18
    2366:	93 0b       	sbc	r25, r19
    2368:	a4 0b       	sbc	r26, r20
    236a:	b5 0b       	sbc	r27, r21
    236c:	f8 01       	movw	r30, r16
    236e:	87 83       	std	Z+7, r24	; 0x07
    2370:	90 87       	std	Z+8, r25	; 0x08
    2372:	a1 87       	std	Z+9, r26	; 0x09
    2374:	b2 87       	std	Z+10, r27	; 0x0a
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
    2376:	2f 89       	ldd	r18, Y+23	; 0x17
    2378:	38 8d       	ldd	r19, Y+24	; 0x18
    237a:	49 8d       	ldd	r20, Y+25	; 0x19
    237c:	5a 8d       	ldd	r21, Y+26	; 0x1a
    237e:	60 e4       	ldi	r22, 0x40	; 64
    2380:	72 e4       	ldi	r23, 0x42	; 66
    2382:	8f e0       	ldi	r24, 0x0F	; 15
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__mulsi3>
    238a:	46 0e       	add	r4, r22
    238c:	57 1e       	adc	r5, r23
    238e:	68 1e       	adc	r6, r24
    2390:	79 1e       	adc	r7, r25
    2392:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2394:	3c 8d       	ldd	r19, Y+28	; 0x1c
    2396:	4d 8d       	ldd	r20, Y+29	; 0x1d
    2398:	5e 8d       	ldd	r21, Y+30	; 0x1e
    239a:	60 e4       	ldi	r22, 0x40	; 64
    239c:	72 e4       	ldi	r23, 0x42	; 66
    239e:	8f e0       	ldi	r24, 0x0F	; 15
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__mulsi3>
    23a6:	a3 01       	movw	r20, r6
    23a8:	92 01       	movw	r18, r4
    23aa:	26 1b       	sub	r18, r22
    23ac:	37 0b       	sbc	r19, r23
    23ae:	48 0b       	sbc	r20, r24
    23b0:	59 0b       	sbc	r21, r25
    23b2:	23 87       	std	Z+11, r18	; 0x0b
    23b4:	34 87       	std	Z+12, r19	; 0x0c
    23b6:	45 87       	std	Z+13, r20	; 0x0d
    23b8:	56 87       	std	Z+14, r21	; 0x0e
    normalizeSecNSec(sec_offset, nsec_offset);
    23ba:	61 e4       	ldi	r22, 0x41	; 65
    23bc:	72 e0       	ldi	r23, 0x02	; 2
    23be:	8d e3       	ldi	r24, 0x3D	; 61
    23c0:	92 e0       	ldi	r25, 0x02	; 2
    23c2:	0e 94 f7 18 	call	0x31ee	; 0x31ee <_ZN3ros16normalizeSecNSecERmS0_>
    23c6:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <avr_time_now>
    t.deserialize(data);
    t.data.sec += offset / 1000;
    t.data.nsec += (offset % 1000) * 1000000UL;

    this->setNow(t.data);
    last_sync_receive_time = hardware_.time();
    23ca:	60 93 bc 06 	sts	0x06BC, r22	; 0x8006bc <nh+0x486>
    23ce:	70 93 bd 06 	sts	0x06BD, r23	; 0x8006bd <nh+0x487>
    23d2:	80 93 be 06 	sts	0x06BE, r24	; 0x8006be <nh+0x488>
    23d6:	90 93 bf 06 	sts	0x06BF, r25	; 0x8006bf <nh+0x489>
    23da:	0c cd       	rjmp	.-1512   	; 0x1df4 <main+0x260>
          }
          else if (topic_ == TopicInfo::ID_TIME)
          {
            syncTime(message_in);
          }
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
    23dc:	86 30       	cpi	r24, 0x06	; 6
    23de:	91 05       	cpc	r25, r1
    23e0:	09 f0       	breq	.+2      	; 0x23e4 <main+0x850>
    23e2:	cb c1       	rjmp	.+918    	; 0x277a <main+0xbe6>
    }

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
    23e4:	e6 e3       	ldi	r30, 0x36	; 54
    23e6:	f2 e0       	ldi	r31, 0x02	; 2
    23e8:	83 89       	ldd	r24, Z+19	; 0x13
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
    23ea:	94 89       	ldd	r25, Z+20	; 0x14
    23ec:	45 88       	ldd	r4, Z+21	; 0x15
    23ee:	51 2c       	mov	r5, r1
    23f0:	61 2c       	mov	r6, r1
    23f2:	71 2c       	mov	r7, r1
    23f4:	32 01       	movw	r6, r4
    23f6:	55 24       	eor	r5, r5
    23f8:	44 24       	eor	r4, r4
    23fa:	59 2a       	or	r5, r25
    23fc:	48 2a       	or	r4, r24
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
    23fe:	86 89       	ldd	r24, Z+22	; 0x16
    2400:	78 2a       	or	r7, r24
      offset += sizeof(this->ints_length);
      if(ints_lengthT > ints_length)
    2402:	80 91 c7 06 	lds	r24, 0x06C7	; 0x8006c7 <nh+0x491>
    2406:	90 91 c8 06 	lds	r25, 0x06C8	; 0x8006c8 <nh+0x492>
    240a:	a0 91 c9 06 	lds	r26, 0x06C9	; 0x8006c9 <nh+0x493>
    240e:	b0 91 ca 06 	lds	r27, 0x06CA	; 0x8006ca <nh+0x494>
    2412:	84 15       	cp	r24, r4
    2414:	95 05       	cpc	r25, r5
    2416:	a6 05       	cpc	r26, r6
    2418:	b7 05       	cpc	r27, r7
    241a:	78 f4       	brcc	.+30     	; 0x243a <main+0x8a6>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
    241c:	0f ec       	ldi	r16, 0xCF	; 207
    241e:	16 e0       	ldi	r17, 0x06	; 6
    2420:	b2 01       	movw	r22, r4
    2422:	66 0f       	add	r22, r22
    2424:	77 1f       	adc	r23, r23
    2426:	66 0f       	add	r22, r22
    2428:	77 1f       	adc	r23, r23
    242a:	d8 01       	movw	r26, r16
    242c:	8d 91       	ld	r24, X+
    242e:	9c 91       	ld	r25, X
    2430:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <realloc>
    2434:	f8 01       	movw	r30, r16
    2436:	91 83       	std	Z+1, r25	; 0x01
    2438:	80 83       	st	Z, r24
      ints_length = ints_lengthT;
    243a:	40 92 c7 06 	sts	0x06C7, r4	; 0x8006c7 <nh+0x491>
    243e:	50 92 c8 06 	sts	0x06C8, r5	; 0x8006c8 <nh+0x492>
    2442:	60 92 c9 06 	sts	0x06C9, r6	; 0x8006c9 <nh+0x493>
    2446:	70 92 ca 06 	sts	0x06CA, r7	; 0x8006ca <nh+0x494>
      for( uint32_t i = 0; i < ints_length; i++){
    244a:	45 28       	or	r4, r5
    244c:	46 28       	or	r4, r6
    244e:	47 28       	or	r4, r7
    2450:	09 f4       	brne	.+2      	; 0x2454 <main+0x8c0>
    2452:	47 c0       	rjmp	.+142    	; 0x24e2 <main+0x94e>
    2454:	e6 e3       	ldi	r30, 0x36	; 54
    2456:	f2 e0       	ldi	r31, 0x02	; 2
    2458:	64 e0       	ldi	r22, 0x04	; 4
    245a:	70 e0       	ldi	r23, 0x00	; 0
    245c:	41 2c       	mov	r4, r1
    245e:	51 2c       	mov	r5, r1
    2460:	32 01       	movw	r6, r4
      u_st_ints.base = 0;
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_ints = u_st_ints.real;
    2462:	0b ec       	ldi	r16, 0xCB	; 203
    2464:	16 e0       	ldi	r17, 0x06	; 6
    2466:	80 8d       	ldd	r24, Z+24	; 0x18
    2468:	21 8d       	ldd	r18, Z+25	; 0x19
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	40 e0       	ldi	r20, 0x00	; 0
    246e:	50 e0       	ldi	r21, 0x00	; 0
    2470:	a9 01       	movw	r20, r18
    2472:	33 27       	eor	r19, r19
    2474:	22 27       	eor	r18, r18
    2476:	38 2b       	or	r19, r24
    2478:	87 89       	ldd	r24, Z+23	; 0x17
    247a:	28 2b       	or	r18, r24
    247c:	82 8d       	ldd	r24, Z+26	; 0x1a
    247e:	58 2b       	or	r21, r24
    2480:	c9 01       	movw	r24, r18
    2482:	d8 01       	movw	r26, r16
    2484:	2d 93       	st	X+, r18
    2486:	3d 93       	st	X+, r19
    2488:	4d 93       	st	X+, r20
    248a:	5c 93       	st	X, r21
    248c:	13 97       	sbiw	r26, 0x03	; 3
      offset += sizeof(this->st_ints);
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
    248e:	9b 01       	movw	r18, r22
    2490:	24 50       	subi	r18, 0x04	; 4
    2492:	31 09       	sbc	r19, r1
    2494:	6c 5f       	subi	r22, 0xFC	; 252
    2496:	7f 4f       	sbci	r23, 0xFF	; 255
    2498:	af ec       	ldi	r26, 0xCF	; 207
    249a:	b6 e0       	ldi	r27, 0x06	; 6
    249c:	4d 91       	ld	r20, X+
    249e:	5c 91       	ld	r21, X
    24a0:	24 0f       	add	r18, r20
    24a2:	35 1f       	adc	r19, r21
    24a4:	d9 01       	movw	r26, r18
    24a6:	8d 93       	st	X+, r24
    24a8:	9c 93       	st	X, r25
    24aa:	d8 01       	movw	r26, r16
    24ac:	12 96       	adiw	r26, 0x02	; 2
    24ae:	8d 91       	ld	r24, X+
    24b0:	9c 91       	ld	r25, X
    24b2:	13 97       	sbiw	r26, 0x03	; 3
    24b4:	d9 01       	movw	r26, r18
    24b6:	13 96       	adiw	r26, 0x03	; 3
    24b8:	9c 93       	st	X, r25
    24ba:	8e 93       	st	-X, r24
    24bc:	12 97       	sbiw	r26, 0x02	; 2
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->ints_length);
      if(ints_lengthT > ints_length)
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
      ints_length = ints_lengthT;
      for( uint32_t i = 0; i < ints_length; i++){
    24be:	bf ef       	ldi	r27, 0xFF	; 255
    24c0:	4b 1a       	sub	r4, r27
    24c2:	5b 0a       	sbc	r5, r27
    24c4:	6b 0a       	sbc	r6, r27
    24c6:	7b 0a       	sbc	r7, r27
    24c8:	34 96       	adiw	r30, 0x04	; 4
    24ca:	a7 ec       	ldi	r26, 0xC7	; 199
    24cc:	b6 e0       	ldi	r27, 0x06	; 6
    24ce:	2d 91       	ld	r18, X+
    24d0:	3d 91       	ld	r19, X+
    24d2:	4d 91       	ld	r20, X+
    24d4:	5c 91       	ld	r21, X
    24d6:	42 16       	cp	r4, r18
    24d8:	53 06       	cpc	r5, r19
    24da:	64 06       	cpc	r6, r20
    24dc:	75 06       	cpc	r7, r21
    24de:	18 f2       	brcs	.-122    	; 0x2466 <main+0x8d2>
    24e0:	02 c0       	rjmp	.+4      	; 0x24e6 <main+0x952>
      int offset = 0;
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->ints_length);
    24e2:	64 e0       	ldi	r22, 0x04	; 4
    24e4:	70 e0       	ldi	r23, 0x00	; 0
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_ints = u_st_ints.real;
      offset += sizeof(this->st_ints);
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
    24e6:	7c 8b       	std	Y+20, r23	; 0x14
    24e8:	6b 8b       	std	Y+19, r22	; 0x13
    24ea:	fb 01       	movw	r30, r22
    24ec:	e7 5b       	subi	r30, 0xB7	; 183
    24ee:	fd 4f       	sbci	r31, 0xFD	; 253
    24f0:	80 81       	ld	r24, Z
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
    24f2:	fb 01       	movw	r30, r22
    24f4:	e6 5b       	subi	r30, 0xB6	; 182
    24f6:	fd 4f       	sbci	r31, 0xFD	; 253
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
    24f8:	90 81       	ld	r25, Z
    24fa:	fb 01       	movw	r30, r22
    24fc:	e5 5b       	subi	r30, 0xB5	; 181
    24fe:	fd 4f       	sbci	r31, 0xFD	; 253
    2500:	40 80       	ld	r4, Z
    2502:	51 2c       	mov	r5, r1
    2504:	61 2c       	mov	r6, r1
    2506:	71 2c       	mov	r7, r1
    2508:	32 01       	movw	r6, r4
    250a:	55 24       	eor	r5, r5
    250c:	44 24       	eor	r4, r4
    250e:	59 2a       	or	r5, r25
    2510:	48 2a       	or	r4, r24
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
    2512:	fb 01       	movw	r30, r22
    2514:	e4 5b       	subi	r30, 0xB4	; 180
    2516:	fd 4f       	sbci	r31, 0xFD	; 253
    2518:	80 81       	ld	r24, Z
    251a:	78 2a       	or	r7, r24
      offset += sizeof(this->floats_length);
    251c:	8b 01       	movw	r16, r22
    251e:	0c 5f       	subi	r16, 0xFC	; 252
    2520:	1f 4f       	sbci	r17, 0xFF	; 255
      if(floats_lengthT > floats_length)
    2522:	f1 01       	movw	r30, r2
    2524:	80 81       	ld	r24, Z
    2526:	91 81       	ldd	r25, Z+1	; 0x01
    2528:	a2 81       	ldd	r26, Z+2	; 0x02
    252a:	b3 81       	ldd	r27, Z+3	; 0x03
    252c:	84 15       	cp	r24, r4
    252e:	95 05       	cpc	r25, r5
    2530:	a6 05       	cpc	r26, r6
    2532:	b7 05       	cpc	r27, r7
    2534:	78 f4       	brcc	.+30     	; 0x2554 <main+0x9c0>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
    2536:	b2 01       	movw	r22, r4
    2538:	66 0f       	add	r22, r22
    253a:	77 1f       	adc	r23, r23
    253c:	66 0f       	add	r22, r22
    253e:	77 1f       	adc	r23, r23
    2540:	a9 ed       	ldi	r26, 0xD9	; 217
    2542:	b6 e0       	ldi	r27, 0x06	; 6
    2544:	8d 91       	ld	r24, X+
    2546:	9c 91       	ld	r25, X
    2548:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <realloc>
    254c:	e9 ed       	ldi	r30, 0xD9	; 217
    254e:	f6 e0       	ldi	r31, 0x06	; 6
    2550:	91 83       	std	Z+1, r25	; 0x01
    2552:	80 83       	st	Z, r24
      floats_length = floats_lengthT;
    2554:	d1 01       	movw	r26, r2
    2556:	4d 92       	st	X+, r4
    2558:	5d 92       	st	X+, r5
    255a:	6d 92       	st	X+, r6
    255c:	7c 92       	st	X, r7
    255e:	13 97       	sbiw	r26, 0x03	; 3
      for( uint32_t i = 0; i < floats_length; i++){
    2560:	45 28       	or	r4, r5
    2562:	46 28       	or	r4, r6
    2564:	47 28       	or	r4, r7
    2566:	09 f4       	brne	.+2      	; 0x256a <main+0x9d6>
    2568:	43 c0       	rjmp	.+134    	; 0x25f0 <main+0xa5c>
    256a:	eb 89       	ldd	r30, Y+19	; 0x13
    256c:	fc 89       	ldd	r31, Y+20	; 0x14
    256e:	ea 5c       	subi	r30, 0xCA	; 202
    2570:	fd 4f       	sbci	r31, 0xFD	; 253
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	40 e0       	ldi	r20, 0x00	; 0
    2578:	50 e0       	ldi	r21, 0x00	; 0
    257a:	ba 01       	movw	r22, r20
      } u_st_floats;
      u_st_floats.base = 0;
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
    257c:	80 8d       	ldd	r24, Z+24	; 0x18
    257e:	41 8c       	ldd	r4, Z+25	; 0x19
    2580:	51 2c       	mov	r5, r1
    2582:	61 2c       	mov	r6, r1
    2584:	71 2c       	mov	r7, r1
    2586:	32 01       	movw	r6, r4
    2588:	55 24       	eor	r5, r5
    258a:	44 24       	eor	r4, r4
    258c:	58 2a       	or	r5, r24
    258e:	87 89       	ldd	r24, Z+23	; 0x17
    2590:	48 2a       	or	r4, r24
    2592:	82 8d       	ldd	r24, Z+26	; 0x1a
    2594:	78 2a       	or	r7, r24
      this->st_floats = u_st_floats.real;
    2596:	c2 01       	movw	r24, r4
    2598:	a5 ed       	ldi	r26, 0xD5	; 213
    259a:	b6 e0       	ldi	r27, 0x06	; 6
    259c:	4d 92       	st	X+, r4
    259e:	5d 92       	st	X+, r5
    25a0:	6d 92       	st	X+, r6
    25a2:	7c 92       	st	X, r7
    25a4:	13 97       	sbiw	r26, 0x03	; 3
    25a6:	0c 5f       	subi	r16, 0xFC	; 252
    25a8:	1f 4f       	sbci	r17, 0xFF	; 255
      offset += sizeof(this->st_floats);
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
    25aa:	a9 ed       	ldi	r26, 0xD9	; 217
    25ac:	b6 e0       	ldi	r27, 0x06	; 6
    25ae:	6d 90       	ld	r6, X+
    25b0:	7c 90       	ld	r7, X
    25b2:	d3 01       	movw	r26, r6
    25b4:	a2 0f       	add	r26, r18
    25b6:	b3 1f       	adc	r27, r19
    25b8:	11 96       	adiw	r26, 0x01	; 1
    25ba:	9c 93       	st	X, r25
    25bc:	8e 93       	st	-X, r24
    25be:	80 91 d7 06 	lds	r24, 0x06D7	; 0x8006d7 <nh+0x4a1>
    25c2:	90 91 d8 06 	lds	r25, 0x06D8	; 0x8006d8 <nh+0x4a2>
    25c6:	13 96       	adiw	r26, 0x03	; 3
    25c8:	9c 93       	st	X, r25
    25ca:	8e 93       	st	-X, r24
    25cc:	12 97       	sbiw	r26, 0x02	; 2
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->floats_length);
      if(floats_lengthT > floats_length)
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
      floats_length = floats_lengthT;
      for( uint32_t i = 0; i < floats_length; i++){
    25ce:	4f 5f       	subi	r20, 0xFF	; 255
    25d0:	5f 4f       	sbci	r21, 0xFF	; 255
    25d2:	6f 4f       	sbci	r22, 0xFF	; 255
    25d4:	7f 4f       	sbci	r23, 0xFF	; 255
    25d6:	2c 5f       	subi	r18, 0xFC	; 252
    25d8:	3f 4f       	sbci	r19, 0xFF	; 255
    25da:	34 96       	adiw	r30, 0x04	; 4
    25dc:	d1 01       	movw	r26, r2
    25de:	4d 90       	ld	r4, X+
    25e0:	5d 90       	ld	r5, X+
    25e2:	6d 90       	ld	r6, X+
    25e4:	7c 90       	ld	r7, X
    25e6:	44 15       	cp	r20, r4
    25e8:	55 05       	cpc	r21, r5
    25ea:	66 05       	cpc	r22, r6
    25ec:	77 05       	cpc	r23, r7
    25ee:	30 f2       	brcs	.-116    	; 0x257c <main+0x9e8>
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_floats = u_st_floats.real;
      offset += sizeof(this->st_floats);
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
    25f0:	f8 01       	movw	r30, r16
    25f2:	e7 5b       	subi	r30, 0xB7	; 183
    25f4:	fd 4f       	sbci	r31, 0xFD	; 253
    25f6:	80 81       	ld	r24, Z
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
    25f8:	f8 01       	movw	r30, r16
    25fa:	e6 5b       	subi	r30, 0xB6	; 182
    25fc:	fd 4f       	sbci	r31, 0xFD	; 253
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
    25fe:	90 81       	ld	r25, Z
    2600:	f8 01       	movw	r30, r16
    2602:	e5 5b       	subi	r30, 0xB5	; 181
    2604:	fd 4f       	sbci	r31, 0xFD	; 253
    2606:	40 80       	ld	r4, Z
    2608:	51 2c       	mov	r5, r1
    260a:	61 2c       	mov	r6, r1
    260c:	71 2c       	mov	r7, r1
    260e:	32 01       	movw	r6, r4
    2610:	55 24       	eor	r5, r5
    2612:	44 24       	eor	r4, r4
    2614:	59 2a       	or	r5, r25
    2616:	48 2a       	or	r4, r24
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
    2618:	f8 01       	movw	r30, r16
    261a:	e4 5b       	subi	r30, 0xB4	; 180
    261c:	fd 4f       	sbci	r31, 0xFD	; 253
    261e:	80 81       	ld	r24, Z
    2620:	78 2a       	or	r7, r24
      offset += sizeof(this->strings_length);
    2622:	0c 5f       	subi	r16, 0xFC	; 252
    2624:	1f 4f       	sbci	r17, 0xFF	; 255
      if(strings_lengthT > strings_length)
    2626:	eb ed       	ldi	r30, 0xDB	; 219
    2628:	f6 e0       	ldi	r31, 0x06	; 6
    262a:	80 81       	ld	r24, Z
    262c:	91 81       	ldd	r25, Z+1	; 0x01
    262e:	a2 81       	ldd	r26, Z+2	; 0x02
    2630:	b3 81       	ldd	r27, Z+3	; 0x03
    2632:	84 15       	cp	r24, r4
    2634:	95 05       	cpc	r25, r5
    2636:	a6 05       	cpc	r26, r6
    2638:	b7 05       	cpc	r27, r7
    263a:	68 f4       	brcc	.+26     	; 0x2656 <main+0xac2>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
    263c:	b2 01       	movw	r22, r4
    263e:	66 0f       	add	r22, r22
    2640:	77 1f       	adc	r23, r23
    2642:	a1 ee       	ldi	r26, 0xE1	; 225
    2644:	b6 e0       	ldi	r27, 0x06	; 6
    2646:	8d 91       	ld	r24, X+
    2648:	9c 91       	ld	r25, X
    264a:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <realloc>
    264e:	e1 ee       	ldi	r30, 0xE1	; 225
    2650:	f6 e0       	ldi	r31, 0x06	; 6
    2652:	91 83       	std	Z+1, r25	; 0x01
    2654:	80 83       	st	Z, r24
      strings_length = strings_lengthT;
    2656:	ab ed       	ldi	r26, 0xDB	; 219
    2658:	b6 e0       	ldi	r27, 0x06	; 6
    265a:	4d 92       	st	X+, r4
    265c:	5d 92       	st	X+, r5
    265e:	6d 92       	st	X+, r6
    2660:	7c 92       	st	X, r7
    2662:	13 97       	sbiw	r26, 0x03	; 3
      for( uint32_t i = 0; i < strings_length; i++){
    2664:	45 28       	or	r4, r5
    2666:	46 28       	or	r4, r6
    2668:	47 28       	or	r4, r7
    266a:	09 f4       	brne	.+2      	; 0x266e <main+0xada>
    266c:	82 c0       	rjmp	.+260    	; 0x2772 <main+0xbde>
    266e:	18 8e       	std	Y+24, r1	; 0x18
    2670:	1f 8a       	std	Y+23, r1	; 0x17
    2672:	1b 8a       	std	Y+19, r1	; 0x13
    2674:	1c 8a       	std	Y+20, r1	; 0x14
    2676:	1d 8a       	std	Y+21, r1	; 0x15
    2678:	1e 8a       	std	Y+22, r1	; 0x16
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
    267a:	1c 8f       	std	Y+28, r17	; 0x1c
    267c:	0b 8f       	std	Y+27, r16	; 0x1b
    267e:	f8 01       	movw	r30, r16
    2680:	e7 5b       	subi	r30, 0xB7	; 183
    2682:	fd 4f       	sbci	r31, 0xFD	; 253
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	30 e0       	ldi	r19, 0x00	; 0

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
  {
    var = 0;
    2688:	41 2c       	mov	r4, r1
    268a:	51 2c       	mov	r5, r1
    268c:	32 01       	movw	r6, r4
    for (size_t i = 0; i < sizeof(V); i++)
      var |= (arr[i] << (8 * i));
    268e:	81 91       	ld	r24, Z+
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	02 2e       	mov	r0, r18
    2694:	02 c0       	rjmp	.+4      	; 0x269a <main+0xb06>
    2696:	88 0f       	add	r24, r24
    2698:	99 1f       	adc	r25, r25
    269a:	0a 94       	dec	r0
    269c:	e2 f7       	brpl	.-8      	; 0x2696 <main+0xb02>
    269e:	09 2e       	mov	r0, r25
    26a0:	00 0c       	add	r0, r0
    26a2:	aa 0b       	sbc	r26, r26
    26a4:	bb 0b       	sbc	r27, r27
    26a6:	48 2a       	or	r4, r24
    26a8:	59 2a       	or	r5, r25
    26aa:	6a 2a       	or	r6, r26
    26ac:	7b 2a       	or	r7, r27
    26ae:	28 5f       	subi	r18, 0xF8	; 248
    26b0:	3f 4f       	sbci	r19, 0xFF	; 255
  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
  {
    var = 0;
    for (size_t i = 0; i < sizeof(V); i++)
    26b2:	20 32       	cpi	r18, 0x20	; 32
    26b4:	31 05       	cpc	r19, r1
    26b6:	59 f7       	brne	.-42     	; 0x268e <main+0xafa>
      offset += 4;
    26b8:	d8 01       	movw	r26, r16
    26ba:	14 96       	adiw	r26, 0x04	; 4
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
    26bc:	8d 01       	movw	r16, r26
    26be:	0b 2e       	mov	r0, r27
    26c0:	00 0c       	add	r0, r0
    26c2:	22 0b       	sbc	r18, r18
    26c4:	33 0b       	sbc	r19, r19
    26c6:	04 0d       	add	r16, r4
    26c8:	15 1d       	adc	r17, r5
    26ca:	26 1d       	adc	r18, r6
    26cc:	37 1d       	adc	r19, r7
    26ce:	ad 01       	movw	r20, r26
    26d0:	60 e0       	ldi	r22, 0x00	; 0
    26d2:	70 e0       	ldi	r23, 0x00	; 0
    26d4:	40 17       	cp	r20, r16
    26d6:	51 07       	cpc	r21, r17
    26d8:	62 07       	cpc	r22, r18
    26da:	73 07       	cpc	r23, r19
    26dc:	80 f4       	brcc	.+32     	; 0x26fe <main+0xb6a>
    26de:	eb 8d       	ldd	r30, Y+27	; 0x1b
    26e0:	fc 8d       	ldd	r31, Y+28	; 0x1c
    26e2:	e4 5b       	subi	r30, 0xB4	; 180
    26e4:	fd 4f       	sbci	r31, 0xFD	; 253
    26e6:	cd 01       	movw	r24, r26
          inbuffer[k-1]=inbuffer[k];
    26e8:	41 81       	ldd	r20, Z+1	; 0x01
    26ea:	41 93       	st	Z+, r20
      strings_length = strings_lengthT;
      for( uint32_t i = 0; i < strings_length; i++){
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
    26ec:	01 96       	adiw	r24, 0x01	; 1
    26ee:	ac 01       	movw	r20, r24
    26f0:	60 e0       	ldi	r22, 0x00	; 0
    26f2:	70 e0       	ldi	r23, 0x00	; 0
    26f4:	40 17       	cp	r20, r16
    26f6:	51 07       	cpc	r21, r17
    26f8:	62 07       	cpc	r22, r18
    26fa:	73 07       	cpc	r23, r19
    26fc:	a8 f3       	brcs	.-22     	; 0x26e8 <main+0xb54>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_st_strings-1]=0;
    26fe:	cd 01       	movw	r24, r26
    2700:	84 0d       	add	r24, r4
    2702:	95 1d       	adc	r25, r5
    2704:	fc 01       	movw	r30, r24
    2706:	e8 5b       	subi	r30, 0xB8	; 184
    2708:	fd 4f       	sbci	r31, 0xFD	; 253
    270a:	10 82       	st	Z, r1
      this->st_strings = (char *)(inbuffer + offset-1);
    270c:	a8 5b       	subi	r26, 0xB8	; 184
    270e:	bd 4f       	sbci	r27, 0xFD	; 253
    2710:	ef ed       	ldi	r30, 0xDF	; 223
    2712:	f6 e0       	ldi	r31, 0x06	; 6
    2714:	b1 83       	std	Z+1, r27	; 0x01
    2716:	a0 83       	st	Z, r26
      offset += length_st_strings;
    2718:	8c 01       	movw	r16, r24
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
    271a:	e1 ee       	ldi	r30, 0xE1	; 225
    271c:	f6 e0       	ldi	r31, 0x06	; 6
    271e:	20 81       	ld	r18, Z
    2720:	31 81       	ldd	r19, Z+1	; 0x01
    2722:	ef 89       	ldd	r30, Y+23	; 0x17
    2724:	f8 8d       	ldd	r31, Y+24	; 0x18
    2726:	e2 0f       	add	r30, r18
    2728:	f3 1f       	adc	r31, r19
    272a:	b1 83       	std	Z+1, r27	; 0x01
    272c:	a0 83       	st	Z, r26
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->strings_length);
      if(strings_lengthT > strings_length)
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
      strings_length = strings_lengthT;
      for( uint32_t i = 0; i < strings_length; i++){
    272e:	2b 89       	ldd	r18, Y+19	; 0x13
    2730:	3c 89       	ldd	r19, Y+20	; 0x14
    2732:	4d 89       	ldd	r20, Y+21	; 0x15
    2734:	5e 89       	ldd	r21, Y+22	; 0x16
    2736:	2f 5f       	subi	r18, 0xFF	; 255
    2738:	3f 4f       	sbci	r19, 0xFF	; 255
    273a:	4f 4f       	sbci	r20, 0xFF	; 255
    273c:	5f 4f       	sbci	r21, 0xFF	; 255
    273e:	2b 8b       	std	Y+19, r18	; 0x13
    2740:	3c 8b       	std	Y+20, r19	; 0x14
    2742:	4d 8b       	std	Y+21, r20	; 0x15
    2744:	5e 8b       	std	Y+22, r21	; 0x16
    2746:	4f 89       	ldd	r20, Y+23	; 0x17
    2748:	58 8d       	ldd	r21, Y+24	; 0x18
    274a:	4e 5f       	subi	r20, 0xFE	; 254
    274c:	5f 4f       	sbci	r21, 0xFF	; 255
    274e:	58 8f       	std	Y+24, r21	; 0x18
    2750:	4f 8b       	std	Y+23, r20	; 0x17
    2752:	eb ed       	ldi	r30, 0xDB	; 219
    2754:	f6 e0       	ldi	r31, 0x06	; 6
    2756:	80 81       	ld	r24, Z
    2758:	91 81       	ldd	r25, Z+1	; 0x01
    275a:	a2 81       	ldd	r26, Z+2	; 0x02
    275c:	b3 81       	ldd	r27, Z+3	; 0x03
    275e:	4b 88       	ldd	r4, Y+19	; 0x13
    2760:	5c 88       	ldd	r5, Y+20	; 0x14
    2762:	6d 88       	ldd	r6, Y+21	; 0x15
    2764:	7e 88       	ldd	r7, Y+22	; 0x16
    2766:	48 16       	cp	r4, r24
    2768:	59 06       	cpc	r5, r25
    276a:	6a 06       	cpc	r6, r26
    276c:	7b 06       	cpc	r7, r27
    276e:	08 f4       	brcc	.+2      	; 0x2772 <main+0xbde>
    2770:	84 cf       	rjmp	.-248    	; 0x267a <main+0xae6>
          {
            req_param_resp.deserialize(message_in);
            param_recieved = true;
    2772:	81 e0       	ldi	r24, 0x01	; 1
    2774:	80 93 c4 06 	sts	0x06C4, r24	; 0x8006c4 <nh+0x48e>
    2778:	3d cb       	rjmp	.-2438   	; 0x1df4 <main+0x260>
          }
          else if (topic_ == TopicInfo::ID_TX_STOP)
    277a:	8b 30       	cpi	r24, 0x0B	; 11
    277c:	91 05       	cpc	r25, r1
    277e:	19 f4       	brne	.+6      	; 0x2786 <main+0xbf2>
          {
            configured_ = false;
    2780:	10 92 b7 06 	sts	0x06B7, r1	; 0x8006b7 <nh+0x481>
    2784:	37 cb       	rjmp	.-2450   	; 0x1df4 <main+0x260>
          }
          else
          {
            if (subscribers[topic_ - 100])
    2786:	88 0f       	add	r24, r24
    2788:	99 1f       	adc	r25, r25
    278a:	fc 01       	movw	r30, r24
    278c:	ed 54       	subi	r30, 0x4D	; 77
    278e:	fa 4f       	sbci	r31, 0xFA	; 250
    2790:	80 81       	ld	r24, Z
    2792:	91 81       	ldd	r25, Z+1	; 0x01
    2794:	00 97       	sbiw	r24, 0x00	; 0
    2796:	09 f4       	brne	.+2      	; 0x279a <main+0xc06>
    2798:	2d cb       	rjmp	.-2470   	; 0x1df4 <main+0x260>
              subscribers[topic_ - 100]->callback(message_in);
    279a:	dc 01       	movw	r26, r24
    279c:	ed 91       	ld	r30, X+
    279e:	fc 91       	ld	r31, X
    27a0:	01 90       	ld	r0, Z+
    27a2:	f0 81       	ld	r31, Z
    27a4:	e0 2d       	mov	r30, r0
    27a6:	69 e4       	ldi	r22, 0x49	; 73
    27a8:	72 e0       	ldi	r23, 0x02	; 2
    27aa:	09 95       	icall
    27ac:	23 cb       	rjmp	.-2490   	; 0x1df4 <main+0x260>
        }
      }
    }

    /* occasionally sync time */
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
    27ae:	80 91 b7 06 	lds	r24, 0x06B7	; 0x8006b7 <nh+0x481>
    27b2:	88 23       	and	r24, r24
    27b4:	09 f4       	brne	.+2      	; 0x27b8 <main+0xc24>
    27b6:	94 ca       	rjmp	.-2776   	; 0x1ce0 <main+0x14c>
    27b8:	80 91 b8 06 	lds	r24, 0x06B8	; 0x8006b8 <nh+0x482>
    27bc:	90 91 b9 06 	lds	r25, 0x06B9	; 0x8006b9 <nh+0x483>
    27c0:	a0 91 ba 06 	lds	r26, 0x06BA	; 0x8006ba <nh+0x484>
    27c4:	b0 91 bb 06 	lds	r27, 0x06BB	; 0x8006bb <nh+0x485>
    27c8:	26 01       	movw	r4, r12
    27ca:	37 01       	movw	r6, r14
    27cc:	48 1a       	sub	r4, r24
    27ce:	59 0a       	sbc	r5, r25
    27d0:	6a 0a       	sbc	r6, r26
    27d2:	7b 0a       	sbc	r7, r27
    27d4:	25 ec       	ldi	r18, 0xC5	; 197
    27d6:	42 16       	cp	r4, r18
    27d8:	29 e0       	ldi	r18, 0x09	; 9
    27da:	52 06       	cpc	r5, r18
    27dc:	61 04       	cpc	r6, r1
    27de:	71 04       	cpc	r7, r1
    27e0:	08 f4       	brcc	.+2      	; 0x27e4 <main+0xc50>
    27e2:	7e ca       	rjmp	.-2820   	; 0x1ce0 <main+0x14c>
    27e4:	8c ea       	ldi	r24, 0xAC	; 172
    27e6:	91 e0       	ldi	r25, 0x01	; 1
    27e8:	9a 83       	std	Y+2, r25	; 0x02
    27ea:	89 83       	std	Y+1, r24	; 0x01
    27ec:	1b 82       	std	Y+3, r1	; 0x03
    27ee:	1c 82       	std	Y+4, r1	; 0x04
    27f0:	1d 82       	std	Y+5, r1	; 0x05
    27f2:	1e 82       	std	Y+6, r1	; 0x06
    27f4:	1f 82       	std	Y+7, r1	; 0x07
    27f6:	18 86       	std	Y+8, r1	; 0x08
    27f8:	19 86       	std	Y+9, r1	; 0x09
    27fa:	1a 86       	std	Y+10, r1	; 0x0a
   */

  void requestSyncTime()
  {
    std_msgs::Time t;
    publish(TopicInfo::ID_TIME, &t);
    27fc:	06 e3       	ldi	r16, 0x36	; 54
    27fe:	12 e0       	ldi	r17, 0x02	; 2
    2800:	d8 01       	movw	r26, r16
    2802:	ed 91       	ld	r30, X+
    2804:	fc 91       	ld	r31, X
    2806:	01 90       	ld	r0, Z+
    2808:	f0 81       	ld	r31, Z
    280a:	e0 2d       	mov	r30, r0
    280c:	ae 01       	movw	r20, r28
    280e:	4f 5f       	subi	r20, 0xFF	; 255
    2810:	5f 4f       	sbci	r21, 0xFF	; 255
    2812:	6a e0       	ldi	r22, 0x0A	; 10
    2814:	70 e0       	ldi	r23, 0x00	; 0
    2816:	c8 01       	movw	r24, r16
    2818:	09 95       	icall
    281a:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <avr_time_now>
    rt_time = hardware_.time();
    281e:	f8 01       	movw	r30, r16
    2820:	63 83       	std	Z+3, r22	; 0x03
    2822:	74 83       	std	Z+4, r23	; 0x04
    2824:	85 83       	std	Z+5, r24	; 0x05
    2826:	96 83       	std	Z+6, r25	; 0x06

    /* occasionally sync time */
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
    {
      requestSyncTime();
      last_sync_time = c_time;
    2828:	c0 92 b8 06 	sts	0x06B8, r12	; 0x8006b8 <nh+0x482>
    282c:	d0 92 b9 06 	sts	0x06B9, r13	; 0x8006b9 <nh+0x483>
    2830:	e0 92 ba 06 	sts	0x06BA, r14	; 0x8006ba <nh+0x484>
    2834:	f0 92 bb 06 	sts	0x06BB, r15	; 0x8006bb <nh+0x485>
    2838:	53 ca       	rjmp	.-2906   	; 0x1ce0 <main+0x14c>

0000283a <__vector_1>:
  return 0;
}


ISR(INT0_vect)
{
    283a:	1f 92       	push	r1
    283c:	0f 92       	push	r0
    283e:	0f b6       	in	r0, 0x3f	; 63
    2840:	0f 92       	push	r0
    2842:	11 24       	eor	r1, r1
    2844:	4f 93       	push	r20
    2846:	5f 93       	push	r21
    2848:	6f 93       	push	r22
    284a:	7f 93       	push	r23
    284c:	8f 93       	push	r24
    284e:	9f 93       	push	r25
    2850:	ef 93       	push	r30
    2852:	ff 93       	push	r31
	
	uint8_t s = state & 0b00000011;
    2854:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <state>
    2858:	83 70       	andi	r24, 0x03	; 3
	if (((PIND&0b00000100)==4))
    285a:	82 99       	sbic	0x10, 2	; 16
	{
		s |= 4;
    285c:	84 60       	ori	r24, 0x04	; 4
	}
	if (((PIND&0b00001000)==8))
    285e:	83 99       	sbic	0x10, 3	; 16
	{
		s |= 8;
    2860:	88 60       	ori	r24, 0x08	; 8
	}
	
	switch (s)
    2862:	48 2f       	mov	r20, r24
    2864:	50 e0       	ldi	r21, 0x00	; 0
    2866:	40 31       	cpi	r20, 0x10	; 16
    2868:	51 05       	cpc	r21, r1
    286a:	08 f0       	brcs	.+2      	; 0x286e <__vector_1+0x34>
    286c:	44 c0       	rjmp	.+136    	; 0x28f6 <__vector_1+0xbc>
    286e:	fa 01       	movw	r30, r20
    2870:	e6 5d       	subi	r30, 0xD6	; 214
    2872:	ff 4f       	sbci	r31, 0xFF	; 255
    2874:	0c 94 d0 1b 	jmp	0x37a0	; 0x37a0 <__tablejump2__>
	{
		case 0: case 5: case 10: case 15:
		break;
		case 1: case 7: case 8: case 14:
		pulse_count ++; break;
    2878:	40 91 ef 06 	lds	r20, 0x06EF	; 0x8006ef <pulse_count>
    287c:	50 91 f0 06 	lds	r21, 0x06F0	; 0x8006f0 <pulse_count+0x1>
    2880:	60 91 f1 06 	lds	r22, 0x06F1	; 0x8006f1 <pulse_count+0x2>
    2884:	70 91 f2 06 	lds	r23, 0x06F2	; 0x8006f2 <pulse_count+0x3>
    2888:	4f 5f       	subi	r20, 0xFF	; 255
    288a:	5f 4f       	sbci	r21, 0xFF	; 255
    288c:	6f 4f       	sbci	r22, 0xFF	; 255
    288e:	7f 4f       	sbci	r23, 0xFF	; 255
    2890:	40 93 ef 06 	sts	0x06EF, r20	; 0x8006ef <pulse_count>
    2894:	50 93 f0 06 	sts	0x06F0, r21	; 0x8006f0 <pulse_count+0x1>
    2898:	60 93 f1 06 	sts	0x06F1, r22	; 0x8006f1 <pulse_count+0x2>
    289c:	70 93 f2 06 	sts	0x06F2, r23	; 0x8006f2 <pulse_count+0x3>
    28a0:	3e c0       	rjmp	.+124    	; 0x291e <__vector_1+0xe4>
		case 2: case 4: case 11: case 13:
		pulse_count --; break;
    28a2:	40 91 ef 06 	lds	r20, 0x06EF	; 0x8006ef <pulse_count>
    28a6:	50 91 f0 06 	lds	r21, 0x06F0	; 0x8006f0 <pulse_count+0x1>
    28aa:	60 91 f1 06 	lds	r22, 0x06F1	; 0x8006f1 <pulse_count+0x2>
    28ae:	70 91 f2 06 	lds	r23, 0x06F2	; 0x8006f2 <pulse_count+0x3>
    28b2:	41 50       	subi	r20, 0x01	; 1
    28b4:	51 09       	sbc	r21, r1
    28b6:	61 09       	sbc	r22, r1
    28b8:	71 09       	sbc	r23, r1
    28ba:	40 93 ef 06 	sts	0x06EF, r20	; 0x8006ef <pulse_count>
    28be:	50 93 f0 06 	sts	0x06F0, r21	; 0x8006f0 <pulse_count+0x1>
    28c2:	60 93 f1 06 	sts	0x06F1, r22	; 0x8006f1 <pulse_count+0x2>
    28c6:	70 93 f2 06 	sts	0x06F2, r23	; 0x8006f2 <pulse_count+0x3>
    28ca:	29 c0       	rjmp	.+82     	; 0x291e <__vector_1+0xe4>
		case 3: case 12:
		pulse_count += 2; break;
    28cc:	40 91 ef 06 	lds	r20, 0x06EF	; 0x8006ef <pulse_count>
    28d0:	50 91 f0 06 	lds	r21, 0x06F0	; 0x8006f0 <pulse_count+0x1>
    28d4:	60 91 f1 06 	lds	r22, 0x06F1	; 0x8006f1 <pulse_count+0x2>
    28d8:	70 91 f2 06 	lds	r23, 0x06F2	; 0x8006f2 <pulse_count+0x3>
    28dc:	4e 5f       	subi	r20, 0xFE	; 254
    28de:	5f 4f       	sbci	r21, 0xFF	; 255
    28e0:	6f 4f       	sbci	r22, 0xFF	; 255
    28e2:	7f 4f       	sbci	r23, 0xFF	; 255
    28e4:	40 93 ef 06 	sts	0x06EF, r20	; 0x8006ef <pulse_count>
    28e8:	50 93 f0 06 	sts	0x06F0, r21	; 0x8006f0 <pulse_count+0x1>
    28ec:	60 93 f1 06 	sts	0x06F1, r22	; 0x8006f1 <pulse_count+0x2>
    28f0:	70 93 f2 06 	sts	0x06F2, r23	; 0x8006f2 <pulse_count+0x3>
    28f4:	14 c0       	rjmp	.+40     	; 0x291e <__vector_1+0xe4>
		default:
		pulse_count -= 2; break;
    28f6:	40 91 ef 06 	lds	r20, 0x06EF	; 0x8006ef <pulse_count>
    28fa:	50 91 f0 06 	lds	r21, 0x06F0	; 0x8006f0 <pulse_count+0x1>
    28fe:	60 91 f1 06 	lds	r22, 0x06F1	; 0x8006f1 <pulse_count+0x2>
    2902:	70 91 f2 06 	lds	r23, 0x06F2	; 0x8006f2 <pulse_count+0x3>
    2906:	42 50       	subi	r20, 0x02	; 2
    2908:	51 09       	sbc	r21, r1
    290a:	61 09       	sbc	r22, r1
    290c:	71 09       	sbc	r23, r1
    290e:	40 93 ef 06 	sts	0x06EF, r20	; 0x8006ef <pulse_count>
    2912:	50 93 f0 06 	sts	0x06F0, r21	; 0x8006f0 <pulse_count+0x1>
    2916:	60 93 f1 06 	sts	0x06F1, r22	; 0x8006f1 <pulse_count+0x2>
    291a:	70 93 f2 06 	sts	0x06F2, r23	; 0x8006f2 <pulse_count+0x3>
	}
	
	state = (s >> 2);
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	95 95       	asr	r25
    2922:	87 95       	ror	r24
    2924:	95 95       	asr	r25
    2926:	87 95       	ror	r24
    2928:	80 93 e3 06 	sts	0x06E3, r24	; 0x8006e3 <state>
	
}
    292c:	ff 91       	pop	r31
    292e:	ef 91       	pop	r30
    2930:	9f 91       	pop	r25
    2932:	8f 91       	pop	r24
    2934:	7f 91       	pop	r23
    2936:	6f 91       	pop	r22
    2938:	5f 91       	pop	r21
    293a:	4f 91       	pop	r20
    293c:	0f 90       	pop	r0
    293e:	0f be       	out	0x3f, r0	; 63
    2940:	0f 90       	pop	r0
    2942:	1f 90       	pop	r1
    2944:	18 95       	reti

00002946 <__vector_2>:


ISR(INT1_vect)
{
    2946:	1f 92       	push	r1
    2948:	0f 92       	push	r0
    294a:	0f b6       	in	r0, 0x3f	; 63
    294c:	0f 92       	push	r0
    294e:	11 24       	eor	r1, r1
    2950:	4f 93       	push	r20
    2952:	5f 93       	push	r21
    2954:	6f 93       	push	r22
    2956:	7f 93       	push	r23
    2958:	8f 93       	push	r24
    295a:	9f 93       	push	r25
    295c:	ef 93       	push	r30
    295e:	ff 93       	push	r31
	
	uint8_t s = state & 0b00000011;
    2960:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <state>
    2964:	83 70       	andi	r24, 0x03	; 3
	if (((PIND&0b00000100)==4))
    2966:	82 99       	sbic	0x10, 2	; 16
	{
		s |= 4;
    2968:	84 60       	ori	r24, 0x04	; 4
	}
	if (((PIND&0b00001000)==8))
    296a:	83 99       	sbic	0x10, 3	; 16
	{
		s |= 8;
    296c:	88 60       	ori	r24, 0x08	; 8
	}
	switch (s)
    296e:	48 2f       	mov	r20, r24
    2970:	50 e0       	ldi	r21, 0x00	; 0
    2972:	40 31       	cpi	r20, 0x10	; 16
    2974:	51 05       	cpc	r21, r1
    2976:	08 f0       	brcs	.+2      	; 0x297a <__vector_2+0x34>
    2978:	44 c0       	rjmp	.+136    	; 0x2a02 <__vector_2+0xbc>
    297a:	fa 01       	movw	r30, r20
    297c:	e6 5c       	subi	r30, 0xC6	; 198
    297e:	ff 4f       	sbci	r31, 0xFF	; 255
    2980:	0c 94 d0 1b 	jmp	0x37a0	; 0x37a0 <__tablejump2__>
	{
		case 0: case 5: case 10: case 15:
		break;
		case 1: case 7: case 8: case 14:
		pulse_count ++; break;
    2984:	40 91 ef 06 	lds	r20, 0x06EF	; 0x8006ef <pulse_count>
    2988:	50 91 f0 06 	lds	r21, 0x06F0	; 0x8006f0 <pulse_count+0x1>
    298c:	60 91 f1 06 	lds	r22, 0x06F1	; 0x8006f1 <pulse_count+0x2>
    2990:	70 91 f2 06 	lds	r23, 0x06F2	; 0x8006f2 <pulse_count+0x3>
    2994:	4f 5f       	subi	r20, 0xFF	; 255
    2996:	5f 4f       	sbci	r21, 0xFF	; 255
    2998:	6f 4f       	sbci	r22, 0xFF	; 255
    299a:	7f 4f       	sbci	r23, 0xFF	; 255
    299c:	40 93 ef 06 	sts	0x06EF, r20	; 0x8006ef <pulse_count>
    29a0:	50 93 f0 06 	sts	0x06F0, r21	; 0x8006f0 <pulse_count+0x1>
    29a4:	60 93 f1 06 	sts	0x06F1, r22	; 0x8006f1 <pulse_count+0x2>
    29a8:	70 93 f2 06 	sts	0x06F2, r23	; 0x8006f2 <pulse_count+0x3>
    29ac:	3e c0       	rjmp	.+124    	; 0x2a2a <__vector_2+0xe4>
		case 2: case 4: case 11: case 13:
		pulse_count --; break;
    29ae:	40 91 ef 06 	lds	r20, 0x06EF	; 0x8006ef <pulse_count>
    29b2:	50 91 f0 06 	lds	r21, 0x06F0	; 0x8006f0 <pulse_count+0x1>
    29b6:	60 91 f1 06 	lds	r22, 0x06F1	; 0x8006f1 <pulse_count+0x2>
    29ba:	70 91 f2 06 	lds	r23, 0x06F2	; 0x8006f2 <pulse_count+0x3>
    29be:	41 50       	subi	r20, 0x01	; 1
    29c0:	51 09       	sbc	r21, r1
    29c2:	61 09       	sbc	r22, r1
    29c4:	71 09       	sbc	r23, r1
    29c6:	40 93 ef 06 	sts	0x06EF, r20	; 0x8006ef <pulse_count>
    29ca:	50 93 f0 06 	sts	0x06F0, r21	; 0x8006f0 <pulse_count+0x1>
    29ce:	60 93 f1 06 	sts	0x06F1, r22	; 0x8006f1 <pulse_count+0x2>
    29d2:	70 93 f2 06 	sts	0x06F2, r23	; 0x8006f2 <pulse_count+0x3>
    29d6:	29 c0       	rjmp	.+82     	; 0x2a2a <__vector_2+0xe4>
		case 3: case 12:
		pulse_count += 2; break;
    29d8:	40 91 ef 06 	lds	r20, 0x06EF	; 0x8006ef <pulse_count>
    29dc:	50 91 f0 06 	lds	r21, 0x06F0	; 0x8006f0 <pulse_count+0x1>
    29e0:	60 91 f1 06 	lds	r22, 0x06F1	; 0x8006f1 <pulse_count+0x2>
    29e4:	70 91 f2 06 	lds	r23, 0x06F2	; 0x8006f2 <pulse_count+0x3>
    29e8:	4e 5f       	subi	r20, 0xFE	; 254
    29ea:	5f 4f       	sbci	r21, 0xFF	; 255
    29ec:	6f 4f       	sbci	r22, 0xFF	; 255
    29ee:	7f 4f       	sbci	r23, 0xFF	; 255
    29f0:	40 93 ef 06 	sts	0x06EF, r20	; 0x8006ef <pulse_count>
    29f4:	50 93 f0 06 	sts	0x06F0, r21	; 0x8006f0 <pulse_count+0x1>
    29f8:	60 93 f1 06 	sts	0x06F1, r22	; 0x8006f1 <pulse_count+0x2>
    29fc:	70 93 f2 06 	sts	0x06F2, r23	; 0x8006f2 <pulse_count+0x3>
    2a00:	14 c0       	rjmp	.+40     	; 0x2a2a <__vector_2+0xe4>
		default:
		pulse_count -= 2; break;
    2a02:	40 91 ef 06 	lds	r20, 0x06EF	; 0x8006ef <pulse_count>
    2a06:	50 91 f0 06 	lds	r21, 0x06F0	; 0x8006f0 <pulse_count+0x1>
    2a0a:	60 91 f1 06 	lds	r22, 0x06F1	; 0x8006f1 <pulse_count+0x2>
    2a0e:	70 91 f2 06 	lds	r23, 0x06F2	; 0x8006f2 <pulse_count+0x3>
    2a12:	42 50       	subi	r20, 0x02	; 2
    2a14:	51 09       	sbc	r21, r1
    2a16:	61 09       	sbc	r22, r1
    2a18:	71 09       	sbc	r23, r1
    2a1a:	40 93 ef 06 	sts	0x06EF, r20	; 0x8006ef <pulse_count>
    2a1e:	50 93 f0 06 	sts	0x06F0, r21	; 0x8006f0 <pulse_count+0x1>
    2a22:	60 93 f1 06 	sts	0x06F1, r22	; 0x8006f1 <pulse_count+0x2>
    2a26:	70 93 f2 06 	sts	0x06F2, r23	; 0x8006f2 <pulse_count+0x3>
		
		
	}
	state = (s >> 2);
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	95 95       	asr	r25
    2a2e:	87 95       	ror	r24
    2a30:	95 95       	asr	r25
    2a32:	87 95       	ror	r24
    2a34:	80 93 e3 06 	sts	0x06E3, r24	; 0x8006e3 <state>
	
}
    2a38:	ff 91       	pop	r31
    2a3a:	ef 91       	pop	r30
    2a3c:	9f 91       	pop	r25
    2a3e:	8f 91       	pop	r24
    2a40:	7f 91       	pop	r23
    2a42:	6f 91       	pop	r22
    2a44:	5f 91       	pop	r21
    2a46:	4f 91       	pop	r20
    2a48:	0f 90       	pop	r0
    2a4a:	0f be       	out	0x3f, r0	; 63
    2a4c:	0f 90       	pop	r0
    2a4e:	1f 90       	pop	r1
    2a50:	18 95       	reti

00002a52 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    2a52:	1f 92       	push	r1
    2a54:	0f 92       	push	r0
    2a56:	0f b6       	in	r0, 0x3f	; 63
    2a58:	0f 92       	push	r0
    2a5a:	11 24       	eor	r1, r1
    2a5c:	af 92       	push	r10
    2a5e:	bf 92       	push	r11
    2a60:	cf 92       	push	r12
    2a62:	df 92       	push	r13
    2a64:	ef 92       	push	r14
    2a66:	ff 92       	push	r15
    2a68:	0f 93       	push	r16
    2a6a:	1f 93       	push	r17
    2a6c:	2f 93       	push	r18
    2a6e:	3f 93       	push	r19
    2a70:	4f 93       	push	r20
    2a72:	5f 93       	push	r21
    2a74:	6f 93       	push	r22
    2a76:	7f 93       	push	r23
    2a78:	8f 93       	push	r24
    2a7a:	9f 93       	push	r25
    2a7c:	af 93       	push	r26
    2a7e:	bf 93       	push	r27
    2a80:	cf 93       	push	r28
    2a82:	df 93       	push	r29
    2a84:	ef 93       	push	r30
    2a86:	ff 93       	push	r31
	time_count++;
    2a88:	80 91 ec 06 	lds	r24, 0x06EC	; 0x8006ec <time_count>
    2a8c:	90 91 ed 06 	lds	r25, 0x06ED	; 0x8006ed <time_count+0x1>
    2a90:	01 96       	adiw	r24, 0x01	; 1
    2a92:	90 93 ed 06 	sts	0x06ED, r25	; 0x8006ed <time_count+0x1>
    2a96:	80 93 ec 06 	sts	0x06EC, r24	; 0x8006ec <time_count>

	if (time_count == NUMBER_OVF)
    2a9a:	80 91 ec 06 	lds	r24, 0x06EC	; 0x8006ec <time_count>
    2a9e:	90 91 ed 06 	lds	r25, 0x06ED	; 0x8006ed <time_count+0x1>
    2aa2:	05 97       	sbiw	r24, 0x05	; 5
    2aa4:	09 f0       	breq	.+2      	; 0x2aa8 <__vector_11+0x56>
    2aa6:	df c0       	rjmp	.+446    	; 0x2c66 <__vector_11+0x214>
	{
		theta = init_theta + ((pulse_count*360)/PPR);
    2aa8:	20 91 ef 06 	lds	r18, 0x06EF	; 0x8006ef <pulse_count>
    2aac:	30 91 f0 06 	lds	r19, 0x06F0	; 0x8006f0 <pulse_count+0x1>
    2ab0:	40 91 f1 06 	lds	r20, 0x06F1	; 0x8006f1 <pulse_count+0x2>
    2ab4:	50 91 f2 06 	lds	r21, 0x06F2	; 0x8006f2 <pulse_count+0x3>
    2ab8:	a8 e6       	ldi	r26, 0x68	; 104
    2aba:	b1 e0       	ldi	r27, 0x01	; 1
    2abc:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <__muluhisi3>
    2ac0:	20 e4       	ldi	r18, 0x40	; 64
    2ac2:	3f e1       	ldi	r19, 0x1F	; 31
    2ac4:	40 e0       	ldi	r20, 0x00	; 0
    2ac6:	50 e0       	ldi	r21, 0x00	; 0
    2ac8:	0e 94 b1 1b 	call	0x3762	; 0x3762 <__divmodsi4>
    2acc:	80 91 ea 06 	lds	r24, 0x06EA	; 0x8006ea <init_theta>
    2ad0:	28 0f       	add	r18, r24
    2ad2:	20 93 ee 06 	sts	0x06EE, r18	; 0x8006ee <theta>

		Set_Steer_Postion(GOAL,theta);
    2ad6:	80 91 ee 06 	lds	r24, 0x06EE	; 0x8006ee <theta>
static void Set_Steer_Postion(int16_t Req_Pos , int16_t Steer_Pos )
{
	int16_t Error = 0 ;
	uint16_t PWM = 0 ;

	Error = Req_Pos - Steer_Pos ;
    2ada:	c0 91 e4 06 	lds	r28, 0x06E4	; 0x8006e4 <GOAL>
    2ade:	0c 2e       	mov	r0, r28
    2ae0:	00 0c       	add	r0, r0
    2ae2:	dd 0b       	sbc	r29, r29
    2ae4:	c8 1b       	sub	r28, r24
    2ae6:	d1 09       	sbc	r29, r1
    2ae8:	87 fd       	sbrc	r24, 7
    2aea:	d3 95       	inc	r29

	int32_t PID = (KP * Error) + ( KI * (Error + Last_Error) * (Time_Interval/2)) + ((KD * (Error - Last_Error)) / Time_Interval) ; ;
    2aec:	a0 90 e7 06 	lds	r10, 0x06E7	; 0x8006e7 <Last_Error>
    2af0:	b0 90 e8 06 	lds	r11, 0x06E8	; 0x8006e8 <Last_Error+0x1>

	Volt_Out = Volt_Out + PID ;
    2af4:	ce 01       	movw	r24, r28
    2af6:	8a 0d       	add	r24, r10
    2af8:	9b 1d       	adc	r25, r11
    2afa:	2a ef       	ldi	r18, 0xFA	; 250
    2afc:	28 9f       	mul	r18, r24
    2afe:	b0 01       	movw	r22, r0
    2b00:	29 9f       	mul	r18, r25
    2b02:	70 0d       	add	r23, r0
    2b04:	11 24       	eor	r1, r1
    2b06:	07 2e       	mov	r0, r23
    2b08:	00 0c       	add	r0, r0
    2b0a:	88 0b       	sbc	r24, r24
    2b0c:	99 0b       	sbc	r25, r25
    2b0e:	0e 94 86 1a 	call	0x350c	; 0x350c <__floatsisf>
    2b12:	2d ec       	ldi	r18, 0xCD	; 205
    2b14:	3c ec       	ldi	r19, 0xCC	; 204
    2b16:	4c e4       	ldi	r20, 0x4C	; 76
    2b18:	5d e3       	ldi	r21, 0x3D	; 61
    2b1a:	0e 94 12 1b 	call	0x3624	; 0x3624 <__mulsf3>
    2b1e:	6b 01       	movw	r12, r22
    2b20:	7c 01       	movw	r14, r24
    2b22:	00 e9       	ldi	r16, 0x90	; 144
    2b24:	11 e0       	ldi	r17, 0x01	; 1
    2b26:	c0 9f       	mul	r28, r16
    2b28:	b0 01       	movw	r22, r0
    2b2a:	c1 9f       	mul	r28, r17
    2b2c:	70 0d       	add	r23, r0
    2b2e:	d0 9f       	mul	r29, r16
    2b30:	70 0d       	add	r23, r0
    2b32:	11 24       	eor	r1, r1
    2b34:	07 2e       	mov	r0, r23
    2b36:	00 0c       	add	r0, r0
    2b38:	88 0b       	sbc	r24, r24
    2b3a:	99 0b       	sbc	r25, r25
    2b3c:	0e 94 86 1a 	call	0x350c	; 0x350c <__floatsisf>
    2b40:	9b 01       	movw	r18, r22
    2b42:	ac 01       	movw	r20, r24
    2b44:	c7 01       	movw	r24, r14
    2b46:	b6 01       	movw	r22, r12
    2b48:	0e 94 70 19 	call	0x32e0	; 0x32e0 <__addsf3>
    2b4c:	6b 01       	movw	r12, r22
    2b4e:	7c 01       	movw	r14, r24
    2b50:	ce 01       	movw	r24, r28
    2b52:	8a 19       	sub	r24, r10
    2b54:	9b 09       	sbc	r25, r11
    2b56:	80 9f       	mul	r24, r16
    2b58:	b0 01       	movw	r22, r0
    2b5a:	81 9f       	mul	r24, r17
    2b5c:	70 0d       	add	r23, r0
    2b5e:	90 9f       	mul	r25, r16
    2b60:	70 0d       	add	r23, r0
    2b62:	11 24       	eor	r1, r1
    2b64:	07 2e       	mov	r0, r23
    2b66:	00 0c       	add	r0, r0
    2b68:	88 0b       	sbc	r24, r24
    2b6a:	99 0b       	sbc	r25, r25
    2b6c:	0e 94 86 1a 	call	0x350c	; 0x350c <__floatsisf>
    2b70:	2d ec       	ldi	r18, 0xCD	; 205
    2b72:	3c ec       	ldi	r19, 0xCC	; 204
    2b74:	4c ec       	ldi	r20, 0xCC	; 204
    2b76:	5d e3       	ldi	r21, 0x3D	; 61
    2b78:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <__divsf3>
    2b7c:	9b 01       	movw	r18, r22
    2b7e:	ac 01       	movw	r20, r24
    2b80:	c7 01       	movw	r24, r14
    2b82:	b6 01       	movw	r22, r12
    2b84:	0e 94 70 19 	call	0x32e0	; 0x32e0 <__addsf3>
    2b88:	0e 94 4e 1a 	call	0x349c	; 0x349c <__fixsfsi>
    2b8c:	00 91 e5 06 	lds	r16, 0x06E5	; 0x8006e5 <Volt_Out>
    2b90:	10 91 e6 06 	lds	r17, 0x06E6	; 0x8006e6 <Volt_Out+0x1>
    2b94:	06 0f       	add	r16, r22
    2b96:	17 1f       	adc	r17, r23
    2b98:	10 93 e6 06 	sts	0x06E6, r17	; 0x8006e6 <Volt_Out+0x1>
    2b9c:	00 93 e5 06 	sts	0x06E5, r16	; 0x8006e5 <Volt_Out>

	Last_Error = Error;
    2ba0:	d0 93 e8 06 	sts	0x06E8, r29	; 0x8006e8 <Last_Error+0x1>
    2ba4:	c0 93 e7 06 	sts	0x06E7, r28	; 0x8006e7 <Last_Error>

	if (Volt_Out >= Max_Volt_out)
    2ba8:	00 3e       	cpi	r16, 0xE0	; 224
    2baa:	8e e2       	ldi	r24, 0x2E	; 46
    2bac:	18 07       	cpc	r17, r24
    2bae:	4c f0       	brlt	.+18     	; 0x2bc2 <__vector_11+0x170>
	{
		Volt_Out = Max_Volt_out ;
    2bb0:	80 ee       	ldi	r24, 0xE0	; 224
    2bb2:	9e e2       	ldi	r25, 0x2E	; 46
    2bb4:	90 93 e6 06 	sts	0x06E6, r25	; 0x8006e6 <Volt_Out+0x1>
    2bb8:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <Volt_Out>
	else if (Volt_Out < Min_Volt_out)
	{
		Volt_Out = Min_Volt_out ;
	}

	PWM = abs(Volt_Out) * PWM_VOLT_RATIO;
    2bbc:	cf ef       	ldi	r28, 0xFF	; 255
    2bbe:	d3 e0       	ldi	r29, 0x03	; 3
    2bc0:	26 c0       	rjmp	.+76     	; 0x2c0e <__vector_11+0x1bc>

	if (Volt_Out >= Max_Volt_out)
	{
		Volt_Out = Max_Volt_out ;
	}
	else if (Volt_Out < Min_Volt_out)
    2bc2:	00 32       	cpi	r16, 0x20	; 32
    2bc4:	81 ed       	ldi	r24, 0xD1	; 209
    2bc6:	18 07       	cpc	r17, r24
    2bc8:	4c f4       	brge	.+18     	; 0x2bdc <__vector_11+0x18a>
	{
		Volt_Out = Min_Volt_out ;
    2bca:	80 e2       	ldi	r24, 0x20	; 32
    2bcc:	91 ed       	ldi	r25, 0xD1	; 209
    2bce:	90 93 e6 06 	sts	0x06E6, r25	; 0x8006e6 <Volt_Out+0x1>
    2bd2:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <Volt_Out>
	}

	PWM = abs(Volt_Out) * PWM_VOLT_RATIO;
    2bd6:	cf ef       	ldi	r28, 0xFF	; 255
    2bd8:	d3 e0       	ldi	r29, 0x03	; 3
    2bda:	2b c0       	rjmp	.+86     	; 0x2c32 <__vector_11+0x1e0>
    2bdc:	b8 01       	movw	r22, r16
    2bde:	11 23       	and	r17, r17
    2be0:	24 f4       	brge	.+8      	; 0x2bea <__vector_11+0x198>
    2be2:	66 27       	eor	r22, r22
    2be4:	77 27       	eor	r23, r23
    2be6:	60 1b       	sub	r22, r16
    2be8:	71 0b       	sbc	r23, r17
    2bea:	07 2e       	mov	r0, r23
    2bec:	00 0c       	add	r0, r0
    2bee:	88 0b       	sbc	r24, r24
    2bf0:	99 0b       	sbc	r25, r25
    2bf2:	0e 94 86 1a 	call	0x350c	; 0x350c <__floatsisf>
    2bf6:	2d e8       	ldi	r18, 0x8D	; 141
    2bf8:	37 e9       	ldi	r19, 0x97	; 151
    2bfa:	4e ea       	ldi	r20, 0xAE	; 174
    2bfc:	5d e3       	ldi	r21, 0x3D	; 61
    2bfe:	0e 94 12 1b 	call	0x3624	; 0x3624 <__mulsf3>
    2c02:	0e 94 55 1a 	call	0x34aa	; 0x34aa <__fixunssfsi>
    2c06:	eb 01       	movw	r28, r22

	if (Volt_Out > 0)
    2c08:	10 16       	cp	r1, r16
    2c0a:	11 06       	cpc	r1, r17
    2c0c:	84 f4       	brge	.+32     	; 0x2c2e <__vector_11+0x1dc>

void Motor_Dirction(uint8_t dir, uint16_t pwm)
{
	if (dir == LEFT_DIR)
	{
		DIO_VidSetPinValue(PORTD, PIN4, HIGH);
    2c0e:	4f ef       	ldi	r20, 0xFF	; 255
    2c10:	64 e0       	ldi	r22, 0x04	; 4
    2c12:	83 e0       	ldi	r24, 0x03	; 3
    2c14:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(PORTD, PIN6, LOW);
    2c18:	40 e0       	ldi	r20, 0x00	; 0
    2c1a:	66 e0       	ldi	r22, 0x06	; 6
    2c1c:	83 e0       	ldi	r24, 0x03	; 3
    2c1e:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <DIO_VidSetPinValue>
	}
	else
	{
		/* do nothing */
	}
	Fast_PWM1_init(TIMER_PRESCALER_256, pwm, OC1A);
    2c22:	40 e0       	ldi	r20, 0x00	; 0
    2c24:	be 01       	movw	r22, r28
    2c26:	84 e0       	ldi	r24, 0x04	; 4
    2c28:	0e 94 86 18 	call	0x310c	; 0x310c <Fast_PWM1_init>
    2c2c:	11 c0       	rjmp	.+34     	; 0x2c50 <__vector_11+0x1fe>

	if (Volt_Out > 0)
	{
		Motor_Dirction(LEFT_DIR, PWM);
	}
	else if (Volt_Out < 0)
    2c2e:	11 23       	and	r17, r17
    2c30:	7c f4       	brge	.+30     	; 0x2c50 <__vector_11+0x1fe>
		DIO_VidSetPinValue(PORTD, PIN4, HIGH);
		DIO_VidSetPinValue(PORTD, PIN6, LOW);
	}
	else if (dir == RIGHT_DIR)
	{
		DIO_VidSetPinValue(PORTD, PIN4, LOW);
    2c32:	40 e0       	ldi	r20, 0x00	; 0
    2c34:	64 e0       	ldi	r22, 0x04	; 4
    2c36:	83 e0       	ldi	r24, 0x03	; 3
    2c38:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(PORTD, PIN6, HIGH);
    2c3c:	4f ef       	ldi	r20, 0xFF	; 255
    2c3e:	66 e0       	ldi	r22, 0x06	; 6
    2c40:	83 e0       	ldi	r24, 0x03	; 3
    2c42:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <DIO_VidSetPinValue>
	}
	else
	{
		/* do nothing */
	}
	Fast_PWM1_init(TIMER_PRESCALER_256, pwm, OC1A);
    2c46:	40 e0       	ldi	r20, 0x00	; 0
    2c48:	be 01       	movw	r22, r28
    2c4a:	84 e0       	ldi	r24, 0x04	; 4
    2c4c:	0e 94 86 18 	call	0x310c	; 0x310c <Fast_PWM1_init>
	{
		theta = init_theta + ((pulse_count*360)/PPR);

		Set_Steer_Postion(GOAL,theta);

		TCNT0 = Init_ticks ;
    2c50:	8c e6       	ldi	r24, 0x6C	; 108
    2c52:	82 bf       	out	0x32, r24	; 50
		time_count = 0;
    2c54:	10 92 ed 06 	sts	0x06ED, r1	; 0x8006ed <time_count+0x1>
    2c58:	10 92 ec 06 	sts	0x06EC, r1	; 0x8006ec <time_count>
		eeprom_count++;
    2c5c:	80 91 eb 06 	lds	r24, 0x06EB	; 0x8006eb <eeprom_count>
    2c60:	8f 5f       	subi	r24, 0xFF	; 255
    2c62:	80 93 eb 06 	sts	0x06EB, r24	; 0x8006eb <eeprom_count>


	}
}
    2c66:	ff 91       	pop	r31
    2c68:	ef 91       	pop	r30
    2c6a:	df 91       	pop	r29
    2c6c:	cf 91       	pop	r28
    2c6e:	bf 91       	pop	r27
    2c70:	af 91       	pop	r26
    2c72:	9f 91       	pop	r25
    2c74:	8f 91       	pop	r24
    2c76:	7f 91       	pop	r23
    2c78:	6f 91       	pop	r22
    2c7a:	5f 91       	pop	r21
    2c7c:	4f 91       	pop	r20
    2c7e:	3f 91       	pop	r19
    2c80:	2f 91       	pop	r18
    2c82:	1f 91       	pop	r17
    2c84:	0f 91       	pop	r16
    2c86:	ff 90       	pop	r15
    2c88:	ef 90       	pop	r14
    2c8a:	df 90       	pop	r13
    2c8c:	cf 90       	pop	r12
    2c8e:	bf 90       	pop	r11
    2c90:	af 90       	pop	r10
    2c92:	0f 90       	pop	r0
    2c94:	0f be       	out	0x3f, r0	; 63
    2c96:	0f 90       	pop	r0
    2c98:	1f 90       	pop	r1
    2c9a:	18 95       	reti

00002c9c <_GLOBAL__sub_I_pulse_count>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
    2c9c:	88 ee       	ldi	r24, 0xE8	; 232
    2c9e:	91 e0       	ldi	r25, 0x01	; 1
    2ca0:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <nh+0x1>
    2ca4:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <nh>
    2ca8:	10 92 b7 06 	sts	0x06B7, r1	; 0x8006b7 <nh+0x481>
      _strings_type * strings;

    RequestParamResponse():
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
    2cac:	80 ed       	ldi	r24, 0xD0	; 208
    2cae:	91 e0       	ldi	r25, 0x01	; 1
    2cb0:	90 93 c6 06 	sts	0x06C6, r25	; 0x8006c6 <nh+0x490>
    2cb4:	80 93 c5 06 	sts	0x06C5, r24	; 0x8006c5 <nh+0x48f>
    2cb8:	10 92 c7 06 	sts	0x06C7, r1	; 0x8006c7 <nh+0x491>
    2cbc:	10 92 c8 06 	sts	0x06C8, r1	; 0x8006c8 <nh+0x492>
    2cc0:	10 92 c9 06 	sts	0x06C9, r1	; 0x8006c9 <nh+0x493>
    2cc4:	10 92 ca 06 	sts	0x06CA, r1	; 0x8006ca <nh+0x494>
    2cc8:	10 92 d0 06 	sts	0x06D0, r1	; 0x8006d0 <nh+0x49a>
    2ccc:	10 92 cf 06 	sts	0x06CF, r1	; 0x8006cf <nh+0x499>
    2cd0:	10 92 d1 06 	sts	0x06D1, r1	; 0x8006d1 <nh+0x49b>
    2cd4:	10 92 d2 06 	sts	0x06D2, r1	; 0x8006d2 <nh+0x49c>
    2cd8:	10 92 d3 06 	sts	0x06D3, r1	; 0x8006d3 <nh+0x49d>
    2cdc:	10 92 d4 06 	sts	0x06D4, r1	; 0x8006d4 <nh+0x49e>
    2ce0:	10 92 da 06 	sts	0x06DA, r1	; 0x8006da <nh+0x4a4>
    2ce4:	10 92 d9 06 	sts	0x06D9, r1	; 0x8006d9 <nh+0x4a3>
    2ce8:	10 92 db 06 	sts	0x06DB, r1	; 0x8006db <nh+0x4a5>
    2cec:	10 92 dc 06 	sts	0x06DC, r1	; 0x8006dc <nh+0x4a6>
    2cf0:	10 92 dd 06 	sts	0x06DD, r1	; 0x8006dd <nh+0x4a7>
    2cf4:	10 92 de 06 	sts	0x06DE, r1	; 0x8006de <nh+0x4a8>
    2cf8:	10 92 e2 06 	sts	0x06E2, r1	; 0x8006e2 <nh+0x4ac>
    2cfc:	10 92 e1 06 	sts	0x06E1, r1	; 0x8006e1 <nh+0x4ab>
    2d00:	89 e4       	ldi	r24, 0x49	; 73
    2d02:	96 e0       	ldi	r25, 0x06	; 6
    2d04:	eb e7       	ldi	r30, 0x7B	; 123
    2d06:	f6 e0       	ldi	r31, 0x06	; 6
    2d08:	dc 01       	movw	r26, r24
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
      publishers[i] = 0;
    2d0a:	1d 92       	st	X+, r1
    2d0c:	1d 92       	st	X+, r1
   */
public:
  NodeHandle_() : configured_(false)
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
    2d0e:	ea 17       	cp	r30, r26
    2d10:	fb 07       	cpc	r31, r27
    2d12:	d9 f7       	brne	.-10     	; 0x2d0a <_GLOBAL__sub_I_pulse_count+0x6e>
    2d14:	2d ea       	ldi	r18, 0xAD	; 173
    2d16:	36 e0       	ldi	r19, 0x06	; 6
      publishers[i] = 0;

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
      subscribers[i] = 0;
    2d18:	11 92       	st	Z+, r1
    2d1a:	11 92       	st	Z+, r1
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
      publishers[i] = 0;

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
    2d1c:	2e 17       	cp	r18, r30
    2d1e:	3f 07       	cpc	r19, r31
    2d20:	d9 f7       	brne	.-10     	; 0x2d18 <_GLOBAL__sub_I_pulse_count+0x7c>
    2d22:	a9 e4       	ldi	r26, 0x49	; 73
    2d24:	b2 e0       	ldi	r27, 0x02	; 2
    2d26:	e9 e4       	ldi	r30, 0x49	; 73
    2d28:	f4 e0       	ldi	r31, 0x04	; 4
      subscribers[i] = 0;

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
      message_in[i] = 0;
    2d2a:	1d 92       	st	X+, r1
      publishers[i] = 0;

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
      subscribers[i] = 0;

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
    2d2c:	ea 17       	cp	r30, r26
    2d2e:	fb 07       	cpc	r31, r27
    2d30:	e1 f7       	brne	.-8      	; 0x2d2a <_GLOBAL__sub_I_pulse_count+0x8e>
      message_in[i] = 0;

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
      message_out[i] = 0;
    2d32:	11 92       	st	Z+, r1
      subscribers[i] = 0;

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
      message_in[i] = 0;

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
    2d34:	e8 17       	cp	r30, r24
    2d36:	f9 07       	cpc	r31, r25
    2d38:	e1 f7       	brne	.-8      	; 0x2d32 <_GLOBAL__sub_I_pulse_count+0x96>
    req_param_resp.floats_length = 0;
    req_param_resp.floats = NULL;
    req_param_resp.ints_length = 0;
    req_param_resp.ints = NULL;

    spin_timeout_ = 0;
    2d3a:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <nh+0xf>
    2d3e:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <nh+0x10>
    2d42:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <nh+0x11>
    2d46:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <nh+0x12>
    public:
      typedef int32_t _data_type;
      _data_type data;

    Int32():
      data(0)
    2d4a:	a0 e3       	ldi	r26, 0x30	; 48
    2d4c:	b2 e0       	ldi	r27, 0x02	; 2
    2d4e:	8c ed       	ldi	r24, 0xDC	; 220
    2d50:	91 e0       	ldi	r25, 0x01	; 1
    2d52:	11 96       	adiw	r26, 0x01	; 1
    2d54:	9c 93       	st	X, r25
    2d56:	8e 93       	st	-X, r24
    2d58:	12 96       	adiw	r26, 0x02	; 2
    2d5a:	1d 92       	st	X+, r1
    2d5c:	1d 92       	st	X+, r1
    2d5e:	1d 92       	st	X+, r1
    2d60:	1c 92       	st	X, r1
    2d62:	15 97       	sbiw	r26, 0x05	; 5
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
    2d64:	e6 e2       	ldi	r30, 0x26	; 38
    2d66:	f2 e0       	ldi	r31, 0x02	; 2
    2d68:	2d e8       	ldi	r18, 0x8D	; 141
    2d6a:	31 e0       	ldi	r19, 0x01	; 1
    2d6c:	31 83       	std	Z+1, r19	; 0x01
    2d6e:	20 83       	st	Z, r18
    2d70:	b3 83       	std	Z+3, r27	; 0x03
    2d72:	a2 83       	std	Z+2, r26	; 0x02
    2d74:	11 86       	std	Z+9, r1	; 0x09
    2d76:	10 86       	std	Z+8, r1	; 0x08
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
    cb_(cb),
    endpoint_(endpoint)
    2d78:	e6 e1       	ldi	r30, 0x16	; 22
    2d7a:	f2 e0       	ldi	r31, 0x02	; 2
    2d7c:	22 ef       	ldi	r18, 0xF2	; 242
    2d7e:	31 e0       	ldi	r19, 0x01	; 1
    2d80:	31 83       	std	Z+1, r19	; 0x01
    2d82:	20 83       	st	Z, r18
    2d84:	97 83       	std	Z+7, r25	; 0x07
    2d86:	86 83       	std	Z+6, r24	; 0x06
    2d88:	10 86       	std	Z+8, r1	; 0x08
    2d8a:	11 86       	std	Z+9, r1	; 0x09
    2d8c:	12 86       	std	Z+10, r1	; 0x0a
    2d8e:	13 86       	std	Z+11, r1	; 0x0b
    2d90:	8c eb       	ldi	r24, 0xBC	; 188
    2d92:	92 e0       	ldi	r25, 0x02	; 2
    2d94:	95 87       	std	Z+13, r25	; 0x0d
    2d96:	84 87       	std	Z+12, r24	; 0x0c
    2d98:	81 e0       	ldi	r24, 0x01	; 1
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	97 87       	std	Z+15, r25	; 0x0f
    2d9e:	86 87       	std	Z+14, r24	; 0x0e
  {
    topic_ = topic_name;
    2da0:	89 e9       	ldi	r24, 0x99	; 153
    2da2:	91 e0       	ldi	r25, 0x01	; 1
    2da4:	95 83       	std	Z+5, r25	; 0x05
    2da6:	84 83       	std	Z+4, r24	; 0x04
    2da8:	08 95       	ret

00002daa <__vector_4>:

volatile static uint32_t overflow_ms = 0;

// The Timer2 CTC interrupt handler
ISR(TIMER2_COMP_vect)
{
    2daa:	1f 92       	push	r1
    2dac:	0f 92       	push	r0
    2dae:	0f b6       	in	r0, 0x3f	; 63
    2db0:	0f 92       	push	r0
    2db2:	11 24       	eor	r1, r1
    2db4:	8f 93       	push	r24
    2db6:	9f 93       	push	r25
    2db8:	af 93       	push	r26
    2dba:	bf 93       	push	r27
    overflow_ms++;
    2dbc:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <overflow_ms>
    2dc0:	90 91 f4 06 	lds	r25, 0x06F4	; 0x8006f4 <overflow_ms+0x1>
    2dc4:	a0 91 f5 06 	lds	r26, 0x06F5	; 0x8006f5 <overflow_ms+0x2>
    2dc8:	b0 91 f6 06 	lds	r27, 0x06F6	; 0x8006f6 <overflow_ms+0x3>
    2dcc:	01 96       	adiw	r24, 0x01	; 1
    2dce:	a1 1d       	adc	r26, r1
    2dd0:	b1 1d       	adc	r27, r1
    2dd2:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <overflow_ms>
    2dd6:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <overflow_ms+0x1>
    2dda:	a0 93 f5 06 	sts	0x06F5, r26	; 0x8006f5 <overflow_ms+0x2>
    2dde:	b0 93 f6 06 	sts	0x06F6, r27	; 0x8006f6 <overflow_ms+0x3>
}
    2de2:	bf 91       	pop	r27
    2de4:	af 91       	pop	r26
    2de6:	9f 91       	pop	r25
    2de8:	8f 91       	pop	r24
    2dea:	0f 90       	pop	r0
    2dec:	0f be       	out	0x3f, r0	; 63
    2dee:	0f 90       	pop	r0
    2df0:	1f 90       	pop	r1
    2df2:	18 95       	reti

00002df4 <avr_time_init>:

/* init timer 2 in ctc mode for work as millis function (ros need it )*/
void avr_time_init(void)
{
	/* set ctc mode */
	CLR_BIT(TCCR2,WGM20);
    2df4:	85 b5       	in	r24, 0x25	; 37
    2df6:	8f 7b       	andi	r24, 0xBF	; 191
    2df8:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,WGM21);
    2dfa:	85 b5       	in	r24, 0x25	; 37
    2dfc:	88 60       	ori	r24, 0x08	; 8
    2dfe:	85 bd       	out	0x25, r24	; 37
	/* set timer count */
	OCR2 = ((F_CPU / PRESCALER) / 1000); ;
    2e00:	8b e0       	ldi	r24, 0x0B	; 11
    2e02:	83 bd       	out	0x23, r24	; 35
	/* set  pin OC0 mode */
	CLR_BIT(TCCR2,COM20);
    2e04:	85 b5       	in	r24, 0x25	; 37
    2e06:	8f 7e       	andi	r24, 0xEF	; 239
    2e08:	85 bd       	out	0x25, r24	; 37
	CLR_BIT(TCCR2,COM21);
    2e0a:	85 b5       	in	r24, 0x25	; 37
    2e0c:	8f 7d       	andi	r24, 0xDF	; 223
    2e0e:	85 bd       	out	0x25, r24	; 37
	// Prescale Timer 0 to divide by 1024
	SET_BIT(TCCR2,CS20);
    2e10:	85 b5       	in	r24, 0x25	; 37
    2e12:	81 60       	ori	r24, 0x01	; 1
    2e14:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS21);
    2e16:	85 b5       	in	r24, 0x25	; 37
    2e18:	82 60       	ori	r24, 0x02	; 2
    2e1a:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS22);
    2e1c:	85 b5       	in	r24, 0x25	; 37
    2e1e:	84 60       	ori	r24, 0x04	; 4
    2e20:	85 bd       	out	0x25, r24	; 37
	// Enable Timer 0 overflow interrupt
	SET_BIT(TIMSK,OCIE2);
    2e22:	89 b7       	in	r24, 0x39	; 57
    2e24:	80 68       	ori	r24, 0x80	; 128
    2e26:	89 bf       	out	0x39, r24	; 57
    2e28:	08 95       	ret

00002e2a <avr_time_now>:
// Get the current time in milliseconds
uint32_t avr_time_now(void)
{
  uint32_t now;
  // Disable interrupts 
  cli();
    2e2a:	f8 94       	cli
  now = overflow_ms;
    2e2c:	60 91 f3 06 	lds	r22, 0x06F3	; 0x8006f3 <overflow_ms>
    2e30:	70 91 f4 06 	lds	r23, 0x06F4	; 0x8006f4 <overflow_ms+0x1>
    2e34:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <overflow_ms+0x2>
    2e38:	90 91 f6 06 	lds	r25, 0x06F6	; 0x8006f6 <overflow_ms+0x3>
  sei();
    2e3c:	78 94       	sei

  return now;
    2e3e:	08 95       	ret

00002e40 <avr_uart_init>:
// Initialize the UART
void avr_uart_init(void)
{
	
	/* ENABLE RECEVIER */
	SET_BIT(UCSRB,RXEN);
    2e40:	54 9a       	sbi	0x0a, 4	; 10

	/* ENABLE TRANSMITER */
	SET_BIT(UCSRB,TXEN);
    2e42:	53 9a       	sbi	0x0a, 3	; 10

	/* CLEAR BIT UCSZ2 TO SET 8 BIT */
	CLR_BIT(UCSRB,UCSZ2);
    2e44:	52 98       	cbi	0x0a, 2	; 10

	/* Asynchronous MODE */
	CLR_BIT(UCSRC,UMSEL);
    2e46:	80 b5       	in	r24, 0x20	; 32
    2e48:	8f 7b       	andi	r24, 0xBF	; 191
    2e4a:	80 bd       	out	0x20, r24	; 32

	/* Parity Disabled */
	CLR_BIT(UCSRC,UPM0);
    2e4c:	80 b5       	in	r24, 0x20	; 32
    2e4e:	8f 7e       	andi	r24, 0xEF	; 239
    2e50:	80 bd       	out	0x20, r24	; 32
	CLR_BIT(UCSRC,UPM1);
    2e52:	80 b5       	in	r24, 0x20	; 32
    2e54:	8f 7d       	andi	r24, 0xDF	; 223
    2e56:	80 bd       	out	0x20, r24	; 32

	/* ONE BIT STOP */
	CLR_BIT(UCSRC,USBS);
    2e58:	80 b5       	in	r24, 0x20	; 32
    2e5a:	87 7f       	andi	r24, 0xF7	; 247
    2e5c:	80 bd       	out	0x20, r24	; 32

	/* SET BIT UCSZ0 , UCSZ1  TO SET 8 BIT */
	SET_BIT(UCSRC,UCSZ0);
    2e5e:	80 b5       	in	r24, 0x20	; 32
    2e60:	82 60       	ori	r24, 0x02	; 2
    2e62:	80 bd       	out	0x20, r24	; 32
	SET_BIT(UCSRC,UCSZ1);
    2e64:	80 b5       	in	r24, 0x20	; 32
    2e66:	84 60       	ori	r24, 0x04	; 4
    2e68:	80 bd       	out	0x20, r24	; 32

	/* BUAD RATE SET*/
	UBRRH = (UBRR_VAL >> 8);
    2e6a:	10 bc       	out	0x20, r1	; 32
	UBRRL = UBRR_VAL;
    2e6c:	8c e0       	ldi	r24, 0x0C	; 12
    2e6e:	89 b9       	out	0x09, r24	; 9
    2e70:	08 95       	ret

00002e72 <avr_uart_send_byte>:

// Send one char (blocking)
void avr_uart_send_byte(uint8_t tx_byte)
{
	/* WAIT TELL TX BUFFER IS EMPTY */
	while(READ_BIT(UCSRA,UDRE) == 0);
    2e72:	5d 9b       	sbis	0x0b, 5	; 11
    2e74:	fe cf       	rjmp	.-4      	; 0x2e72 <avr_uart_send_byte>

	/* SET DATA REGSITER WITH DATA TO SEND */
	UDR = tx_byte ;
    2e76:	8c b9       	out	0x0c, r24	; 12
    2e78:	08 95       	ret

00002e7a <avr_uart_receive_byte>:

// Get one char if available, otherwise -1
int16_t avr_uart_receive_byte(void)
{
	/* WAIT TILL A VAILD BYTE AVALIBLE INSIDE RX BUFFER  */
	if(READ_BIT(UCSRA,RXC) != 0 )
    2e7a:	5f 9b       	sbis	0x0b, 7	; 11
    2e7c:	03 c0       	rjmp	.+6      	; 0x2e84 <avr_uart_receive_byte+0xa>
	{
		/* RETURN BYTE RECIVED */
		return UDR ;
    2e7e:	8c b1       	in	r24, 0x0c	; 12
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	08 95       	ret
	}
	else
	{
		return -1 ;
    2e84:	8f ef       	ldi	r24, 0xFF	; 255
    2e86:	9f ef       	ldi	r25, 0xFF	; 255
	}
    2e88:	08 95       	ret

00002e8a <DIO_VidSetPinDirection>:
	}
}

void DIO_VidSetPinDirection(uint8_t PortId , uint8_t Pin , uint8_t Value)
{
	switch(PortId)
    2e8a:	81 30       	cpi	r24, 0x01	; 1
    2e8c:	11 f1       	breq	.+68     	; 0x2ed2 <DIO_VidSetPinDirection+0x48>
    2e8e:	30 f0       	brcs	.+12     	; 0x2e9c <DIO_VidSetPinDirection+0x12>
    2e90:	82 30       	cpi	r24, 0x02	; 2
    2e92:	d1 f1       	breq	.+116    	; 0x2f08 <DIO_VidSetPinDirection+0x7e>
    2e94:	83 30       	cpi	r24, 0x03	; 3
    2e96:	09 f4       	brne	.+2      	; 0x2e9a <DIO_VidSetPinDirection+0x10>
    2e98:	52 c0       	rjmp	.+164    	; 0x2f3e <DIO_VidSetPinDirection+0xb4>
    2e9a:	08 95       	ret
	{
	case 0 :
		if(Value == 0xff)
    2e9c:	4f 3f       	cpi	r20, 0xFF	; 255
    2e9e:	59 f4       	brne	.+22     	; 0x2eb6 <DIO_VidSetPinDirection+0x2c>
		{
			SET_BIT(DDRA_Reg,Pin);
    2ea0:	2a b3       	in	r18, 0x1a	; 26
    2ea2:	81 e0       	ldi	r24, 0x01	; 1
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	02 c0       	rjmp	.+4      	; 0x2eac <DIO_VidSetPinDirection+0x22>
    2ea8:	88 0f       	add	r24, r24
    2eaa:	99 1f       	adc	r25, r25
    2eac:	6a 95       	dec	r22
    2eae:	e2 f7       	brpl	.-8      	; 0x2ea8 <DIO_VidSetPinDirection+0x1e>
    2eb0:	82 2b       	or	r24, r18
    2eb2:	8a bb       	out	0x1a, r24	; 26
    2eb4:	08 95       	ret
		}
		else if(Value == 0)
    2eb6:	41 11       	cpse	r20, r1
    2eb8:	5c c0       	rjmp	.+184    	; 0x2f72 <DIO_VidSetPinDirection+0xe8>
		{
			CLR_BIT(DDRA_Reg,Pin);
    2eba:	2a b3       	in	r18, 0x1a	; 26
    2ebc:	81 e0       	ldi	r24, 0x01	; 1
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	02 c0       	rjmp	.+4      	; 0x2ec6 <DIO_VidSetPinDirection+0x3c>
    2ec2:	88 0f       	add	r24, r24
    2ec4:	99 1f       	adc	r25, r25
    2ec6:	6a 95       	dec	r22
    2ec8:	e2 f7       	brpl	.-8      	; 0x2ec2 <DIO_VidSetPinDirection+0x38>
    2eca:	80 95       	com	r24
    2ecc:	82 23       	and	r24, r18
    2ece:	8a bb       	out	0x1a, r24	; 26
    2ed0:	08 95       	ret
		}
		break;
	case 1 :
		if(Value == 0xff)
    2ed2:	4f 3f       	cpi	r20, 0xFF	; 255
    2ed4:	59 f4       	brne	.+22     	; 0x2eec <DIO_VidSetPinDirection+0x62>
		{
			SET_BIT(DDRB_Reg,Pin);
    2ed6:	27 b3       	in	r18, 0x17	; 23
    2ed8:	81 e0       	ldi	r24, 0x01	; 1
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	02 c0       	rjmp	.+4      	; 0x2ee2 <DIO_VidSetPinDirection+0x58>
    2ede:	88 0f       	add	r24, r24
    2ee0:	99 1f       	adc	r25, r25
    2ee2:	6a 95       	dec	r22
    2ee4:	e2 f7       	brpl	.-8      	; 0x2ede <DIO_VidSetPinDirection+0x54>
    2ee6:	82 2b       	or	r24, r18
    2ee8:	87 bb       	out	0x17, r24	; 23
    2eea:	08 95       	ret
		}
		else if(Value == 0)
    2eec:	41 11       	cpse	r20, r1
    2eee:	41 c0       	rjmp	.+130    	; 0x2f72 <DIO_VidSetPinDirection+0xe8>
		{
			CLR_BIT(DDRB_Reg,Pin);
    2ef0:	27 b3       	in	r18, 0x17	; 23
    2ef2:	81 e0       	ldi	r24, 0x01	; 1
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	02 c0       	rjmp	.+4      	; 0x2efc <DIO_VidSetPinDirection+0x72>
    2ef8:	88 0f       	add	r24, r24
    2efa:	99 1f       	adc	r25, r25
    2efc:	6a 95       	dec	r22
    2efe:	e2 f7       	brpl	.-8      	; 0x2ef8 <DIO_VidSetPinDirection+0x6e>
    2f00:	80 95       	com	r24
    2f02:	82 23       	and	r24, r18
    2f04:	87 bb       	out	0x17, r24	; 23
    2f06:	08 95       	ret
		}
		break;
	case 2 :
		if(Value == 0xff)
    2f08:	4f 3f       	cpi	r20, 0xFF	; 255
    2f0a:	59 f4       	brne	.+22     	; 0x2f22 <DIO_VidSetPinDirection+0x98>
		{
			SET_BIT(DDRC_Reg,Pin);
    2f0c:	24 b3       	in	r18, 0x14	; 20
    2f0e:	81 e0       	ldi	r24, 0x01	; 1
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	02 c0       	rjmp	.+4      	; 0x2f18 <DIO_VidSetPinDirection+0x8e>
    2f14:	88 0f       	add	r24, r24
    2f16:	99 1f       	adc	r25, r25
    2f18:	6a 95       	dec	r22
    2f1a:	e2 f7       	brpl	.-8      	; 0x2f14 <DIO_VidSetPinDirection+0x8a>
    2f1c:	82 2b       	or	r24, r18
    2f1e:	84 bb       	out	0x14, r24	; 20
    2f20:	08 95       	ret
		}
		else if(Value == 0)
    2f22:	41 11       	cpse	r20, r1
    2f24:	26 c0       	rjmp	.+76     	; 0x2f72 <DIO_VidSetPinDirection+0xe8>
		{
			CLR_BIT(DDRC_Reg,Pin);
    2f26:	24 b3       	in	r18, 0x14	; 20
    2f28:	81 e0       	ldi	r24, 0x01	; 1
    2f2a:	90 e0       	ldi	r25, 0x00	; 0
    2f2c:	02 c0       	rjmp	.+4      	; 0x2f32 <DIO_VidSetPinDirection+0xa8>
    2f2e:	88 0f       	add	r24, r24
    2f30:	99 1f       	adc	r25, r25
    2f32:	6a 95       	dec	r22
    2f34:	e2 f7       	brpl	.-8      	; 0x2f2e <DIO_VidSetPinDirection+0xa4>
    2f36:	80 95       	com	r24
    2f38:	82 23       	and	r24, r18
    2f3a:	84 bb       	out	0x14, r24	; 20
    2f3c:	08 95       	ret
		}
		break;
	case 3 :
		if(Value == 0xff)
    2f3e:	4f 3f       	cpi	r20, 0xFF	; 255
    2f40:	59 f4       	brne	.+22     	; 0x2f58 <DIO_VidSetPinDirection+0xce>
		{
			SET_BIT(DDRD_Reg,Pin);
    2f42:	21 b3       	in	r18, 0x11	; 17
    2f44:	81 e0       	ldi	r24, 0x01	; 1
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	02 c0       	rjmp	.+4      	; 0x2f4e <DIO_VidSetPinDirection+0xc4>
    2f4a:	88 0f       	add	r24, r24
    2f4c:	99 1f       	adc	r25, r25
    2f4e:	6a 95       	dec	r22
    2f50:	e2 f7       	brpl	.-8      	; 0x2f4a <DIO_VidSetPinDirection+0xc0>
    2f52:	82 2b       	or	r24, r18
    2f54:	81 bb       	out	0x11, r24	; 17
    2f56:	08 95       	ret
		}
		else if(Value == 0)
    2f58:	41 11       	cpse	r20, r1
    2f5a:	0b c0       	rjmp	.+22     	; 0x2f72 <DIO_VidSetPinDirection+0xe8>
		{
			CLR_BIT(DDRD_Reg,Pin);
    2f5c:	21 b3       	in	r18, 0x11	; 17
    2f5e:	81 e0       	ldi	r24, 0x01	; 1
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	02 c0       	rjmp	.+4      	; 0x2f68 <DIO_VidSetPinDirection+0xde>
    2f64:	88 0f       	add	r24, r24
    2f66:	99 1f       	adc	r25, r25
    2f68:	6a 95       	dec	r22
    2f6a:	e2 f7       	brpl	.-8      	; 0x2f64 <DIO_VidSetPinDirection+0xda>
    2f6c:	80 95       	com	r24
    2f6e:	82 23       	and	r24, r18
    2f70:	81 bb       	out	0x11, r24	; 17
    2f72:	08 95       	ret

00002f74 <DIO_VidSetPinValue>:
	}
}

void DIO_VidSetPinValue(uint8_t PortId , uint8_t Pin , uint8_t Value)
{
	switch(PortId)
    2f74:	81 30       	cpi	r24, 0x01	; 1
    2f76:	11 f1       	breq	.+68     	; 0x2fbc <DIO_VidSetPinValue+0x48>
    2f78:	30 f0       	brcs	.+12     	; 0x2f86 <DIO_VidSetPinValue+0x12>
    2f7a:	82 30       	cpi	r24, 0x02	; 2
    2f7c:	69 f1       	breq	.+90     	; 0x2fd8 <DIO_VidSetPinValue+0x64>
    2f7e:	83 30       	cpi	r24, 0x03	; 3
    2f80:	09 f4       	brne	.+2      	; 0x2f84 <DIO_VidSetPinValue+0x10>
    2f82:	45 c0       	rjmp	.+138    	; 0x300e <DIO_VidSetPinValue+0x9a>
    2f84:	08 95       	ret
	{
	case 0 :
		if(Value == 0xff)
    2f86:	4f 3f       	cpi	r20, 0xFF	; 255
    2f88:	59 f4       	brne	.+22     	; 0x2fa0 <DIO_VidSetPinValue+0x2c>
		{
			SET_BIT(PORTA_Reg,Pin);
    2f8a:	2b b3       	in	r18, 0x1b	; 27
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	02 c0       	rjmp	.+4      	; 0x2f96 <DIO_VidSetPinValue+0x22>
    2f92:	88 0f       	add	r24, r24
    2f94:	99 1f       	adc	r25, r25
    2f96:	6a 95       	dec	r22
    2f98:	e2 f7       	brpl	.-8      	; 0x2f92 <DIO_VidSetPinValue+0x1e>
    2f9a:	82 2b       	or	r24, r18
    2f9c:	8b bb       	out	0x1b, r24	; 27
    2f9e:	08 95       	ret
		}
		else if(Value == 0)
    2fa0:	41 11       	cpse	r20, r1
    2fa2:	4f c0       	rjmp	.+158    	; 0x3042 <DIO_VidSetPinValue+0xce>
		{
			CLR_BIT(PORTA_Reg,Pin);
    2fa4:	2b b3       	in	r18, 0x1b	; 27
    2fa6:	81 e0       	ldi	r24, 0x01	; 1
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	02 c0       	rjmp	.+4      	; 0x2fb0 <DIO_VidSetPinValue+0x3c>
    2fac:	88 0f       	add	r24, r24
    2fae:	99 1f       	adc	r25, r25
    2fb0:	6a 95       	dec	r22
    2fb2:	e2 f7       	brpl	.-8      	; 0x2fac <DIO_VidSetPinValue+0x38>
    2fb4:	80 95       	com	r24
    2fb6:	82 23       	and	r24, r18
    2fb8:	8b bb       	out	0x1b, r24	; 27
    2fba:	08 95       	ret
		}
		break;
	case 1 :
		if(Value == 0xff)
    2fbc:	4f 3f       	cpi	r20, 0xFF	; 255
    2fbe:	09 f0       	breq	.+2      	; 0x2fc2 <DIO_VidSetPinValue+0x4e>
    2fc0:	40 c0       	rjmp	.+128    	; 0x3042 <DIO_VidSetPinValue+0xce>
		{
			SET_BIT(PORTB_Reg,Pin);
    2fc2:	28 b3       	in	r18, 0x18	; 24
    2fc4:	81 e0       	ldi	r24, 0x01	; 1
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	02 c0       	rjmp	.+4      	; 0x2fce <DIO_VidSetPinValue+0x5a>
    2fca:	88 0f       	add	r24, r24
    2fcc:	99 1f       	adc	r25, r25
    2fce:	6a 95       	dec	r22
    2fd0:	e2 f7       	brpl	.-8      	; 0x2fca <DIO_VidSetPinValue+0x56>
    2fd2:	82 2b       	or	r24, r18
    2fd4:	88 bb       	out	0x18, r24	; 24
    2fd6:	08 95       	ret
		{
			CLR_BIT(PORTB_Reg,Pin);
		}
		break;
	case 2 :
		if(Value == 0xff)
    2fd8:	4f 3f       	cpi	r20, 0xFF	; 255
    2fda:	59 f4       	brne	.+22     	; 0x2ff2 <DIO_VidSetPinValue+0x7e>
		{
			SET_BIT(PORTC_Reg,Pin);
    2fdc:	25 b3       	in	r18, 0x15	; 21
    2fde:	81 e0       	ldi	r24, 0x01	; 1
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	02 c0       	rjmp	.+4      	; 0x2fe8 <DIO_VidSetPinValue+0x74>
    2fe4:	88 0f       	add	r24, r24
    2fe6:	99 1f       	adc	r25, r25
    2fe8:	6a 95       	dec	r22
    2fea:	e2 f7       	brpl	.-8      	; 0x2fe4 <DIO_VidSetPinValue+0x70>
    2fec:	82 2b       	or	r24, r18
    2fee:	85 bb       	out	0x15, r24	; 21
    2ff0:	08 95       	ret
		}
		else if(Value == 0)
    2ff2:	41 11       	cpse	r20, r1
    2ff4:	26 c0       	rjmp	.+76     	; 0x3042 <DIO_VidSetPinValue+0xce>
		{
			CLR_BIT(PORTC_Reg,Pin);
    2ff6:	25 b3       	in	r18, 0x15	; 21
    2ff8:	81 e0       	ldi	r24, 0x01	; 1
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
    2ffc:	02 c0       	rjmp	.+4      	; 0x3002 <DIO_VidSetPinValue+0x8e>
    2ffe:	88 0f       	add	r24, r24
    3000:	99 1f       	adc	r25, r25
    3002:	6a 95       	dec	r22
    3004:	e2 f7       	brpl	.-8      	; 0x2ffe <DIO_VidSetPinValue+0x8a>
    3006:	80 95       	com	r24
    3008:	82 23       	and	r24, r18
    300a:	85 bb       	out	0x15, r24	; 21
    300c:	08 95       	ret
		}
		break;
	case 3 :
		if(Value == 0xff)
    300e:	4f 3f       	cpi	r20, 0xFF	; 255
    3010:	59 f4       	brne	.+22     	; 0x3028 <DIO_VidSetPinValue+0xb4>
		{
			SET_BIT(PORTD_Reg,Pin);
    3012:	22 b3       	in	r18, 0x12	; 18
    3014:	81 e0       	ldi	r24, 0x01	; 1
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	02 c0       	rjmp	.+4      	; 0x301e <DIO_VidSetPinValue+0xaa>
    301a:	88 0f       	add	r24, r24
    301c:	99 1f       	adc	r25, r25
    301e:	6a 95       	dec	r22
    3020:	e2 f7       	brpl	.-8      	; 0x301a <DIO_VidSetPinValue+0xa6>
    3022:	82 2b       	or	r24, r18
    3024:	82 bb       	out	0x12, r24	; 18
    3026:	08 95       	ret
		}
		else if(Value == 0)
    3028:	41 11       	cpse	r20, r1
    302a:	0b c0       	rjmp	.+22     	; 0x3042 <DIO_VidSetPinValue+0xce>
		{
			CLR_BIT(PORTD_Reg,Pin);
    302c:	22 b3       	in	r18, 0x12	; 18
    302e:	81 e0       	ldi	r24, 0x01	; 1
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	02 c0       	rjmp	.+4      	; 0x3038 <DIO_VidSetPinValue+0xc4>
    3034:	88 0f       	add	r24, r24
    3036:	99 1f       	adc	r25, r25
    3038:	6a 95       	dec	r22
    303a:	e2 f7       	brpl	.-8      	; 0x3034 <DIO_VidSetPinValue+0xc0>
    303c:	80 95       	com	r24
    303e:	82 23       	and	r24, r18
    3040:	82 bb       	out	0x12, r24	; 18
    3042:	08 95       	ret

00003044 <EEPROM_Write>:
#include "std_macros.h"


void EEPROM_Write (uint16_t address, uint8_t data)
{
	while(EECR&(1<<EEWE));
    3044:	e1 99       	sbic	0x1c, 1	; 28
    3046:	fe cf       	rjmp	.-4      	; 0x3044 <EEPROM_Write>

	
	/* 1-Specify Address*/
	EEAR = address;
    3048:	9f bb       	out	0x1f, r25	; 31
    304a:	8e bb       	out	0x1e, r24	; 30
	/*2-Specify data to be written*/
	EEDR = data;
    304c:	6d bb       	out	0x1d, r22	; 29
	/*3- Set Master Write Enable*/
	SET_BIT(EECR,EEMWE);
    304e:	e2 9a       	sbi	0x1c, 2	; 28
	/*4-set write enable*/
	SET_BIT(EECR,EEWE);
    3050:	e1 9a       	sbi	0x1c, 1	; 28
    3052:	08 95       	ret

00003054 <EEPROM_Read>:
}

uint8_t EEPROM_Read(uint16_t address)
{
	
	while(EECR & (1<<EEWE));
    3054:	e1 99       	sbic	0x1c, 1	; 28
    3056:	fe cf       	rjmp	.-4      	; 0x3054 <EEPROM_Read>

	EEAR = address;
    3058:	9f bb       	out	0x1f, r25	; 31
    305a:	8e bb       	out	0x1e, r24	; 30
	SET_BIT(EECR,EERE);
    305c:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR;
    305e:	8d b3       	in	r24, 0x1d	; 29
    3060:	08 95       	ret

00003062 <FN>:
#include "Fun.h"

void FN()
{
	/* set PD2 and PD3 as input */
	CLR_BIT(DDRD,PD2);
    3062:	8a 98       	cbi	0x11, 2	; 17
	CLR_BIT(DDRD,PD3);
    3064:	8b 98       	cbi	0x11, 3	; 17
	
	/* Pull-up enable PD2,PD3 */
	SET_BIT(PORTD,PD2);
    3066:	92 9a       	sbi	0x12, 2	; 18
	SET_BIT(PORTD,PD3);
    3068:	93 9a       	sbi	0x12, 3	; 18
    306a:	08 95       	ret

0000306c <INT0_Init>:


void INT0_Init(uint8_t INT_MODE )
{ 
	/* Set Global Interrupt Enable */
	sei();
    306c:	78 94       	sei
	
	/* Enable INT0 */
    SET_BIT(GICR,6);  // 6 INT0
    306e:	9b b7       	in	r25, 0x3b	; 59
    3070:	90 64       	ori	r25, 0x40	; 64
    3072:	9b bf       	out	0x3b, r25	; 59

	/* Choose Int Mode */
	if(INT_MODE == Low_Lvl)
    3074:	81 11       	cpse	r24, r1
    3076:	07 c0       	rjmp	.+14     	; 0x3086 <INT0_Init+0x1a>
	{
		CLR_BIT(MCUCR,0); // 0=ISC00
    3078:	85 b7       	in	r24, 0x35	; 53
    307a:	8e 7f       	andi	r24, 0xFE	; 254
    307c:	85 bf       	out	0x35, r24	; 53
		CLR_BIT(MCUCR,1); // 1=ISC01
    307e:	85 b7       	in	r24, 0x35	; 53
    3080:	8d 7f       	andi	r24, 0xFD	; 253
    3082:	85 bf       	out	0x35, r24	; 53
    3084:	08 95       	ret
	}
	else if(INT_MODE == Logical_Change)
    3086:	81 30       	cpi	r24, 0x01	; 1
    3088:	39 f4       	brne	.+14     	; 0x3098 <INT0_Init+0x2c>
	{
		SET_BIT(MCUCR,0);
    308a:	85 b7       	in	r24, 0x35	; 53
    308c:	81 60       	ori	r24, 0x01	; 1
    308e:	85 bf       	out	0x35, r24	; 53
		CLR_BIT(MCUCR,1);
    3090:	85 b7       	in	r24, 0x35	; 53
    3092:	8d 7f       	andi	r24, 0xFD	; 253
    3094:	85 bf       	out	0x35, r24	; 53
    3096:	08 95       	ret
	}
	else if(INT_MODE == Falling_Edge)
    3098:	82 30       	cpi	r24, 0x02	; 2
    309a:	39 f4       	brne	.+14     	; 0x30aa <INT0_Init+0x3e>
	{
		CLR_BIT(MCUCR,0);
    309c:	85 b7       	in	r24, 0x35	; 53
    309e:	8e 7f       	andi	r24, 0xFE	; 254
    30a0:	85 bf       	out	0x35, r24	; 53
		SET_BIT(MCUCR,1);
    30a2:	85 b7       	in	r24, 0x35	; 53
    30a4:	82 60       	ori	r24, 0x02	; 2
    30a6:	85 bf       	out	0x35, r24	; 53
    30a8:	08 95       	ret
	}
	else if(INT_MODE == Rising_Edge)
    30aa:	83 30       	cpi	r24, 0x03	; 3
    30ac:	31 f4       	brne	.+12     	; 0x30ba <INT0_Init+0x4e>
	{
		SET_BIT(MCUCR,0);
    30ae:	85 b7       	in	r24, 0x35	; 53
    30b0:	81 60       	ori	r24, 0x01	; 1
    30b2:	85 bf       	out	0x35, r24	; 53
		SET_BIT(MCUCR,1);
    30b4:	85 b7       	in	r24, 0x35	; 53
    30b6:	82 60       	ori	r24, 0x02	; 2
    30b8:	85 bf       	out	0x35, r24	; 53
    30ba:	08 95       	ret

000030bc <INT1_Init>:
}

void INT1_Init(uint8_t INT_MODE )
{
	/* Set Global Interrupt Enable */
	sei();
    30bc:	78 94       	sei
	
	/* Enable INT1 */
    SET_BIT(GICR,7);
    30be:	9b b7       	in	r25, 0x3b	; 59
    30c0:	90 68       	ori	r25, 0x80	; 128
    30c2:	9b bf       	out	0x3b, r25	; 59

	/* Choose Int Mode */
	if(INT_MODE == Low_Lvl)
    30c4:	81 11       	cpse	r24, r1
    30c6:	07 c0       	rjmp	.+14     	; 0x30d6 <INT1_Init+0x1a>
	{
		CLR_BIT(MCUCR,2);
    30c8:	85 b7       	in	r24, 0x35	; 53
    30ca:	8b 7f       	andi	r24, 0xFB	; 251
    30cc:	85 bf       	out	0x35, r24	; 53
		CLR_BIT(MCUCR,3);
    30ce:	85 b7       	in	r24, 0x35	; 53
    30d0:	87 7f       	andi	r24, 0xF7	; 247
    30d2:	85 bf       	out	0x35, r24	; 53
    30d4:	08 95       	ret
	}
	else if(INT_MODE == Logical_Change)
    30d6:	81 30       	cpi	r24, 0x01	; 1
    30d8:	39 f4       	brne	.+14     	; 0x30e8 <INT1_Init+0x2c>
	{
		SET_BIT(MCUCR,2);
    30da:	85 b7       	in	r24, 0x35	; 53
    30dc:	84 60       	ori	r24, 0x04	; 4
    30de:	85 bf       	out	0x35, r24	; 53
		CLR_BIT(MCUCR,3);
    30e0:	85 b7       	in	r24, 0x35	; 53
    30e2:	87 7f       	andi	r24, 0xF7	; 247
    30e4:	85 bf       	out	0x35, r24	; 53
    30e6:	08 95       	ret
	}
	else if(INT_MODE == Falling_Edge)
    30e8:	82 30       	cpi	r24, 0x02	; 2
    30ea:	39 f4       	brne	.+14     	; 0x30fa <INT1_Init+0x3e>
	{
		CLR_BIT(MCUCR,2);
    30ec:	85 b7       	in	r24, 0x35	; 53
    30ee:	8b 7f       	andi	r24, 0xFB	; 251
    30f0:	85 bf       	out	0x35, r24	; 53
		SET_BIT(MCUCR,3);
    30f2:	85 b7       	in	r24, 0x35	; 53
    30f4:	88 60       	ori	r24, 0x08	; 8
    30f6:	85 bf       	out	0x35, r24	; 53
    30f8:	08 95       	ret
	}
	else if(INT_MODE == Rising_Edge)
    30fa:	83 30       	cpi	r24, 0x03	; 3
    30fc:	31 f4       	brne	.+12     	; 0x310a <INT1_Init+0x4e>
	{
		SET_BIT(MCUCR,2);
    30fe:	85 b7       	in	r24, 0x35	; 53
    3100:	84 60       	ori	r24, 0x04	; 4
    3102:	85 bf       	out	0x35, r24	; 53
		SET_BIT(MCUCR,3);
    3104:	85 b7       	in	r24, 0x35	; 53
    3106:	88 60       	ori	r24, 0x08	; 8
    3108:	85 bf       	out	0x35, r24	; 53
    310a:	08 95       	ret

0000310c <Fast_PWM1_init>:

void Fast_PWM1_init(uint8_t prescaler , uint16_t value , uint8_t pin)
{


	switch(pin)
    310c:	44 23       	and	r20, r20
    310e:	19 f0       	breq	.+6      	; 0x3116 <Fast_PWM1_init+0xa>
    3110:	41 30       	cpi	r20, 0x01	; 1
    3112:	b1 f0       	breq	.+44     	; 0x3140 <Fast_PWM1_init+0x34>
    3114:	29 c0       	rjmp	.+82     	; 0x3168 <Fast_PWM1_init+0x5c>
	{
	case OC1A :
		CLR_BIT(TCCR1A,WGM10);
    3116:	9f b5       	in	r25, 0x2f	; 47
    3118:	9e 7f       	andi	r25, 0xFE	; 254
    311a:	9f bd       	out	0x2f, r25	; 47
		SET_BIT(TCCR1A,WGM11);
    311c:	9f b5       	in	r25, 0x2f	; 47
    311e:	92 60       	ori	r25, 0x02	; 2
    3120:	9f bd       	out	0x2f, r25	; 47

		SET_BIT(TCCR1B,WGM12);
    3122:	9e b5       	in	r25, 0x2e	; 46
    3124:	98 60       	ori	r25, 0x08	; 8
    3126:	9e bd       	out	0x2e, r25	; 46
		SET_BIT(TCCR1B,WGM13);
    3128:	9e b5       	in	r25, 0x2e	; 46
    312a:	90 61       	ori	r25, 0x10	; 16
    312c:	9e bd       	out	0x2e, r25	; 46

		CLR_BIT(TCCR1A,COM1A0);
    312e:	9f b5       	in	r25, 0x2f	; 47
    3130:	9f 7b       	andi	r25, 0xBF	; 191
    3132:	9f bd       	out	0x2f, r25	; 47
		SET_BIT(TCCR1A,COM1A1);
    3134:	9f b5       	in	r25, 0x2f	; 47
    3136:	90 68       	ori	r25, 0x80	; 128
    3138:	9f bd       	out	0x2f, r25	; 47

		OCR1A = value ;
    313a:	7b bd       	out	0x2b, r23	; 43
    313c:	6a bd       	out	0x2a, r22	; 42

		break;
    313e:	14 c0       	rjmp	.+40     	; 0x3168 <Fast_PWM1_init+0x5c>
	case OC1B :
		CLR_BIT(TCCR1A,WGM10);
    3140:	9f b5       	in	r25, 0x2f	; 47
    3142:	9e 7f       	andi	r25, 0xFE	; 254
    3144:	9f bd       	out	0x2f, r25	; 47
		SET_BIT(TCCR1A,WGM11);
    3146:	9f b5       	in	r25, 0x2f	; 47
    3148:	92 60       	ori	r25, 0x02	; 2
    314a:	9f bd       	out	0x2f, r25	; 47

		SET_BIT(TCCR1B,WGM12);
    314c:	9e b5       	in	r25, 0x2e	; 46
    314e:	98 60       	ori	r25, 0x08	; 8
    3150:	9e bd       	out	0x2e, r25	; 46
		SET_BIT(TCCR1B,WGM13);
    3152:	9e b5       	in	r25, 0x2e	; 46
    3154:	90 61       	ori	r25, 0x10	; 16
    3156:	9e bd       	out	0x2e, r25	; 46

		OCR1B = value ;
    3158:	79 bd       	out	0x29, r23	; 41
    315a:	68 bd       	out	0x28, r22	; 40

		CLR_BIT(TCCR1A,COM1B0);
    315c:	9f b5       	in	r25, 0x2f	; 47
    315e:	9f 7e       	andi	r25, 0xEF	; 239
    3160:	9f bd       	out	0x2f, r25	; 47
		SET_BIT(TCCR1A,COM1B1);
    3162:	9f b5       	in	r25, 0x2f	; 47
    3164:	90 62       	ori	r25, 0x20	; 32
    3166:	9f bd       	out	0x2f, r25	; 47
	}



	/* set prescaler */
	switch (prescaler)
    3168:	83 30       	cpi	r24, 0x03	; 3
    316a:	f9 f0       	breq	.+62     	; 0x31aa <Fast_PWM1_init+0x9e>
    316c:	28 f4       	brcc	.+10     	; 0x3178 <Fast_PWM1_init+0x6c>
    316e:	81 30       	cpi	r24, 0x01	; 1
    3170:	41 f0       	breq	.+16     	; 0x3182 <Fast_PWM1_init+0x76>
    3172:	82 30       	cpi	r24, 0x02	; 2
    3174:	81 f0       	breq	.+32     	; 0x3196 <Fast_PWM1_init+0x8a>
    3176:	36 c0       	rjmp	.+108    	; 0x31e4 <Fast_PWM1_init+0xd8>
    3178:	84 30       	cpi	r24, 0x04	; 4
    317a:	09 f1       	breq	.+66     	; 0x31be <Fast_PWM1_init+0xb2>
    317c:	85 30       	cpi	r24, 0x05	; 5
    317e:	49 f1       	breq	.+82     	; 0x31d2 <Fast_PWM1_init+0xc6>
    3180:	31 c0       	rjmp	.+98     	; 0x31e4 <Fast_PWM1_init+0xd8>
		{
		case 1 :
			SET_BIT(TCCR1B,CS10);
    3182:	8e b5       	in	r24, 0x2e	; 46
    3184:	81 60       	ori	r24, 0x01	; 1
    3186:	8e bd       	out	0x2e, r24	; 46
			CLR_BIT(TCCR1B,CS11);
    3188:	8e b5       	in	r24, 0x2e	; 46
    318a:	8d 7f       	andi	r24, 0xFD	; 253
    318c:	8e bd       	out	0x2e, r24	; 46
			CLR_BIT(TCCR1B,CS12);
    318e:	8e b5       	in	r24, 0x2e	; 46
    3190:	8b 7f       	andi	r24, 0xFB	; 251
    3192:	8e bd       	out	0x2e, r24	; 46
			break;
    3194:	27 c0       	rjmp	.+78     	; 0x31e4 <Fast_PWM1_init+0xd8>
		case 2 :
			CLR_BIT(TCCR1B,CS00);
    3196:	8e b5       	in	r24, 0x2e	; 46
    3198:	8e 7f       	andi	r24, 0xFE	; 254
    319a:	8e bd       	out	0x2e, r24	; 46
			SET_BIT(TCCR1B,CS11);
    319c:	8e b5       	in	r24, 0x2e	; 46
    319e:	82 60       	ori	r24, 0x02	; 2
    31a0:	8e bd       	out	0x2e, r24	; 46
			CLR_BIT(TCCR1B,CS12);
    31a2:	8e b5       	in	r24, 0x2e	; 46
    31a4:	8b 7f       	andi	r24, 0xFB	; 251
    31a6:	8e bd       	out	0x2e, r24	; 46
			break;
    31a8:	1d c0       	rjmp	.+58     	; 0x31e4 <Fast_PWM1_init+0xd8>
		case 3 :
			SET_BIT(TCCR1B,CS00);
    31aa:	8e b5       	in	r24, 0x2e	; 46
    31ac:	81 60       	ori	r24, 0x01	; 1
    31ae:	8e bd       	out	0x2e, r24	; 46
			SET_BIT(TCCR1B,CS11);
    31b0:	8e b5       	in	r24, 0x2e	; 46
    31b2:	82 60       	ori	r24, 0x02	; 2
    31b4:	8e bd       	out	0x2e, r24	; 46
			CLR_BIT(TCCR1B,CS12);
    31b6:	8e b5       	in	r24, 0x2e	; 46
    31b8:	8b 7f       	andi	r24, 0xFB	; 251
    31ba:	8e bd       	out	0x2e, r24	; 46
			break;
    31bc:	13 c0       	rjmp	.+38     	; 0x31e4 <Fast_PWM1_init+0xd8>

		case 4 :
			CLR_BIT(TCCR1B,CS00);
    31be:	8e b5       	in	r24, 0x2e	; 46
    31c0:	8e 7f       	andi	r24, 0xFE	; 254
    31c2:	8e bd       	out	0x2e, r24	; 46
			CLR_BIT(TCCR1B,CS11);
    31c4:	8e b5       	in	r24, 0x2e	; 46
    31c6:	8d 7f       	andi	r24, 0xFD	; 253
    31c8:	8e bd       	out	0x2e, r24	; 46
			SET_BIT(TCCR1B,CS12);
    31ca:	8e b5       	in	r24, 0x2e	; 46
    31cc:	84 60       	ori	r24, 0x04	; 4
    31ce:	8e bd       	out	0x2e, r24	; 46
			break;
    31d0:	09 c0       	rjmp	.+18     	; 0x31e4 <Fast_PWM1_init+0xd8>

		case 5 :
			SET_BIT(TCCR1B,CS00);
    31d2:	8e b5       	in	r24, 0x2e	; 46
    31d4:	81 60       	ori	r24, 0x01	; 1
    31d6:	8e bd       	out	0x2e, r24	; 46
			CLR_BIT(TCCR1B,CS11);
    31d8:	8e b5       	in	r24, 0x2e	; 46
    31da:	8d 7f       	andi	r24, 0xFD	; 253
    31dc:	8e bd       	out	0x2e, r24	; 46
			SET_BIT(TCCR1B,CS12);
    31de:	8e b5       	in	r24, 0x2e	; 46
    31e0:	84 60       	ori	r24, 0x04	; 4
    31e2:	8e bd       	out	0x2e, r24	; 46
			break;
		}

	/* set top value*/
	ICR1 = 1023 ;
    31e4:	8f ef       	ldi	r24, 0xFF	; 255
    31e6:	93 e0       	ldi	r25, 0x03	; 3
    31e8:	97 bd       	out	0x27, r25	; 39
    31ea:	86 bd       	out	0x26, r24	; 38
    31ec:	08 95       	ret

000031ee <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
    31ee:	cf 92       	push	r12
    31f0:	df 92       	push	r13
    31f2:	ef 92       	push	r14
    31f4:	ff 92       	push	r15
    31f6:	0f 93       	push	r16
    31f8:	1f 93       	push	r17
    31fa:	cf 93       	push	r28
    31fc:	df 93       	push	r29
    31fe:	8c 01       	movw	r16, r24
    3200:	eb 01       	movw	r28, r22
  uint32_t nsec_part = nsec % 1000000000UL;
    3202:	68 81       	ld	r22, Y
    3204:	79 81       	ldd	r23, Y+1	; 0x01
    3206:	8a 81       	ldd	r24, Y+2	; 0x02
    3208:	9b 81       	ldd	r25, Y+3	; 0x03
  uint32_t sec_part = nsec / 1000000000UL;
  sec += sec_part;
    320a:	20 e0       	ldi	r18, 0x00	; 0
    320c:	3a ec       	ldi	r19, 0xCA	; 202
    320e:	4a e9       	ldi	r20, 0x9A	; 154
    3210:	5b e3       	ldi	r21, 0x3B	; 59
    3212:	0e 94 8f 1b 	call	0x371e	; 0x371e <__udivmodsi4>
    3216:	f8 01       	movw	r30, r16
    3218:	c0 80       	ld	r12, Z
    321a:	d1 80       	ldd	r13, Z+1	; 0x01
    321c:	e2 80       	ldd	r14, Z+2	; 0x02
    321e:	f3 80       	ldd	r15, Z+3	; 0x03
    3220:	c2 0e       	add	r12, r18
    3222:	d3 1e       	adc	r13, r19
    3224:	e4 1e       	adc	r14, r20
    3226:	f5 1e       	adc	r15, r21
    3228:	c0 82       	st	Z, r12
    322a:	d1 82       	std	Z+1, r13	; 0x01
    322c:	e2 82       	std	Z+2, r14	; 0x02
    322e:	f3 82       	std	Z+3, r15	; 0x03
  nsec = nsec_part;
    3230:	68 83       	st	Y, r22
    3232:	79 83       	std	Y+1, r23	; 0x01
    3234:	8a 83       	std	Y+2, r24	; 0x02
    3236:	9b 83       	std	Y+3, r25	; 0x03
}
    3238:	df 91       	pop	r29
    323a:	cf 91       	pop	r28
    323c:	1f 91       	pop	r17
    323e:	0f 91       	pop	r16
    3240:	ff 90       	pop	r15
    3242:	ef 90       	pop	r14
    3244:	df 90       	pop	r13
    3246:	cf 90       	pop	r12
    3248:	08 95       	ret

0000324a <TIM0_OVF_Init>:

void TIM0_OVF_Init(uint8_t prescaler, uint8_t Init_Ticks)
{

	/* set normal mode */
	CLR_BIT(TCCR0,WGM00);
    324a:	93 b7       	in	r25, 0x33	; 51
    324c:	9f 7b       	andi	r25, 0xBF	; 191
    324e:	93 bf       	out	0x33, r25	; 51
	CLR_BIT(TCCR0,WGM01);
    3250:	93 b7       	in	r25, 0x33	; 51
    3252:	97 7f       	andi	r25, 0xF7	; 247
    3254:	93 bf       	out	0x33, r25	; 51

	/* set timer count */
	TCNT0 = Init_Ticks ;
    3256:	62 bf       	out	0x32, r22	; 50

	/* set prescaller */

	switch (prescaler)
    3258:	83 30       	cpi	r24, 0x03	; 3
    325a:	f9 f0       	breq	.+62     	; 0x329a <TIM0_OVF_Init+0x50>
    325c:	28 f4       	brcc	.+10     	; 0x3268 <TIM0_OVF_Init+0x1e>
    325e:	81 30       	cpi	r24, 0x01	; 1
    3260:	41 f0       	breq	.+16     	; 0x3272 <TIM0_OVF_Init+0x28>
    3262:	82 30       	cpi	r24, 0x02	; 2
    3264:	81 f0       	breq	.+32     	; 0x3286 <TIM0_OVF_Init+0x3c>
    3266:	36 c0       	rjmp	.+108    	; 0x32d4 <TIM0_OVF_Init+0x8a>
    3268:	84 30       	cpi	r24, 0x04	; 4
    326a:	09 f1       	breq	.+66     	; 0x32ae <TIM0_OVF_Init+0x64>
    326c:	85 30       	cpi	r24, 0x05	; 5
    326e:	49 f1       	breq	.+82     	; 0x32c2 <TIM0_OVF_Init+0x78>
    3270:	31 c0       	rjmp	.+98     	; 0x32d4 <TIM0_OVF_Init+0x8a>
	{
		case 1 :
		SET_BIT(TCCR0,CS00);
    3272:	83 b7       	in	r24, 0x33	; 51
    3274:	81 60       	ori	r24, 0x01	; 1
    3276:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,CS01);
    3278:	83 b7       	in	r24, 0x33	; 51
    327a:	8d 7f       	andi	r24, 0xFD	; 253
    327c:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,CS02);
    327e:	83 b7       	in	r24, 0x33	; 51
    3280:	8b 7f       	andi	r24, 0xFB	; 251
    3282:	83 bf       	out	0x33, r24	; 51
		break;
    3284:	27 c0       	rjmp	.+78     	; 0x32d4 <TIM0_OVF_Init+0x8a>
		
		case 2 :
		CLR_BIT(TCCR0,CS00);
    3286:	83 b7       	in	r24, 0x33	; 51
    3288:	8e 7f       	andi	r24, 0xFE	; 254
    328a:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS01);
    328c:	83 b7       	in	r24, 0x33	; 51
    328e:	82 60       	ori	r24, 0x02	; 2
    3290:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,CS02);
    3292:	83 b7       	in	r24, 0x33	; 51
    3294:	8b 7f       	andi	r24, 0xFB	; 251
    3296:	83 bf       	out	0x33, r24	; 51
		break;
    3298:	1d c0       	rjmp	.+58     	; 0x32d4 <TIM0_OVF_Init+0x8a>
		
		case 3 :
		SET_BIT(TCCR0,CS00);
    329a:	83 b7       	in	r24, 0x33	; 51
    329c:	81 60       	ori	r24, 0x01	; 1
    329e:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS01);
    32a0:	83 b7       	in	r24, 0x33	; 51
    32a2:	82 60       	ori	r24, 0x02	; 2
    32a4:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,CS02);
    32a6:	83 b7       	in	r24, 0x33	; 51
    32a8:	8b 7f       	andi	r24, 0xFB	; 251
    32aa:	83 bf       	out	0x33, r24	; 51
		break;
    32ac:	13 c0       	rjmp	.+38     	; 0x32d4 <TIM0_OVF_Init+0x8a>

		case 4 :
		CLR_BIT(TCCR0,CS00);
    32ae:	83 b7       	in	r24, 0x33	; 51
    32b0:	8e 7f       	andi	r24, 0xFE	; 254
    32b2:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,CS01);
    32b4:	83 b7       	in	r24, 0x33	; 51
    32b6:	8d 7f       	andi	r24, 0xFD	; 253
    32b8:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS02);
    32ba:	83 b7       	in	r24, 0x33	; 51
    32bc:	84 60       	ori	r24, 0x04	; 4
    32be:	83 bf       	out	0x33, r24	; 51
		break;
    32c0:	09 c0       	rjmp	.+18     	; 0x32d4 <TIM0_OVF_Init+0x8a>

		case 5 :
		SET_BIT(TCCR0,CS00);
    32c2:	83 b7       	in	r24, 0x33	; 51
    32c4:	81 60       	ori	r24, 0x01	; 1
    32c6:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,CS01);
    32c8:	83 b7       	in	r24, 0x33	; 51
    32ca:	8d 7f       	andi	r24, 0xFD	; 253
    32cc:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS02);
    32ce:	83 b7       	in	r24, 0x33	; 51
    32d0:	84 60       	ori	r24, 0x04	; 4
    32d2:	83 bf       	out	0x33, r24	; 51
		break;
	}

	SET_BIT(TIMSK,TOIE0);
    32d4:	89 b7       	in	r24, 0x39	; 57
    32d6:	81 60       	ori	r24, 0x01	; 1
    32d8:	89 bf       	out	0x39, r24	; 57
	sei();
    32da:	78 94       	sei
    32dc:	08 95       	ret

000032de <__subsf3>:
    32de:	50 58       	subi	r21, 0x80	; 128

000032e0 <__addsf3>:
    32e0:	bb 27       	eor	r27, r27
    32e2:	aa 27       	eor	r26, r26
    32e4:	0e 94 87 19 	call	0x330e	; 0x330e <__addsf3x>
    32e8:	0c 94 d8 1a 	jmp	0x35b0	; 0x35b0 <__fp_round>
    32ec:	0e 94 ca 1a 	call	0x3594	; 0x3594 <__fp_pscA>
    32f0:	38 f0       	brcs	.+14     	; 0x3300 <__addsf3+0x20>
    32f2:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <__fp_pscB>
    32f6:	20 f0       	brcs	.+8      	; 0x3300 <__addsf3+0x20>
    32f8:	39 f4       	brne	.+14     	; 0x3308 <__addsf3+0x28>
    32fa:	9f 3f       	cpi	r25, 0xFF	; 255
    32fc:	19 f4       	brne	.+6      	; 0x3304 <__addsf3+0x24>
    32fe:	26 f4       	brtc	.+8      	; 0x3308 <__addsf3+0x28>
    3300:	0c 94 c7 1a 	jmp	0x358e	; 0x358e <__fp_nan>
    3304:	0e f4       	brtc	.+2      	; 0x3308 <__addsf3+0x28>
    3306:	e0 95       	com	r30
    3308:	e7 fb       	bst	r30, 7
    330a:	0c 94 c1 1a 	jmp	0x3582	; 0x3582 <__fp_inf>

0000330e <__addsf3x>:
    330e:	e9 2f       	mov	r30, r25
    3310:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__fp_split3>
    3314:	58 f3       	brcs	.-42     	; 0x32ec <__addsf3+0xc>
    3316:	ba 17       	cp	r27, r26
    3318:	62 07       	cpc	r22, r18
    331a:	73 07       	cpc	r23, r19
    331c:	84 07       	cpc	r24, r20
    331e:	95 07       	cpc	r25, r21
    3320:	20 f0       	brcs	.+8      	; 0x332a <__addsf3x+0x1c>
    3322:	79 f4       	brne	.+30     	; 0x3342 <__addsf3x+0x34>
    3324:	a6 f5       	brtc	.+104    	; 0x338e <__addsf3x+0x80>
    3326:	0c 94 0b 1b 	jmp	0x3616	; 0x3616 <__fp_zero>
    332a:	0e f4       	brtc	.+2      	; 0x332e <__addsf3x+0x20>
    332c:	e0 95       	com	r30
    332e:	0b 2e       	mov	r0, r27
    3330:	ba 2f       	mov	r27, r26
    3332:	a0 2d       	mov	r26, r0
    3334:	0b 01       	movw	r0, r22
    3336:	b9 01       	movw	r22, r18
    3338:	90 01       	movw	r18, r0
    333a:	0c 01       	movw	r0, r24
    333c:	ca 01       	movw	r24, r20
    333e:	a0 01       	movw	r20, r0
    3340:	11 24       	eor	r1, r1
    3342:	ff 27       	eor	r31, r31
    3344:	59 1b       	sub	r21, r25
    3346:	99 f0       	breq	.+38     	; 0x336e <__addsf3x+0x60>
    3348:	59 3f       	cpi	r21, 0xF9	; 249
    334a:	50 f4       	brcc	.+20     	; 0x3360 <__addsf3x+0x52>
    334c:	50 3e       	cpi	r21, 0xE0	; 224
    334e:	68 f1       	brcs	.+90     	; 0x33aa <__addsf3x+0x9c>
    3350:	1a 16       	cp	r1, r26
    3352:	f0 40       	sbci	r31, 0x00	; 0
    3354:	a2 2f       	mov	r26, r18
    3356:	23 2f       	mov	r18, r19
    3358:	34 2f       	mov	r19, r20
    335a:	44 27       	eor	r20, r20
    335c:	58 5f       	subi	r21, 0xF8	; 248
    335e:	f3 cf       	rjmp	.-26     	; 0x3346 <__addsf3x+0x38>
    3360:	46 95       	lsr	r20
    3362:	37 95       	ror	r19
    3364:	27 95       	ror	r18
    3366:	a7 95       	ror	r26
    3368:	f0 40       	sbci	r31, 0x00	; 0
    336a:	53 95       	inc	r21
    336c:	c9 f7       	brne	.-14     	; 0x3360 <__addsf3x+0x52>
    336e:	7e f4       	brtc	.+30     	; 0x338e <__addsf3x+0x80>
    3370:	1f 16       	cp	r1, r31
    3372:	ba 0b       	sbc	r27, r26
    3374:	62 0b       	sbc	r22, r18
    3376:	73 0b       	sbc	r23, r19
    3378:	84 0b       	sbc	r24, r20
    337a:	ba f0       	brmi	.+46     	; 0x33aa <__addsf3x+0x9c>
    337c:	91 50       	subi	r25, 0x01	; 1
    337e:	a1 f0       	breq	.+40     	; 0x33a8 <__addsf3x+0x9a>
    3380:	ff 0f       	add	r31, r31
    3382:	bb 1f       	adc	r27, r27
    3384:	66 1f       	adc	r22, r22
    3386:	77 1f       	adc	r23, r23
    3388:	88 1f       	adc	r24, r24
    338a:	c2 f7       	brpl	.-16     	; 0x337c <__addsf3x+0x6e>
    338c:	0e c0       	rjmp	.+28     	; 0x33aa <__addsf3x+0x9c>
    338e:	ba 0f       	add	r27, r26
    3390:	62 1f       	adc	r22, r18
    3392:	73 1f       	adc	r23, r19
    3394:	84 1f       	adc	r24, r20
    3396:	48 f4       	brcc	.+18     	; 0x33aa <__addsf3x+0x9c>
    3398:	87 95       	ror	r24
    339a:	77 95       	ror	r23
    339c:	67 95       	ror	r22
    339e:	b7 95       	ror	r27
    33a0:	f7 95       	ror	r31
    33a2:	9e 3f       	cpi	r25, 0xFE	; 254
    33a4:	08 f0       	brcs	.+2      	; 0x33a8 <__addsf3x+0x9a>
    33a6:	b0 cf       	rjmp	.-160    	; 0x3308 <__addsf3+0x28>
    33a8:	93 95       	inc	r25
    33aa:	88 0f       	add	r24, r24
    33ac:	08 f0       	brcs	.+2      	; 0x33b0 <__addsf3x+0xa2>
    33ae:	99 27       	eor	r25, r25
    33b0:	ee 0f       	add	r30, r30
    33b2:	97 95       	ror	r25
    33b4:	87 95       	ror	r24
    33b6:	08 95       	ret

000033b8 <__divsf3>:
    33b8:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <__divsf3x>
    33bc:	0c 94 d8 1a 	jmp	0x35b0	; 0x35b0 <__fp_round>
    33c0:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <__fp_pscB>
    33c4:	58 f0       	brcs	.+22     	; 0x33dc <__divsf3+0x24>
    33c6:	0e 94 ca 1a 	call	0x3594	; 0x3594 <__fp_pscA>
    33ca:	40 f0       	brcs	.+16     	; 0x33dc <__divsf3+0x24>
    33cc:	29 f4       	brne	.+10     	; 0x33d8 <__divsf3+0x20>
    33ce:	5f 3f       	cpi	r21, 0xFF	; 255
    33d0:	29 f0       	breq	.+10     	; 0x33dc <__divsf3+0x24>
    33d2:	0c 94 c1 1a 	jmp	0x3582	; 0x3582 <__fp_inf>
    33d6:	51 11       	cpse	r21, r1
    33d8:	0c 94 0c 1b 	jmp	0x3618	; 0x3618 <__fp_szero>
    33dc:	0c 94 c7 1a 	jmp	0x358e	; 0x358e <__fp_nan>

000033e0 <__divsf3x>:
    33e0:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__fp_split3>
    33e4:	68 f3       	brcs	.-38     	; 0x33c0 <__divsf3+0x8>

000033e6 <__divsf3_pse>:
    33e6:	99 23       	and	r25, r25
    33e8:	b1 f3       	breq	.-20     	; 0x33d6 <__divsf3+0x1e>
    33ea:	55 23       	and	r21, r21
    33ec:	91 f3       	breq	.-28     	; 0x33d2 <__divsf3+0x1a>
    33ee:	95 1b       	sub	r25, r21
    33f0:	55 0b       	sbc	r21, r21
    33f2:	bb 27       	eor	r27, r27
    33f4:	aa 27       	eor	r26, r26
    33f6:	62 17       	cp	r22, r18
    33f8:	73 07       	cpc	r23, r19
    33fa:	84 07       	cpc	r24, r20
    33fc:	38 f0       	brcs	.+14     	; 0x340c <__divsf3_pse+0x26>
    33fe:	9f 5f       	subi	r25, 0xFF	; 255
    3400:	5f 4f       	sbci	r21, 0xFF	; 255
    3402:	22 0f       	add	r18, r18
    3404:	33 1f       	adc	r19, r19
    3406:	44 1f       	adc	r20, r20
    3408:	aa 1f       	adc	r26, r26
    340a:	a9 f3       	breq	.-22     	; 0x33f6 <__divsf3_pse+0x10>
    340c:	35 d0       	rcall	.+106    	; 0x3478 <__divsf3_pse+0x92>
    340e:	0e 2e       	mov	r0, r30
    3410:	3a f0       	brmi	.+14     	; 0x3420 <__divsf3_pse+0x3a>
    3412:	e0 e8       	ldi	r30, 0x80	; 128
    3414:	32 d0       	rcall	.+100    	; 0x347a <__divsf3_pse+0x94>
    3416:	91 50       	subi	r25, 0x01	; 1
    3418:	50 40       	sbci	r21, 0x00	; 0
    341a:	e6 95       	lsr	r30
    341c:	00 1c       	adc	r0, r0
    341e:	ca f7       	brpl	.-14     	; 0x3412 <__divsf3_pse+0x2c>
    3420:	2b d0       	rcall	.+86     	; 0x3478 <__divsf3_pse+0x92>
    3422:	fe 2f       	mov	r31, r30
    3424:	29 d0       	rcall	.+82     	; 0x3478 <__divsf3_pse+0x92>
    3426:	66 0f       	add	r22, r22
    3428:	77 1f       	adc	r23, r23
    342a:	88 1f       	adc	r24, r24
    342c:	bb 1f       	adc	r27, r27
    342e:	26 17       	cp	r18, r22
    3430:	37 07       	cpc	r19, r23
    3432:	48 07       	cpc	r20, r24
    3434:	ab 07       	cpc	r26, r27
    3436:	b0 e8       	ldi	r27, 0x80	; 128
    3438:	09 f0       	breq	.+2      	; 0x343c <__divsf3_pse+0x56>
    343a:	bb 0b       	sbc	r27, r27
    343c:	80 2d       	mov	r24, r0
    343e:	bf 01       	movw	r22, r30
    3440:	ff 27       	eor	r31, r31
    3442:	93 58       	subi	r25, 0x83	; 131
    3444:	5f 4f       	sbci	r21, 0xFF	; 255
    3446:	3a f0       	brmi	.+14     	; 0x3456 <__divsf3_pse+0x70>
    3448:	9e 3f       	cpi	r25, 0xFE	; 254
    344a:	51 05       	cpc	r21, r1
    344c:	78 f0       	brcs	.+30     	; 0x346c <__divsf3_pse+0x86>
    344e:	0c 94 c1 1a 	jmp	0x3582	; 0x3582 <__fp_inf>
    3452:	0c 94 0c 1b 	jmp	0x3618	; 0x3618 <__fp_szero>
    3456:	5f 3f       	cpi	r21, 0xFF	; 255
    3458:	e4 f3       	brlt	.-8      	; 0x3452 <__divsf3_pse+0x6c>
    345a:	98 3e       	cpi	r25, 0xE8	; 232
    345c:	d4 f3       	brlt	.-12     	; 0x3452 <__divsf3_pse+0x6c>
    345e:	86 95       	lsr	r24
    3460:	77 95       	ror	r23
    3462:	67 95       	ror	r22
    3464:	b7 95       	ror	r27
    3466:	f7 95       	ror	r31
    3468:	9f 5f       	subi	r25, 0xFF	; 255
    346a:	c9 f7       	brne	.-14     	; 0x345e <__divsf3_pse+0x78>
    346c:	88 0f       	add	r24, r24
    346e:	91 1d       	adc	r25, r1
    3470:	96 95       	lsr	r25
    3472:	87 95       	ror	r24
    3474:	97 f9       	bld	r25, 7
    3476:	08 95       	ret
    3478:	e1 e0       	ldi	r30, 0x01	; 1
    347a:	66 0f       	add	r22, r22
    347c:	77 1f       	adc	r23, r23
    347e:	88 1f       	adc	r24, r24
    3480:	bb 1f       	adc	r27, r27
    3482:	62 17       	cp	r22, r18
    3484:	73 07       	cpc	r23, r19
    3486:	84 07       	cpc	r24, r20
    3488:	ba 07       	cpc	r27, r26
    348a:	20 f0       	brcs	.+8      	; 0x3494 <__divsf3_pse+0xae>
    348c:	62 1b       	sub	r22, r18
    348e:	73 0b       	sbc	r23, r19
    3490:	84 0b       	sbc	r24, r20
    3492:	ba 0b       	sbc	r27, r26
    3494:	ee 1f       	adc	r30, r30
    3496:	88 f7       	brcc	.-30     	; 0x347a <__divsf3_pse+0x94>
    3498:	e0 95       	com	r30
    349a:	08 95       	ret

0000349c <__fixsfsi>:
    349c:	0e 94 55 1a 	call	0x34aa	; 0x34aa <__fixunssfsi>
    34a0:	68 94       	set
    34a2:	b1 11       	cpse	r27, r1
    34a4:	0c 94 0c 1b 	jmp	0x3618	; 0x3618 <__fp_szero>
    34a8:	08 95       	ret

000034aa <__fixunssfsi>:
    34aa:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__fp_splitA>
    34ae:	88 f0       	brcs	.+34     	; 0x34d2 <__fixunssfsi+0x28>
    34b0:	9f 57       	subi	r25, 0x7F	; 127
    34b2:	98 f0       	brcs	.+38     	; 0x34da <__fixunssfsi+0x30>
    34b4:	b9 2f       	mov	r27, r25
    34b6:	99 27       	eor	r25, r25
    34b8:	b7 51       	subi	r27, 0x17	; 23
    34ba:	b0 f0       	brcs	.+44     	; 0x34e8 <__fixunssfsi+0x3e>
    34bc:	e1 f0       	breq	.+56     	; 0x34f6 <__fixunssfsi+0x4c>
    34be:	66 0f       	add	r22, r22
    34c0:	77 1f       	adc	r23, r23
    34c2:	88 1f       	adc	r24, r24
    34c4:	99 1f       	adc	r25, r25
    34c6:	1a f0       	brmi	.+6      	; 0x34ce <__fixunssfsi+0x24>
    34c8:	ba 95       	dec	r27
    34ca:	c9 f7       	brne	.-14     	; 0x34be <__fixunssfsi+0x14>
    34cc:	14 c0       	rjmp	.+40     	; 0x34f6 <__fixunssfsi+0x4c>
    34ce:	b1 30       	cpi	r27, 0x01	; 1
    34d0:	91 f0       	breq	.+36     	; 0x34f6 <__fixunssfsi+0x4c>
    34d2:	0e 94 0b 1b 	call	0x3616	; 0x3616 <__fp_zero>
    34d6:	b1 e0       	ldi	r27, 0x01	; 1
    34d8:	08 95       	ret
    34da:	0c 94 0b 1b 	jmp	0x3616	; 0x3616 <__fp_zero>
    34de:	67 2f       	mov	r22, r23
    34e0:	78 2f       	mov	r23, r24
    34e2:	88 27       	eor	r24, r24
    34e4:	b8 5f       	subi	r27, 0xF8	; 248
    34e6:	39 f0       	breq	.+14     	; 0x34f6 <__fixunssfsi+0x4c>
    34e8:	b9 3f       	cpi	r27, 0xF9	; 249
    34ea:	cc f3       	brlt	.-14     	; 0x34de <__fixunssfsi+0x34>
    34ec:	86 95       	lsr	r24
    34ee:	77 95       	ror	r23
    34f0:	67 95       	ror	r22
    34f2:	b3 95       	inc	r27
    34f4:	d9 f7       	brne	.-10     	; 0x34ec <__fixunssfsi+0x42>
    34f6:	3e f4       	brtc	.+14     	; 0x3506 <__fixunssfsi+0x5c>
    34f8:	90 95       	com	r25
    34fa:	80 95       	com	r24
    34fc:	70 95       	com	r23
    34fe:	61 95       	neg	r22
    3500:	7f 4f       	sbci	r23, 0xFF	; 255
    3502:	8f 4f       	sbci	r24, 0xFF	; 255
    3504:	9f 4f       	sbci	r25, 0xFF	; 255
    3506:	08 95       	ret

00003508 <__floatunsisf>:
    3508:	e8 94       	clt
    350a:	09 c0       	rjmp	.+18     	; 0x351e <__floatsisf+0x12>

0000350c <__floatsisf>:
    350c:	97 fb       	bst	r25, 7
    350e:	3e f4       	brtc	.+14     	; 0x351e <__floatsisf+0x12>
    3510:	90 95       	com	r25
    3512:	80 95       	com	r24
    3514:	70 95       	com	r23
    3516:	61 95       	neg	r22
    3518:	7f 4f       	sbci	r23, 0xFF	; 255
    351a:	8f 4f       	sbci	r24, 0xFF	; 255
    351c:	9f 4f       	sbci	r25, 0xFF	; 255
    351e:	99 23       	and	r25, r25
    3520:	a9 f0       	breq	.+42     	; 0x354c <__floatsisf+0x40>
    3522:	f9 2f       	mov	r31, r25
    3524:	96 e9       	ldi	r25, 0x96	; 150
    3526:	bb 27       	eor	r27, r27
    3528:	93 95       	inc	r25
    352a:	f6 95       	lsr	r31
    352c:	87 95       	ror	r24
    352e:	77 95       	ror	r23
    3530:	67 95       	ror	r22
    3532:	b7 95       	ror	r27
    3534:	f1 11       	cpse	r31, r1
    3536:	f8 cf       	rjmp	.-16     	; 0x3528 <__floatsisf+0x1c>
    3538:	fa f4       	brpl	.+62     	; 0x3578 <__floatsisf+0x6c>
    353a:	bb 0f       	add	r27, r27
    353c:	11 f4       	brne	.+4      	; 0x3542 <__floatsisf+0x36>
    353e:	60 ff       	sbrs	r22, 0
    3540:	1b c0       	rjmp	.+54     	; 0x3578 <__floatsisf+0x6c>
    3542:	6f 5f       	subi	r22, 0xFF	; 255
    3544:	7f 4f       	sbci	r23, 0xFF	; 255
    3546:	8f 4f       	sbci	r24, 0xFF	; 255
    3548:	9f 4f       	sbci	r25, 0xFF	; 255
    354a:	16 c0       	rjmp	.+44     	; 0x3578 <__floatsisf+0x6c>
    354c:	88 23       	and	r24, r24
    354e:	11 f0       	breq	.+4      	; 0x3554 <__floatsisf+0x48>
    3550:	96 e9       	ldi	r25, 0x96	; 150
    3552:	11 c0       	rjmp	.+34     	; 0x3576 <__floatsisf+0x6a>
    3554:	77 23       	and	r23, r23
    3556:	21 f0       	breq	.+8      	; 0x3560 <__floatsisf+0x54>
    3558:	9e e8       	ldi	r25, 0x8E	; 142
    355a:	87 2f       	mov	r24, r23
    355c:	76 2f       	mov	r23, r22
    355e:	05 c0       	rjmp	.+10     	; 0x356a <__floatsisf+0x5e>
    3560:	66 23       	and	r22, r22
    3562:	71 f0       	breq	.+28     	; 0x3580 <__floatsisf+0x74>
    3564:	96 e8       	ldi	r25, 0x86	; 134
    3566:	86 2f       	mov	r24, r22
    3568:	70 e0       	ldi	r23, 0x00	; 0
    356a:	60 e0       	ldi	r22, 0x00	; 0
    356c:	2a f0       	brmi	.+10     	; 0x3578 <__floatsisf+0x6c>
    356e:	9a 95       	dec	r25
    3570:	66 0f       	add	r22, r22
    3572:	77 1f       	adc	r23, r23
    3574:	88 1f       	adc	r24, r24
    3576:	da f7       	brpl	.-10     	; 0x356e <__floatsisf+0x62>
    3578:	88 0f       	add	r24, r24
    357a:	96 95       	lsr	r25
    357c:	87 95       	ror	r24
    357e:	97 f9       	bld	r25, 7
    3580:	08 95       	ret

00003582 <__fp_inf>:
    3582:	97 f9       	bld	r25, 7
    3584:	9f 67       	ori	r25, 0x7F	; 127
    3586:	80 e8       	ldi	r24, 0x80	; 128
    3588:	70 e0       	ldi	r23, 0x00	; 0
    358a:	60 e0       	ldi	r22, 0x00	; 0
    358c:	08 95       	ret

0000358e <__fp_nan>:
    358e:	9f ef       	ldi	r25, 0xFF	; 255
    3590:	80 ec       	ldi	r24, 0xC0	; 192
    3592:	08 95       	ret

00003594 <__fp_pscA>:
    3594:	00 24       	eor	r0, r0
    3596:	0a 94       	dec	r0
    3598:	16 16       	cp	r1, r22
    359a:	17 06       	cpc	r1, r23
    359c:	18 06       	cpc	r1, r24
    359e:	09 06       	cpc	r0, r25
    35a0:	08 95       	ret

000035a2 <__fp_pscB>:
    35a2:	00 24       	eor	r0, r0
    35a4:	0a 94       	dec	r0
    35a6:	12 16       	cp	r1, r18
    35a8:	13 06       	cpc	r1, r19
    35aa:	14 06       	cpc	r1, r20
    35ac:	05 06       	cpc	r0, r21
    35ae:	08 95       	ret

000035b0 <__fp_round>:
    35b0:	09 2e       	mov	r0, r25
    35b2:	03 94       	inc	r0
    35b4:	00 0c       	add	r0, r0
    35b6:	11 f4       	brne	.+4      	; 0x35bc <__fp_round+0xc>
    35b8:	88 23       	and	r24, r24
    35ba:	52 f0       	brmi	.+20     	; 0x35d0 <__fp_round+0x20>
    35bc:	bb 0f       	add	r27, r27
    35be:	40 f4       	brcc	.+16     	; 0x35d0 <__fp_round+0x20>
    35c0:	bf 2b       	or	r27, r31
    35c2:	11 f4       	brne	.+4      	; 0x35c8 <__fp_round+0x18>
    35c4:	60 ff       	sbrs	r22, 0
    35c6:	04 c0       	rjmp	.+8      	; 0x35d0 <__fp_round+0x20>
    35c8:	6f 5f       	subi	r22, 0xFF	; 255
    35ca:	7f 4f       	sbci	r23, 0xFF	; 255
    35cc:	8f 4f       	sbci	r24, 0xFF	; 255
    35ce:	9f 4f       	sbci	r25, 0xFF	; 255
    35d0:	08 95       	ret

000035d2 <__fp_split3>:
    35d2:	57 fd       	sbrc	r21, 7
    35d4:	90 58       	subi	r25, 0x80	; 128
    35d6:	44 0f       	add	r20, r20
    35d8:	55 1f       	adc	r21, r21
    35da:	59 f0       	breq	.+22     	; 0x35f2 <__fp_splitA+0x10>
    35dc:	5f 3f       	cpi	r21, 0xFF	; 255
    35de:	71 f0       	breq	.+28     	; 0x35fc <__fp_splitA+0x1a>
    35e0:	47 95       	ror	r20

000035e2 <__fp_splitA>:
    35e2:	88 0f       	add	r24, r24
    35e4:	97 fb       	bst	r25, 7
    35e6:	99 1f       	adc	r25, r25
    35e8:	61 f0       	breq	.+24     	; 0x3602 <__fp_splitA+0x20>
    35ea:	9f 3f       	cpi	r25, 0xFF	; 255
    35ec:	79 f0       	breq	.+30     	; 0x360c <__fp_splitA+0x2a>
    35ee:	87 95       	ror	r24
    35f0:	08 95       	ret
    35f2:	12 16       	cp	r1, r18
    35f4:	13 06       	cpc	r1, r19
    35f6:	14 06       	cpc	r1, r20
    35f8:	55 1f       	adc	r21, r21
    35fa:	f2 cf       	rjmp	.-28     	; 0x35e0 <__fp_split3+0xe>
    35fc:	46 95       	lsr	r20
    35fe:	f1 df       	rcall	.-30     	; 0x35e2 <__fp_splitA>
    3600:	08 c0       	rjmp	.+16     	; 0x3612 <__fp_splitA+0x30>
    3602:	16 16       	cp	r1, r22
    3604:	17 06       	cpc	r1, r23
    3606:	18 06       	cpc	r1, r24
    3608:	99 1f       	adc	r25, r25
    360a:	f1 cf       	rjmp	.-30     	; 0x35ee <__fp_splitA+0xc>
    360c:	86 95       	lsr	r24
    360e:	71 05       	cpc	r23, r1
    3610:	61 05       	cpc	r22, r1
    3612:	08 94       	sec
    3614:	08 95       	ret

00003616 <__fp_zero>:
    3616:	e8 94       	clt

00003618 <__fp_szero>:
    3618:	bb 27       	eor	r27, r27
    361a:	66 27       	eor	r22, r22
    361c:	77 27       	eor	r23, r23
    361e:	cb 01       	movw	r24, r22
    3620:	97 f9       	bld	r25, 7
    3622:	08 95       	ret

00003624 <__mulsf3>:
    3624:	0e 94 25 1b 	call	0x364a	; 0x364a <__mulsf3x>
    3628:	0c 94 d8 1a 	jmp	0x35b0	; 0x35b0 <__fp_round>
    362c:	0e 94 ca 1a 	call	0x3594	; 0x3594 <__fp_pscA>
    3630:	38 f0       	brcs	.+14     	; 0x3640 <__mulsf3+0x1c>
    3632:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <__fp_pscB>
    3636:	20 f0       	brcs	.+8      	; 0x3640 <__mulsf3+0x1c>
    3638:	95 23       	and	r25, r21
    363a:	11 f0       	breq	.+4      	; 0x3640 <__mulsf3+0x1c>
    363c:	0c 94 c1 1a 	jmp	0x3582	; 0x3582 <__fp_inf>
    3640:	0c 94 c7 1a 	jmp	0x358e	; 0x358e <__fp_nan>
    3644:	11 24       	eor	r1, r1
    3646:	0c 94 0c 1b 	jmp	0x3618	; 0x3618 <__fp_szero>

0000364a <__mulsf3x>:
    364a:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__fp_split3>
    364e:	70 f3       	brcs	.-36     	; 0x362c <__mulsf3+0x8>

00003650 <__mulsf3_pse>:
    3650:	95 9f       	mul	r25, r21
    3652:	c1 f3       	breq	.-16     	; 0x3644 <__mulsf3+0x20>
    3654:	95 0f       	add	r25, r21
    3656:	50 e0       	ldi	r21, 0x00	; 0
    3658:	55 1f       	adc	r21, r21
    365a:	62 9f       	mul	r22, r18
    365c:	f0 01       	movw	r30, r0
    365e:	72 9f       	mul	r23, r18
    3660:	bb 27       	eor	r27, r27
    3662:	f0 0d       	add	r31, r0
    3664:	b1 1d       	adc	r27, r1
    3666:	63 9f       	mul	r22, r19
    3668:	aa 27       	eor	r26, r26
    366a:	f0 0d       	add	r31, r0
    366c:	b1 1d       	adc	r27, r1
    366e:	aa 1f       	adc	r26, r26
    3670:	64 9f       	mul	r22, r20
    3672:	66 27       	eor	r22, r22
    3674:	b0 0d       	add	r27, r0
    3676:	a1 1d       	adc	r26, r1
    3678:	66 1f       	adc	r22, r22
    367a:	82 9f       	mul	r24, r18
    367c:	22 27       	eor	r18, r18
    367e:	b0 0d       	add	r27, r0
    3680:	a1 1d       	adc	r26, r1
    3682:	62 1f       	adc	r22, r18
    3684:	73 9f       	mul	r23, r19
    3686:	b0 0d       	add	r27, r0
    3688:	a1 1d       	adc	r26, r1
    368a:	62 1f       	adc	r22, r18
    368c:	83 9f       	mul	r24, r19
    368e:	a0 0d       	add	r26, r0
    3690:	61 1d       	adc	r22, r1
    3692:	22 1f       	adc	r18, r18
    3694:	74 9f       	mul	r23, r20
    3696:	33 27       	eor	r19, r19
    3698:	a0 0d       	add	r26, r0
    369a:	61 1d       	adc	r22, r1
    369c:	23 1f       	adc	r18, r19
    369e:	84 9f       	mul	r24, r20
    36a0:	60 0d       	add	r22, r0
    36a2:	21 1d       	adc	r18, r1
    36a4:	82 2f       	mov	r24, r18
    36a6:	76 2f       	mov	r23, r22
    36a8:	6a 2f       	mov	r22, r26
    36aa:	11 24       	eor	r1, r1
    36ac:	9f 57       	subi	r25, 0x7F	; 127
    36ae:	50 40       	sbci	r21, 0x00	; 0
    36b0:	9a f0       	brmi	.+38     	; 0x36d8 <__mulsf3_pse+0x88>
    36b2:	f1 f0       	breq	.+60     	; 0x36f0 <__mulsf3_pse+0xa0>
    36b4:	88 23       	and	r24, r24
    36b6:	4a f0       	brmi	.+18     	; 0x36ca <__mulsf3_pse+0x7a>
    36b8:	ee 0f       	add	r30, r30
    36ba:	ff 1f       	adc	r31, r31
    36bc:	bb 1f       	adc	r27, r27
    36be:	66 1f       	adc	r22, r22
    36c0:	77 1f       	adc	r23, r23
    36c2:	88 1f       	adc	r24, r24
    36c4:	91 50       	subi	r25, 0x01	; 1
    36c6:	50 40       	sbci	r21, 0x00	; 0
    36c8:	a9 f7       	brne	.-22     	; 0x36b4 <__mulsf3_pse+0x64>
    36ca:	9e 3f       	cpi	r25, 0xFE	; 254
    36cc:	51 05       	cpc	r21, r1
    36ce:	80 f0       	brcs	.+32     	; 0x36f0 <__mulsf3_pse+0xa0>
    36d0:	0c 94 c1 1a 	jmp	0x3582	; 0x3582 <__fp_inf>
    36d4:	0c 94 0c 1b 	jmp	0x3618	; 0x3618 <__fp_szero>
    36d8:	5f 3f       	cpi	r21, 0xFF	; 255
    36da:	e4 f3       	brlt	.-8      	; 0x36d4 <__mulsf3_pse+0x84>
    36dc:	98 3e       	cpi	r25, 0xE8	; 232
    36de:	d4 f3       	brlt	.-12     	; 0x36d4 <__mulsf3_pse+0x84>
    36e0:	86 95       	lsr	r24
    36e2:	77 95       	ror	r23
    36e4:	67 95       	ror	r22
    36e6:	b7 95       	ror	r27
    36e8:	f7 95       	ror	r31
    36ea:	e7 95       	ror	r30
    36ec:	9f 5f       	subi	r25, 0xFF	; 255
    36ee:	c1 f7       	brne	.-16     	; 0x36e0 <__mulsf3_pse+0x90>
    36f0:	fe 2b       	or	r31, r30
    36f2:	88 0f       	add	r24, r24
    36f4:	91 1d       	adc	r25, r1
    36f6:	96 95       	lsr	r25
    36f8:	87 95       	ror	r24
    36fa:	97 f9       	bld	r25, 7
    36fc:	08 95       	ret

000036fe <__mulsi3>:
    36fe:	db 01       	movw	r26, r22
    3700:	8f 93       	push	r24
    3702:	9f 93       	push	r25
    3704:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <__muluhisi3>
    3708:	bf 91       	pop	r27
    370a:	af 91       	pop	r26
    370c:	a2 9f       	mul	r26, r18
    370e:	80 0d       	add	r24, r0
    3710:	91 1d       	adc	r25, r1
    3712:	a3 9f       	mul	r26, r19
    3714:	90 0d       	add	r25, r0
    3716:	b2 9f       	mul	r27, r18
    3718:	90 0d       	add	r25, r0
    371a:	11 24       	eor	r1, r1
    371c:	08 95       	ret

0000371e <__udivmodsi4>:
    371e:	a1 e2       	ldi	r26, 0x21	; 33
    3720:	1a 2e       	mov	r1, r26
    3722:	aa 1b       	sub	r26, r26
    3724:	bb 1b       	sub	r27, r27
    3726:	fd 01       	movw	r30, r26
    3728:	0d c0       	rjmp	.+26     	; 0x3744 <__udivmodsi4_ep>

0000372a <__udivmodsi4_loop>:
    372a:	aa 1f       	adc	r26, r26
    372c:	bb 1f       	adc	r27, r27
    372e:	ee 1f       	adc	r30, r30
    3730:	ff 1f       	adc	r31, r31
    3732:	a2 17       	cp	r26, r18
    3734:	b3 07       	cpc	r27, r19
    3736:	e4 07       	cpc	r30, r20
    3738:	f5 07       	cpc	r31, r21
    373a:	20 f0       	brcs	.+8      	; 0x3744 <__udivmodsi4_ep>
    373c:	a2 1b       	sub	r26, r18
    373e:	b3 0b       	sbc	r27, r19
    3740:	e4 0b       	sbc	r30, r20
    3742:	f5 0b       	sbc	r31, r21

00003744 <__udivmodsi4_ep>:
    3744:	66 1f       	adc	r22, r22
    3746:	77 1f       	adc	r23, r23
    3748:	88 1f       	adc	r24, r24
    374a:	99 1f       	adc	r25, r25
    374c:	1a 94       	dec	r1
    374e:	69 f7       	brne	.-38     	; 0x372a <__udivmodsi4_loop>
    3750:	60 95       	com	r22
    3752:	70 95       	com	r23
    3754:	80 95       	com	r24
    3756:	90 95       	com	r25
    3758:	9b 01       	movw	r18, r22
    375a:	ac 01       	movw	r20, r24
    375c:	bd 01       	movw	r22, r26
    375e:	cf 01       	movw	r24, r30
    3760:	08 95       	ret

00003762 <__divmodsi4>:
    3762:	05 2e       	mov	r0, r21
    3764:	97 fb       	bst	r25, 7
    3766:	1e f4       	brtc	.+6      	; 0x376e <__divmodsi4+0xc>
    3768:	00 94       	com	r0
    376a:	0e 94 c8 1b 	call	0x3790	; 0x3790 <__negsi2>
    376e:	57 fd       	sbrc	r21, 7
    3770:	07 d0       	rcall	.+14     	; 0x3780 <__divmodsi4_neg2>
    3772:	0e 94 8f 1b 	call	0x371e	; 0x371e <__udivmodsi4>
    3776:	07 fc       	sbrc	r0, 7
    3778:	03 d0       	rcall	.+6      	; 0x3780 <__divmodsi4_neg2>
    377a:	4e f4       	brtc	.+18     	; 0x378e <__divmodsi4_exit>
    377c:	0c 94 c8 1b 	jmp	0x3790	; 0x3790 <__negsi2>

00003780 <__divmodsi4_neg2>:
    3780:	50 95       	com	r21
    3782:	40 95       	com	r20
    3784:	30 95       	com	r19
    3786:	21 95       	neg	r18
    3788:	3f 4f       	sbci	r19, 0xFF	; 255
    378a:	4f 4f       	sbci	r20, 0xFF	; 255
    378c:	5f 4f       	sbci	r21, 0xFF	; 255

0000378e <__divmodsi4_exit>:
    378e:	08 95       	ret

00003790 <__negsi2>:
    3790:	90 95       	com	r25
    3792:	80 95       	com	r24
    3794:	70 95       	com	r23
    3796:	61 95       	neg	r22
    3798:	7f 4f       	sbci	r23, 0xFF	; 255
    379a:	8f 4f       	sbci	r24, 0xFF	; 255
    379c:	9f 4f       	sbci	r25, 0xFF	; 255
    379e:	08 95       	ret

000037a0 <__tablejump2__>:
    37a0:	ee 0f       	add	r30, r30
    37a2:	ff 1f       	adc	r31, r31
    37a4:	05 90       	lpm	r0, Z+
    37a6:	f4 91       	lpm	r31, Z
    37a8:	e0 2d       	mov	r30, r0
    37aa:	09 94       	ijmp

000037ac <__muluhisi3>:
    37ac:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <__umulhisi3>
    37b0:	a5 9f       	mul	r26, r21
    37b2:	90 0d       	add	r25, r0
    37b4:	b4 9f       	mul	r27, r20
    37b6:	90 0d       	add	r25, r0
    37b8:	a4 9f       	mul	r26, r20
    37ba:	80 0d       	add	r24, r0
    37bc:	91 1d       	adc	r25, r1
    37be:	11 24       	eor	r1, r1
    37c0:	08 95       	ret

000037c2 <__umulhisi3>:
    37c2:	a2 9f       	mul	r26, r18
    37c4:	b0 01       	movw	r22, r0
    37c6:	b3 9f       	mul	r27, r19
    37c8:	c0 01       	movw	r24, r0
    37ca:	a3 9f       	mul	r26, r19
    37cc:	70 0d       	add	r23, r0
    37ce:	81 1d       	adc	r24, r1
    37d0:	11 24       	eor	r1, r1
    37d2:	91 1d       	adc	r25, r1
    37d4:	b2 9f       	mul	r27, r18
    37d6:	70 0d       	add	r23, r0
    37d8:	81 1d       	adc	r24, r1
    37da:	11 24       	eor	r1, r1
    37dc:	91 1d       	adc	r25, r1
    37de:	08 95       	ret

000037e0 <realloc>:
    37e0:	a0 e0       	ldi	r26, 0x00	; 0
    37e2:	b0 e0       	ldi	r27, 0x00	; 0
    37e4:	e6 ef       	ldi	r30, 0xF6	; 246
    37e6:	fb e1       	ldi	r31, 0x1B	; 27
    37e8:	0c 94 e4 1d 	jmp	0x3bc8	; 0x3bc8 <__prologue_saves__+0x8>
    37ec:	ec 01       	movw	r28, r24
    37ee:	00 97       	sbiw	r24, 0x00	; 0
    37f0:	21 f4       	brne	.+8      	; 0x37fa <realloc+0x1a>
    37f2:	cb 01       	movw	r24, r22
    37f4:	0e 94 bf 1c 	call	0x397e	; 0x397e <malloc>
    37f8:	b4 c0       	rjmp	.+360    	; 0x3962 <realloc+0x182>
    37fa:	fc 01       	movw	r30, r24
    37fc:	e6 0f       	add	r30, r22
    37fe:	f7 1f       	adc	r31, r23
    3800:	9c 01       	movw	r18, r24
    3802:	22 50       	subi	r18, 0x02	; 2
    3804:	31 09       	sbc	r19, r1
    3806:	e2 17       	cp	r30, r18
    3808:	f3 07       	cpc	r31, r19
    380a:	08 f4       	brcc	.+2      	; 0x380e <realloc+0x2e>
    380c:	a8 c0       	rjmp	.+336    	; 0x395e <realloc+0x17e>
    380e:	d9 01       	movw	r26, r18
    3810:	0d 91       	ld	r16, X+
    3812:	1c 91       	ld	r17, X
    3814:	11 97       	sbiw	r26, 0x01	; 1
    3816:	06 17       	cp	r16, r22
    3818:	17 07       	cpc	r17, r23
    381a:	b0 f0       	brcs	.+44     	; 0x3848 <realloc+0x68>
    381c:	05 30       	cpi	r16, 0x05	; 5
    381e:	11 05       	cpc	r17, r1
    3820:	08 f4       	brcc	.+2      	; 0x3824 <realloc+0x44>
    3822:	9b c0       	rjmp	.+310    	; 0x395a <realloc+0x17a>
    3824:	c8 01       	movw	r24, r16
    3826:	04 97       	sbiw	r24, 0x04	; 4
    3828:	86 17       	cp	r24, r22
    382a:	97 07       	cpc	r25, r23
    382c:	08 f4       	brcc	.+2      	; 0x3830 <realloc+0x50>
    382e:	95 c0       	rjmp	.+298    	; 0x395a <realloc+0x17a>
    3830:	02 50       	subi	r16, 0x02	; 2
    3832:	11 09       	sbc	r17, r1
    3834:	06 1b       	sub	r16, r22
    3836:	17 0b       	sbc	r17, r23
    3838:	01 93       	st	Z+, r16
    383a:	11 93       	st	Z+, r17
    383c:	6d 93       	st	X+, r22
    383e:	7c 93       	st	X, r23
    3840:	cf 01       	movw	r24, r30
    3842:	0e 94 57 1d 	call	0x3aae	; 0x3aae <free>
    3846:	89 c0       	rjmp	.+274    	; 0x395a <realloc+0x17a>
    3848:	5b 01       	movw	r10, r22
    384a:	a0 1a       	sub	r10, r16
    384c:	b1 0a       	sbc	r11, r17
    384e:	4c 01       	movw	r8, r24
    3850:	80 0e       	add	r8, r16
    3852:	91 1e       	adc	r9, r17
    3854:	a0 91 f9 06 	lds	r26, 0x06F9	; 0x8006f9 <__flp>
    3858:	b0 91 fa 06 	lds	r27, 0x06FA	; 0x8006fa <__flp+0x1>
    385c:	61 2c       	mov	r6, r1
    385e:	71 2c       	mov	r7, r1
    3860:	e1 2c       	mov	r14, r1
    3862:	f1 2c       	mov	r15, r1
    3864:	10 97       	sbiw	r26, 0x00	; 0
    3866:	09 f4       	brne	.+2      	; 0x386a <realloc+0x8a>
    3868:	46 c0       	rjmp	.+140    	; 0x38f6 <realloc+0x116>
    386a:	8d 91       	ld	r24, X+
    386c:	9c 91       	ld	r25, X
    386e:	11 97       	sbiw	r26, 0x01	; 1
    3870:	a8 15       	cp	r26, r8
    3872:	b9 05       	cpc	r27, r9
    3874:	b1 f5       	brne	.+108    	; 0x38e2 <realloc+0x102>
    3876:	6c 01       	movw	r12, r24
    3878:	42 e0       	ldi	r20, 0x02	; 2
    387a:	c4 0e       	add	r12, r20
    387c:	d1 1c       	adc	r13, r1
    387e:	ca 14       	cp	r12, r10
    3880:	db 04       	cpc	r13, r11
    3882:	78 f1       	brcs	.+94     	; 0x38e2 <realloc+0x102>
    3884:	4c 01       	movw	r8, r24
    3886:	8a 18       	sub	r8, r10
    3888:	9b 08       	sbc	r9, r11
    388a:	64 01       	movw	r12, r8
    388c:	42 e0       	ldi	r20, 0x02	; 2
    388e:	c4 0e       	add	r12, r20
    3890:	d1 1c       	adc	r13, r1
    3892:	12 96       	adiw	r26, 0x02	; 2
    3894:	bc 90       	ld	r11, X
    3896:	12 97       	sbiw	r26, 0x02	; 2
    3898:	13 96       	adiw	r26, 0x03	; 3
    389a:	ac 91       	ld	r26, X
    389c:	b5 e0       	ldi	r27, 0x05	; 5
    389e:	cb 16       	cp	r12, r27
    38a0:	d1 04       	cpc	r13, r1
    38a2:	40 f0       	brcs	.+16     	; 0x38b4 <realloc+0xd4>
    38a4:	b2 82       	std	Z+2, r11	; 0x02
    38a6:	a3 83       	std	Z+3, r26	; 0x03
    38a8:	91 82       	std	Z+1, r9	; 0x01
    38aa:	80 82       	st	Z, r8
    38ac:	d9 01       	movw	r26, r18
    38ae:	6d 93       	st	X+, r22
    38b0:	7c 93       	st	X, r23
    38b2:	09 c0       	rjmp	.+18     	; 0x38c6 <realloc+0xe6>
    38b4:	0e 5f       	subi	r16, 0xFE	; 254
    38b6:	1f 4f       	sbci	r17, 0xFF	; 255
    38b8:	80 0f       	add	r24, r16
    38ba:	91 1f       	adc	r25, r17
    38bc:	f9 01       	movw	r30, r18
    38be:	91 83       	std	Z+1, r25	; 0x01
    38c0:	80 83       	st	Z, r24
    38c2:	eb 2d       	mov	r30, r11
    38c4:	fa 2f       	mov	r31, r26
    38c6:	e1 14       	cp	r14, r1
    38c8:	f1 04       	cpc	r15, r1
    38ca:	31 f0       	breq	.+12     	; 0x38d8 <realloc+0xf8>
    38cc:	d7 01       	movw	r26, r14
    38ce:	13 96       	adiw	r26, 0x03	; 3
    38d0:	fc 93       	st	X, r31
    38d2:	ee 93       	st	-X, r30
    38d4:	12 97       	sbiw	r26, 0x02	; 2
    38d6:	41 c0       	rjmp	.+130    	; 0x395a <realloc+0x17a>
    38d8:	f0 93 fa 06 	sts	0x06FA, r31	; 0x8006fa <__flp+0x1>
    38dc:	e0 93 f9 06 	sts	0x06F9, r30	; 0x8006f9 <__flp>
    38e0:	3c c0       	rjmp	.+120    	; 0x395a <realloc+0x17a>
    38e2:	68 16       	cp	r6, r24
    38e4:	79 06       	cpc	r7, r25
    38e6:	08 f4       	brcc	.+2      	; 0x38ea <realloc+0x10a>
    38e8:	3c 01       	movw	r6, r24
    38ea:	7d 01       	movw	r14, r26
    38ec:	12 96       	adiw	r26, 0x02	; 2
    38ee:	0d 90       	ld	r0, X+
    38f0:	bc 91       	ld	r27, X
    38f2:	a0 2d       	mov	r26, r0
    38f4:	b7 cf       	rjmp	.-146    	; 0x3864 <realloc+0x84>
    38f6:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <__brkval>
    38fa:	90 91 f8 06 	lds	r25, 0x06F8	; 0x8006f8 <__brkval+0x1>
    38fe:	88 16       	cp	r8, r24
    3900:	99 06       	cpc	r9, r25
    3902:	e1 f4       	brne	.+56     	; 0x393c <realloc+0x15c>
    3904:	66 16       	cp	r6, r22
    3906:	77 06       	cpc	r7, r23
    3908:	c8 f4       	brcc	.+50     	; 0x393c <realloc+0x15c>
    390a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    390e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    3912:	00 97       	sbiw	r24, 0x00	; 0
    3914:	41 f4       	brne	.+16     	; 0x3926 <realloc+0x146>
    3916:	8d b7       	in	r24, 0x3d	; 61
    3918:	9e b7       	in	r25, 0x3e	; 62
    391a:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    391e:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    3922:	84 1b       	sub	r24, r20
    3924:	95 0b       	sbc	r25, r21
    3926:	e8 17       	cp	r30, r24
    3928:	f9 07       	cpc	r31, r25
    392a:	c8 f4       	brcc	.+50     	; 0x395e <realloc+0x17e>
    392c:	f0 93 f8 06 	sts	0x06F8, r31	; 0x8006f8 <__brkval+0x1>
    3930:	e0 93 f7 06 	sts	0x06F7, r30	; 0x8006f7 <__brkval>
    3934:	f9 01       	movw	r30, r18
    3936:	71 83       	std	Z+1, r23	; 0x01
    3938:	60 83       	st	Z, r22
    393a:	0f c0       	rjmp	.+30     	; 0x395a <realloc+0x17a>
    393c:	cb 01       	movw	r24, r22
    393e:	0e 94 bf 1c 	call	0x397e	; 0x397e <malloc>
    3942:	7c 01       	movw	r14, r24
    3944:	00 97       	sbiw	r24, 0x00	; 0
    3946:	59 f0       	breq	.+22     	; 0x395e <realloc+0x17e>
    3948:	a8 01       	movw	r20, r16
    394a:	be 01       	movw	r22, r28
    394c:	0e 94 b6 1c 	call	0x396c	; 0x396c <memcpy>
    3950:	ce 01       	movw	r24, r28
    3952:	0e 94 57 1d 	call	0x3aae	; 0x3aae <free>
    3956:	c7 01       	movw	r24, r14
    3958:	04 c0       	rjmp	.+8      	; 0x3962 <realloc+0x182>
    395a:	ce 01       	movw	r24, r28
    395c:	02 c0       	rjmp	.+4      	; 0x3962 <realloc+0x182>
    395e:	80 e0       	ldi	r24, 0x00	; 0
    3960:	90 e0       	ldi	r25, 0x00	; 0
    3962:	cd b7       	in	r28, 0x3d	; 61
    3964:	de b7       	in	r29, 0x3e	; 62
    3966:	ee e0       	ldi	r30, 0x0E	; 14
    3968:	0c 94 00 1e 	jmp	0x3c00	; 0x3c00 <__epilogue_restores__+0x8>

0000396c <memcpy>:
    396c:	fb 01       	movw	r30, r22
    396e:	dc 01       	movw	r26, r24
    3970:	02 c0       	rjmp	.+4      	; 0x3976 <memcpy+0xa>
    3972:	01 90       	ld	r0, Z+
    3974:	0d 92       	st	X+, r0
    3976:	41 50       	subi	r20, 0x01	; 1
    3978:	50 40       	sbci	r21, 0x00	; 0
    397a:	d8 f7       	brcc	.-10     	; 0x3972 <memcpy+0x6>
    397c:	08 95       	ret

0000397e <malloc>:
    397e:	0f 93       	push	r16
    3980:	1f 93       	push	r17
    3982:	cf 93       	push	r28
    3984:	df 93       	push	r29
    3986:	82 30       	cpi	r24, 0x02	; 2
    3988:	91 05       	cpc	r25, r1
    398a:	10 f4       	brcc	.+4      	; 0x3990 <malloc+0x12>
    398c:	82 e0       	ldi	r24, 0x02	; 2
    398e:	90 e0       	ldi	r25, 0x00	; 0
    3990:	e0 91 f9 06 	lds	r30, 0x06F9	; 0x8006f9 <__flp>
    3994:	f0 91 fa 06 	lds	r31, 0x06FA	; 0x8006fa <__flp+0x1>
    3998:	20 e0       	ldi	r18, 0x00	; 0
    399a:	30 e0       	ldi	r19, 0x00	; 0
    399c:	a0 e0       	ldi	r26, 0x00	; 0
    399e:	b0 e0       	ldi	r27, 0x00	; 0
    39a0:	30 97       	sbiw	r30, 0x00	; 0
    39a2:	19 f1       	breq	.+70     	; 0x39ea <malloc+0x6c>
    39a4:	40 81       	ld	r20, Z
    39a6:	51 81       	ldd	r21, Z+1	; 0x01
    39a8:	02 81       	ldd	r16, Z+2	; 0x02
    39aa:	13 81       	ldd	r17, Z+3	; 0x03
    39ac:	48 17       	cp	r20, r24
    39ae:	59 07       	cpc	r21, r25
    39b0:	c8 f0       	brcs	.+50     	; 0x39e4 <malloc+0x66>
    39b2:	84 17       	cp	r24, r20
    39b4:	95 07       	cpc	r25, r21
    39b6:	69 f4       	brne	.+26     	; 0x39d2 <malloc+0x54>
    39b8:	10 97       	sbiw	r26, 0x00	; 0
    39ba:	31 f0       	breq	.+12     	; 0x39c8 <malloc+0x4a>
    39bc:	12 96       	adiw	r26, 0x02	; 2
    39be:	0c 93       	st	X, r16
    39c0:	12 97       	sbiw	r26, 0x02	; 2
    39c2:	13 96       	adiw	r26, 0x03	; 3
    39c4:	1c 93       	st	X, r17
    39c6:	27 c0       	rjmp	.+78     	; 0x3a16 <malloc+0x98>
    39c8:	00 93 f9 06 	sts	0x06F9, r16	; 0x8006f9 <__flp>
    39cc:	10 93 fa 06 	sts	0x06FA, r17	; 0x8006fa <__flp+0x1>
    39d0:	22 c0       	rjmp	.+68     	; 0x3a16 <malloc+0x98>
    39d2:	21 15       	cp	r18, r1
    39d4:	31 05       	cpc	r19, r1
    39d6:	19 f0       	breq	.+6      	; 0x39de <malloc+0x60>
    39d8:	42 17       	cp	r20, r18
    39da:	53 07       	cpc	r21, r19
    39dc:	18 f4       	brcc	.+6      	; 0x39e4 <malloc+0x66>
    39de:	9a 01       	movw	r18, r20
    39e0:	bd 01       	movw	r22, r26
    39e2:	ef 01       	movw	r28, r30
    39e4:	df 01       	movw	r26, r30
    39e6:	f8 01       	movw	r30, r16
    39e8:	db cf       	rjmp	.-74     	; 0x39a0 <malloc+0x22>
    39ea:	21 15       	cp	r18, r1
    39ec:	31 05       	cpc	r19, r1
    39ee:	f9 f0       	breq	.+62     	; 0x3a2e <malloc+0xb0>
    39f0:	28 1b       	sub	r18, r24
    39f2:	39 0b       	sbc	r19, r25
    39f4:	24 30       	cpi	r18, 0x04	; 4
    39f6:	31 05       	cpc	r19, r1
    39f8:	80 f4       	brcc	.+32     	; 0x3a1a <malloc+0x9c>
    39fa:	8a 81       	ldd	r24, Y+2	; 0x02
    39fc:	9b 81       	ldd	r25, Y+3	; 0x03
    39fe:	61 15       	cp	r22, r1
    3a00:	71 05       	cpc	r23, r1
    3a02:	21 f0       	breq	.+8      	; 0x3a0c <malloc+0x8e>
    3a04:	fb 01       	movw	r30, r22
    3a06:	93 83       	std	Z+3, r25	; 0x03
    3a08:	82 83       	std	Z+2, r24	; 0x02
    3a0a:	04 c0       	rjmp	.+8      	; 0x3a14 <malloc+0x96>
    3a0c:	90 93 fa 06 	sts	0x06FA, r25	; 0x8006fa <__flp+0x1>
    3a10:	80 93 f9 06 	sts	0x06F9, r24	; 0x8006f9 <__flp>
    3a14:	fe 01       	movw	r30, r28
    3a16:	32 96       	adiw	r30, 0x02	; 2
    3a18:	44 c0       	rjmp	.+136    	; 0x3aa2 <malloc+0x124>
    3a1a:	fe 01       	movw	r30, r28
    3a1c:	e2 0f       	add	r30, r18
    3a1e:	f3 1f       	adc	r31, r19
    3a20:	81 93       	st	Z+, r24
    3a22:	91 93       	st	Z+, r25
    3a24:	22 50       	subi	r18, 0x02	; 2
    3a26:	31 09       	sbc	r19, r1
    3a28:	39 83       	std	Y+1, r19	; 0x01
    3a2a:	28 83       	st	Y, r18
    3a2c:	3a c0       	rjmp	.+116    	; 0x3aa2 <malloc+0x124>
    3a2e:	20 91 f7 06 	lds	r18, 0x06F7	; 0x8006f7 <__brkval>
    3a32:	30 91 f8 06 	lds	r19, 0x06F8	; 0x8006f8 <__brkval+0x1>
    3a36:	23 2b       	or	r18, r19
    3a38:	41 f4       	brne	.+16     	; 0x3a4a <malloc+0xcc>
    3a3a:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    3a3e:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    3a42:	30 93 f8 06 	sts	0x06F8, r19	; 0x8006f8 <__brkval+0x1>
    3a46:	20 93 f7 06 	sts	0x06F7, r18	; 0x8006f7 <__brkval>
    3a4a:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    3a4e:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    3a52:	21 15       	cp	r18, r1
    3a54:	31 05       	cpc	r19, r1
    3a56:	41 f4       	brne	.+16     	; 0x3a68 <malloc+0xea>
    3a58:	2d b7       	in	r18, 0x3d	; 61
    3a5a:	3e b7       	in	r19, 0x3e	; 62
    3a5c:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    3a60:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    3a64:	24 1b       	sub	r18, r20
    3a66:	35 0b       	sbc	r19, r21
    3a68:	e0 91 f7 06 	lds	r30, 0x06F7	; 0x8006f7 <__brkval>
    3a6c:	f0 91 f8 06 	lds	r31, 0x06F8	; 0x8006f8 <__brkval+0x1>
    3a70:	e2 17       	cp	r30, r18
    3a72:	f3 07       	cpc	r31, r19
    3a74:	a0 f4       	brcc	.+40     	; 0x3a9e <malloc+0x120>
    3a76:	2e 1b       	sub	r18, r30
    3a78:	3f 0b       	sbc	r19, r31
    3a7a:	28 17       	cp	r18, r24
    3a7c:	39 07       	cpc	r19, r25
    3a7e:	78 f0       	brcs	.+30     	; 0x3a9e <malloc+0x120>
    3a80:	ac 01       	movw	r20, r24
    3a82:	4e 5f       	subi	r20, 0xFE	; 254
    3a84:	5f 4f       	sbci	r21, 0xFF	; 255
    3a86:	24 17       	cp	r18, r20
    3a88:	35 07       	cpc	r19, r21
    3a8a:	48 f0       	brcs	.+18     	; 0x3a9e <malloc+0x120>
    3a8c:	4e 0f       	add	r20, r30
    3a8e:	5f 1f       	adc	r21, r31
    3a90:	50 93 f8 06 	sts	0x06F8, r21	; 0x8006f8 <__brkval+0x1>
    3a94:	40 93 f7 06 	sts	0x06F7, r20	; 0x8006f7 <__brkval>
    3a98:	81 93       	st	Z+, r24
    3a9a:	91 93       	st	Z+, r25
    3a9c:	02 c0       	rjmp	.+4      	; 0x3aa2 <malloc+0x124>
    3a9e:	e0 e0       	ldi	r30, 0x00	; 0
    3aa0:	f0 e0       	ldi	r31, 0x00	; 0
    3aa2:	cf 01       	movw	r24, r30
    3aa4:	df 91       	pop	r29
    3aa6:	cf 91       	pop	r28
    3aa8:	1f 91       	pop	r17
    3aaa:	0f 91       	pop	r16
    3aac:	08 95       	ret

00003aae <free>:
    3aae:	cf 93       	push	r28
    3ab0:	df 93       	push	r29
    3ab2:	00 97       	sbiw	r24, 0x00	; 0
    3ab4:	09 f4       	brne	.+2      	; 0x3ab8 <free+0xa>
    3ab6:	81 c0       	rjmp	.+258    	; 0x3bba <free+0x10c>
    3ab8:	fc 01       	movw	r30, r24
    3aba:	32 97       	sbiw	r30, 0x02	; 2
    3abc:	13 82       	std	Z+3, r1	; 0x03
    3abe:	12 82       	std	Z+2, r1	; 0x02
    3ac0:	a0 91 f9 06 	lds	r26, 0x06F9	; 0x8006f9 <__flp>
    3ac4:	b0 91 fa 06 	lds	r27, 0x06FA	; 0x8006fa <__flp+0x1>
    3ac8:	10 97       	sbiw	r26, 0x00	; 0
    3aca:	81 f4       	brne	.+32     	; 0x3aec <free+0x3e>
    3acc:	20 81       	ld	r18, Z
    3ace:	31 81       	ldd	r19, Z+1	; 0x01
    3ad0:	82 0f       	add	r24, r18
    3ad2:	93 1f       	adc	r25, r19
    3ad4:	20 91 f7 06 	lds	r18, 0x06F7	; 0x8006f7 <__brkval>
    3ad8:	30 91 f8 06 	lds	r19, 0x06F8	; 0x8006f8 <__brkval+0x1>
    3adc:	28 17       	cp	r18, r24
    3ade:	39 07       	cpc	r19, r25
    3ae0:	51 f5       	brne	.+84     	; 0x3b36 <free+0x88>
    3ae2:	f0 93 f8 06 	sts	0x06F8, r31	; 0x8006f8 <__brkval+0x1>
    3ae6:	e0 93 f7 06 	sts	0x06F7, r30	; 0x8006f7 <__brkval>
    3aea:	67 c0       	rjmp	.+206    	; 0x3bba <free+0x10c>
    3aec:	ed 01       	movw	r28, r26
    3aee:	20 e0       	ldi	r18, 0x00	; 0
    3af0:	30 e0       	ldi	r19, 0x00	; 0
    3af2:	ce 17       	cp	r28, r30
    3af4:	df 07       	cpc	r29, r31
    3af6:	40 f4       	brcc	.+16     	; 0x3b08 <free+0x5a>
    3af8:	4a 81       	ldd	r20, Y+2	; 0x02
    3afa:	5b 81       	ldd	r21, Y+3	; 0x03
    3afc:	9e 01       	movw	r18, r28
    3afe:	41 15       	cp	r20, r1
    3b00:	51 05       	cpc	r21, r1
    3b02:	f1 f0       	breq	.+60     	; 0x3b40 <free+0x92>
    3b04:	ea 01       	movw	r28, r20
    3b06:	f5 cf       	rjmp	.-22     	; 0x3af2 <free+0x44>
    3b08:	d3 83       	std	Z+3, r29	; 0x03
    3b0a:	c2 83       	std	Z+2, r28	; 0x02
    3b0c:	40 81       	ld	r20, Z
    3b0e:	51 81       	ldd	r21, Z+1	; 0x01
    3b10:	84 0f       	add	r24, r20
    3b12:	95 1f       	adc	r25, r21
    3b14:	c8 17       	cp	r28, r24
    3b16:	d9 07       	cpc	r29, r25
    3b18:	59 f4       	brne	.+22     	; 0x3b30 <free+0x82>
    3b1a:	88 81       	ld	r24, Y
    3b1c:	99 81       	ldd	r25, Y+1	; 0x01
    3b1e:	84 0f       	add	r24, r20
    3b20:	95 1f       	adc	r25, r21
    3b22:	02 96       	adiw	r24, 0x02	; 2
    3b24:	91 83       	std	Z+1, r25	; 0x01
    3b26:	80 83       	st	Z, r24
    3b28:	8a 81       	ldd	r24, Y+2	; 0x02
    3b2a:	9b 81       	ldd	r25, Y+3	; 0x03
    3b2c:	93 83       	std	Z+3, r25	; 0x03
    3b2e:	82 83       	std	Z+2, r24	; 0x02
    3b30:	21 15       	cp	r18, r1
    3b32:	31 05       	cpc	r19, r1
    3b34:	29 f4       	brne	.+10     	; 0x3b40 <free+0x92>
    3b36:	f0 93 fa 06 	sts	0x06FA, r31	; 0x8006fa <__flp+0x1>
    3b3a:	e0 93 f9 06 	sts	0x06F9, r30	; 0x8006f9 <__flp>
    3b3e:	3d c0       	rjmp	.+122    	; 0x3bba <free+0x10c>
    3b40:	e9 01       	movw	r28, r18
    3b42:	fb 83       	std	Y+3, r31	; 0x03
    3b44:	ea 83       	std	Y+2, r30	; 0x02
    3b46:	49 91       	ld	r20, Y+
    3b48:	59 91       	ld	r21, Y+
    3b4a:	c4 0f       	add	r28, r20
    3b4c:	d5 1f       	adc	r29, r21
    3b4e:	ec 17       	cp	r30, r28
    3b50:	fd 07       	cpc	r31, r29
    3b52:	61 f4       	brne	.+24     	; 0x3b6c <free+0xbe>
    3b54:	80 81       	ld	r24, Z
    3b56:	91 81       	ldd	r25, Z+1	; 0x01
    3b58:	84 0f       	add	r24, r20
    3b5a:	95 1f       	adc	r25, r21
    3b5c:	02 96       	adiw	r24, 0x02	; 2
    3b5e:	e9 01       	movw	r28, r18
    3b60:	99 83       	std	Y+1, r25	; 0x01
    3b62:	88 83       	st	Y, r24
    3b64:	82 81       	ldd	r24, Z+2	; 0x02
    3b66:	93 81       	ldd	r25, Z+3	; 0x03
    3b68:	9b 83       	std	Y+3, r25	; 0x03
    3b6a:	8a 83       	std	Y+2, r24	; 0x02
    3b6c:	e0 e0       	ldi	r30, 0x00	; 0
    3b6e:	f0 e0       	ldi	r31, 0x00	; 0
    3b70:	12 96       	adiw	r26, 0x02	; 2
    3b72:	8d 91       	ld	r24, X+
    3b74:	9c 91       	ld	r25, X
    3b76:	13 97       	sbiw	r26, 0x03	; 3
    3b78:	00 97       	sbiw	r24, 0x00	; 0
    3b7a:	19 f0       	breq	.+6      	; 0x3b82 <free+0xd4>
    3b7c:	fd 01       	movw	r30, r26
    3b7e:	dc 01       	movw	r26, r24
    3b80:	f7 cf       	rjmp	.-18     	; 0x3b70 <free+0xc2>
    3b82:	8d 91       	ld	r24, X+
    3b84:	9c 91       	ld	r25, X
    3b86:	11 97       	sbiw	r26, 0x01	; 1
    3b88:	9d 01       	movw	r18, r26
    3b8a:	2e 5f       	subi	r18, 0xFE	; 254
    3b8c:	3f 4f       	sbci	r19, 0xFF	; 255
    3b8e:	82 0f       	add	r24, r18
    3b90:	93 1f       	adc	r25, r19
    3b92:	20 91 f7 06 	lds	r18, 0x06F7	; 0x8006f7 <__brkval>
    3b96:	30 91 f8 06 	lds	r19, 0x06F8	; 0x8006f8 <__brkval+0x1>
    3b9a:	28 17       	cp	r18, r24
    3b9c:	39 07       	cpc	r19, r25
    3b9e:	69 f4       	brne	.+26     	; 0x3bba <free+0x10c>
    3ba0:	30 97       	sbiw	r30, 0x00	; 0
    3ba2:	29 f4       	brne	.+10     	; 0x3bae <free+0x100>
    3ba4:	10 92 fa 06 	sts	0x06FA, r1	; 0x8006fa <__flp+0x1>
    3ba8:	10 92 f9 06 	sts	0x06F9, r1	; 0x8006f9 <__flp>
    3bac:	02 c0       	rjmp	.+4      	; 0x3bb2 <free+0x104>
    3bae:	13 82       	std	Z+3, r1	; 0x03
    3bb0:	12 82       	std	Z+2, r1	; 0x02
    3bb2:	b0 93 f8 06 	sts	0x06F8, r27	; 0x8006f8 <__brkval+0x1>
    3bb6:	a0 93 f7 06 	sts	0x06F7, r26	; 0x8006f7 <__brkval>
    3bba:	df 91       	pop	r29
    3bbc:	cf 91       	pop	r28
    3bbe:	08 95       	ret

00003bc0 <__prologue_saves__>:
    3bc0:	2f 92       	push	r2
    3bc2:	3f 92       	push	r3
    3bc4:	4f 92       	push	r4
    3bc6:	5f 92       	push	r5
    3bc8:	6f 92       	push	r6
    3bca:	7f 92       	push	r7
    3bcc:	8f 92       	push	r8
    3bce:	9f 92       	push	r9
    3bd0:	af 92       	push	r10
    3bd2:	bf 92       	push	r11
    3bd4:	cf 92       	push	r12
    3bd6:	df 92       	push	r13
    3bd8:	ef 92       	push	r14
    3bda:	ff 92       	push	r15
    3bdc:	0f 93       	push	r16
    3bde:	1f 93       	push	r17
    3be0:	cf 93       	push	r28
    3be2:	df 93       	push	r29
    3be4:	cd b7       	in	r28, 0x3d	; 61
    3be6:	de b7       	in	r29, 0x3e	; 62
    3be8:	ca 1b       	sub	r28, r26
    3bea:	db 0b       	sbc	r29, r27
    3bec:	0f b6       	in	r0, 0x3f	; 63
    3bee:	f8 94       	cli
    3bf0:	de bf       	out	0x3e, r29	; 62
    3bf2:	0f be       	out	0x3f, r0	; 63
    3bf4:	cd bf       	out	0x3d, r28	; 61
    3bf6:	09 94       	ijmp

00003bf8 <__epilogue_restores__>:
    3bf8:	2a 88       	ldd	r2, Y+18	; 0x12
    3bfa:	39 88       	ldd	r3, Y+17	; 0x11
    3bfc:	48 88       	ldd	r4, Y+16	; 0x10
    3bfe:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c00:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c02:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c04:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c06:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c08:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c0a:	b9 84       	ldd	r11, Y+9	; 0x09
    3c0c:	c8 84       	ldd	r12, Y+8	; 0x08
    3c0e:	df 80       	ldd	r13, Y+7	; 0x07
    3c10:	ee 80       	ldd	r14, Y+6	; 0x06
    3c12:	fd 80       	ldd	r15, Y+5	; 0x05
    3c14:	0c 81       	ldd	r16, Y+4	; 0x04
    3c16:	1b 81       	ldd	r17, Y+3	; 0x03
    3c18:	aa 81       	ldd	r26, Y+2	; 0x02
    3c1a:	b9 81       	ldd	r27, Y+1	; 0x01
    3c1c:	ce 0f       	add	r28, r30
    3c1e:	d1 1d       	adc	r29, r1
    3c20:	0f b6       	in	r0, 0x3f	; 63
    3c22:	f8 94       	cli
    3c24:	de bf       	out	0x3e, r29	; 62
    3c26:	0f be       	out	0x3f, r0	; 63
    3c28:	cd bf       	out	0x3d, r28	; 61
    3c2a:	ed 01       	movw	r28, r26
    3c2c:	08 95       	ret

00003c2e <_exit>:
    3c2e:	f8 94       	cli

00003c30 <__stop_program>:
    3c30:	ff cf       	rjmp	.-2      	; 0x3c30 <__stop_program>
